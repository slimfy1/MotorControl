
Stepper_H7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003554  08000298  08000298  00010298  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000010  080037ec  080037ec  000137ec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080037fc  080037fc  00020010  2**0
                  CONTENTS
  4 .ARM          00000000  080037fc  080037fc  00020010  2**0
                  CONTENTS
  5 .preinit_array 00000000  080037fc  080037fc  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080037fc  080037fc  000137fc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003800  08003800  00013800  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  24000000  08003804  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001e4  24000010  08003814  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  240001f4  08003814  000201f4  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .debug_info   00014137  00000000  00000000  0002003e  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00002243  00000000  00000000  00034175  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000ca0  00000000  00000000  000363b8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000bc8  00000000  00000000  00037058  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00035626  00000000  00000000  00037c20  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00009c5d  00000000  00000000  0006d246  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00156f53  00000000  00000000  00076ea3  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  001cddf6  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000033f8  00000000  00000000  001cde74  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000298 <__do_global_dtors_aux>:
 8000298:	b510      	push	{r4, lr}
 800029a:	4c05      	ldr	r4, [pc, #20]	; (80002b0 <__do_global_dtors_aux+0x18>)
 800029c:	7823      	ldrb	r3, [r4, #0]
 800029e:	b933      	cbnz	r3, 80002ae <__do_global_dtors_aux+0x16>
 80002a0:	4b04      	ldr	r3, [pc, #16]	; (80002b4 <__do_global_dtors_aux+0x1c>)
 80002a2:	b113      	cbz	r3, 80002aa <__do_global_dtors_aux+0x12>
 80002a4:	4804      	ldr	r0, [pc, #16]	; (80002b8 <__do_global_dtors_aux+0x20>)
 80002a6:	f3af 8000 	nop.w
 80002aa:	2301      	movs	r3, #1
 80002ac:	7023      	strb	r3, [r4, #0]
 80002ae:	bd10      	pop	{r4, pc}
 80002b0:	24000010 	.word	0x24000010
 80002b4:	00000000 	.word	0x00000000
 80002b8:	080037d4 	.word	0x080037d4

080002bc <frame_dummy>:
 80002bc:	b508      	push	{r3, lr}
 80002be:	4b03      	ldr	r3, [pc, #12]	; (80002cc <frame_dummy+0x10>)
 80002c0:	b11b      	cbz	r3, 80002ca <frame_dummy+0xe>
 80002c2:	4903      	ldr	r1, [pc, #12]	; (80002d0 <frame_dummy+0x14>)
 80002c4:	4803      	ldr	r0, [pc, #12]	; (80002d4 <frame_dummy+0x18>)
 80002c6:	f3af 8000 	nop.w
 80002ca:	bd08      	pop	{r3, pc}
 80002cc:	00000000 	.word	0x00000000
 80002d0:	24000014 	.word	0x24000014
 80002d4:	080037d4 	.word	0x080037d4

080002d8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80002d8:	b580      	push	{r7, lr}
 80002da:	b082      	sub	sp, #8
 80002dc:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80002de:	2003      	movs	r0, #3
 80002e0:	f000 f968 	bl	80005b4 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80002e4:	f001 f95c 	bl	80015a0 <HAL_RCC_GetSysClockFreq>
 80002e8:	4601      	mov	r1, r0
 80002ea:	4b15      	ldr	r3, [pc, #84]	; (8000340 <HAL_Init+0x68>)
 80002ec:	699b      	ldr	r3, [r3, #24]
 80002ee:	0a1b      	lsrs	r3, r3, #8
 80002f0:	f003 030f 	and.w	r3, r3, #15
 80002f4:	4a13      	ldr	r2, [pc, #76]	; (8000344 <HAL_Init+0x6c>)
 80002f6:	5cd3      	ldrb	r3, [r2, r3]
 80002f8:	f003 031f 	and.w	r3, r3, #31
 80002fc:	fa21 f303 	lsr.w	r3, r1, r3
 8000300:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8000302:	4b0f      	ldr	r3, [pc, #60]	; (8000340 <HAL_Init+0x68>)
 8000304:	699b      	ldr	r3, [r3, #24]
 8000306:	f003 030f 	and.w	r3, r3, #15
 800030a:	4a0e      	ldr	r2, [pc, #56]	; (8000344 <HAL_Init+0x6c>)
 800030c:	5cd3      	ldrb	r3, [r2, r3]
 800030e:	f003 031f 	and.w	r3, r3, #31
 8000312:	687a      	ldr	r2, [r7, #4]
 8000314:	fa22 f303 	lsr.w	r3, r2, r3
 8000318:	4a0b      	ldr	r2, [pc, #44]	; (8000348 <HAL_Init+0x70>)
 800031a:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800031c:	4a0b      	ldr	r2, [pc, #44]	; (800034c <HAL_Init+0x74>)
 800031e:	687b      	ldr	r3, [r7, #4]
 8000320:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000322:	2000      	movs	r0, #0
 8000324:	f000 f814 	bl	8000350 <HAL_InitTick>
 8000328:	4603      	mov	r3, r0
 800032a:	2b00      	cmp	r3, #0
 800032c:	d001      	beq.n	8000332 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 800032e:	2301      	movs	r3, #1
 8000330:	e002      	b.n	8000338 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8000332:	f002 ff2b 	bl	800318c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000336:	2300      	movs	r3, #0
}
 8000338:	4618      	mov	r0, r3
 800033a:	3708      	adds	r7, #8
 800033c:	46bd      	mov	sp, r7
 800033e:	bd80      	pop	{r7, pc}
 8000340:	58024400 	.word	0x58024400
 8000344:	080037ec 	.word	0x080037ec
 8000348:	2400000c 	.word	0x2400000c
 800034c:	24000008 	.word	0x24000008

08000350 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000350:	b580      	push	{r7, lr}
 8000352:	b082      	sub	sp, #8
 8000354:	af00      	add	r7, sp, #0
 8000356:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8000358:	4b15      	ldr	r3, [pc, #84]	; (80003b0 <HAL_InitTick+0x60>)
 800035a:	781b      	ldrb	r3, [r3, #0]
 800035c:	2b00      	cmp	r3, #0
 800035e:	d101      	bne.n	8000364 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8000360:	2301      	movs	r3, #1
 8000362:	e021      	b.n	80003a8 <HAL_InitTick+0x58>
  }

  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8000364:	4b13      	ldr	r3, [pc, #76]	; (80003b4 <HAL_InitTick+0x64>)
 8000366:	681a      	ldr	r2, [r3, #0]
 8000368:	4b11      	ldr	r3, [pc, #68]	; (80003b0 <HAL_InitTick+0x60>)
 800036a:	781b      	ldrb	r3, [r3, #0]
 800036c:	4619      	mov	r1, r3
 800036e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000372:	fbb3 f3f1 	udiv	r3, r3, r1
 8000376:	fbb2 f3f3 	udiv	r3, r2, r3
 800037a:	4618      	mov	r0, r3
 800037c:	f000 f94d 	bl	800061a <HAL_SYSTICK_Config>
 8000380:	4603      	mov	r3, r0
 8000382:	2b00      	cmp	r3, #0
 8000384:	d001      	beq.n	800038a <HAL_InitTick+0x3a>
  {
    return HAL_ERROR;
 8000386:	2301      	movs	r3, #1
 8000388:	e00e      	b.n	80003a8 <HAL_InitTick+0x58>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800038a:	687b      	ldr	r3, [r7, #4]
 800038c:	2b0f      	cmp	r3, #15
 800038e:	d80a      	bhi.n	80003a6 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000390:	2200      	movs	r2, #0
 8000392:	6879      	ldr	r1, [r7, #4]
 8000394:	f04f 30ff 	mov.w	r0, #4294967295
 8000398:	f000 f917 	bl	80005ca <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800039c:	4a06      	ldr	r2, [pc, #24]	; (80003b8 <HAL_InitTick+0x68>)
 800039e:	687b      	ldr	r3, [r7, #4]
 80003a0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80003a2:	2300      	movs	r3, #0
 80003a4:	e000      	b.n	80003a8 <HAL_InitTick+0x58>
    return HAL_ERROR;
 80003a6:	2301      	movs	r3, #1
}
 80003a8:	4618      	mov	r0, r3
 80003aa:	3708      	adds	r7, #8
 80003ac:	46bd      	mov	sp, r7
 80003ae:	bd80      	pop	{r7, pc}
 80003b0:	24000004 	.word	0x24000004
 80003b4:	24000008 	.word	0x24000008
 80003b8:	24000000 	.word	0x24000000

080003bc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80003bc:	b480      	push	{r7}
 80003be:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80003c0:	4b06      	ldr	r3, [pc, #24]	; (80003dc <HAL_IncTick+0x20>)
 80003c2:	781b      	ldrb	r3, [r3, #0]
 80003c4:	461a      	mov	r2, r3
 80003c6:	4b06      	ldr	r3, [pc, #24]	; (80003e0 <HAL_IncTick+0x24>)
 80003c8:	681b      	ldr	r3, [r3, #0]
 80003ca:	4413      	add	r3, r2
 80003cc:	4a04      	ldr	r2, [pc, #16]	; (80003e0 <HAL_IncTick+0x24>)
 80003ce:	6013      	str	r3, [r2, #0]
}
 80003d0:	bf00      	nop
 80003d2:	46bd      	mov	sp, r7
 80003d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003d8:	4770      	bx	lr
 80003da:	bf00      	nop
 80003dc:	24000004 	.word	0x24000004
 80003e0:	24000030 	.word	0x24000030

080003e4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80003e4:	b480      	push	{r7}
 80003e6:	af00      	add	r7, sp, #0
  return uwTick;
 80003e8:	4b03      	ldr	r3, [pc, #12]	; (80003f8 <HAL_GetTick+0x14>)
 80003ea:	681b      	ldr	r3, [r3, #0]
}
 80003ec:	4618      	mov	r0, r3
 80003ee:	46bd      	mov	sp, r7
 80003f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003f4:	4770      	bx	lr
 80003f6:	bf00      	nop
 80003f8:	24000030 	.word	0x24000030

080003fc <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 80003fc:	b480      	push	{r7}
 80003fe:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8000400:	4b03      	ldr	r3, [pc, #12]	; (8000410 <HAL_GetREVID+0x14>)
 8000402:	681b      	ldr	r3, [r3, #0]
 8000404:	0c1b      	lsrs	r3, r3, #16
}
 8000406:	4618      	mov	r0, r3
 8000408:	46bd      	mov	sp, r7
 800040a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800040e:	4770      	bx	lr
 8000410:	5c001000 	.word	0x5c001000

08000414 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000414:	b480      	push	{r7}
 8000416:	b085      	sub	sp, #20
 8000418:	af00      	add	r7, sp, #0
 800041a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800041c:	687b      	ldr	r3, [r7, #4]
 800041e:	f003 0307 	and.w	r3, r3, #7
 8000422:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000424:	4b0b      	ldr	r3, [pc, #44]	; (8000454 <__NVIC_SetPriorityGrouping+0x40>)
 8000426:	68db      	ldr	r3, [r3, #12]
 8000428:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800042a:	68ba      	ldr	r2, [r7, #8]
 800042c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000430:	4013      	ands	r3, r2
 8000432:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000434:	68fb      	ldr	r3, [r7, #12]
 8000436:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000438:	68bb      	ldr	r3, [r7, #8]
 800043a:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 800043c:	4b06      	ldr	r3, [pc, #24]	; (8000458 <__NVIC_SetPriorityGrouping+0x44>)
 800043e:	4313      	orrs	r3, r2
 8000440:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000442:	4a04      	ldr	r2, [pc, #16]	; (8000454 <__NVIC_SetPriorityGrouping+0x40>)
 8000444:	68bb      	ldr	r3, [r7, #8]
 8000446:	60d3      	str	r3, [r2, #12]
}
 8000448:	bf00      	nop
 800044a:	3714      	adds	r7, #20
 800044c:	46bd      	mov	sp, r7
 800044e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000452:	4770      	bx	lr
 8000454:	e000ed00 	.word	0xe000ed00
 8000458:	05fa0000 	.word	0x05fa0000

0800045c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800045c:	b480      	push	{r7}
 800045e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000460:	4b04      	ldr	r3, [pc, #16]	; (8000474 <__NVIC_GetPriorityGrouping+0x18>)
 8000462:	68db      	ldr	r3, [r3, #12]
 8000464:	0a1b      	lsrs	r3, r3, #8
 8000466:	f003 0307 	and.w	r3, r3, #7
}
 800046a:	4618      	mov	r0, r3
 800046c:	46bd      	mov	sp, r7
 800046e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000472:	4770      	bx	lr
 8000474:	e000ed00 	.word	0xe000ed00

08000478 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000478:	b480      	push	{r7}
 800047a:	b083      	sub	sp, #12
 800047c:	af00      	add	r7, sp, #0
 800047e:	4603      	mov	r3, r0
 8000480:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8000482:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000486:	2b00      	cmp	r3, #0
 8000488:	db0b      	blt.n	80004a2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800048a:	88fb      	ldrh	r3, [r7, #6]
 800048c:	f003 021f 	and.w	r2, r3, #31
 8000490:	4907      	ldr	r1, [pc, #28]	; (80004b0 <__NVIC_EnableIRQ+0x38>)
 8000492:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000496:	095b      	lsrs	r3, r3, #5
 8000498:	2001      	movs	r0, #1
 800049a:	fa00 f202 	lsl.w	r2, r0, r2
 800049e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80004a2:	bf00      	nop
 80004a4:	370c      	adds	r7, #12
 80004a6:	46bd      	mov	sp, r7
 80004a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004ac:	4770      	bx	lr
 80004ae:	bf00      	nop
 80004b0:	e000e100 	.word	0xe000e100

080004b4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80004b4:	b480      	push	{r7}
 80004b6:	b083      	sub	sp, #12
 80004b8:	af00      	add	r7, sp, #0
 80004ba:	4603      	mov	r3, r0
 80004bc:	6039      	str	r1, [r7, #0]
 80004be:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80004c0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80004c4:	2b00      	cmp	r3, #0
 80004c6:	db0a      	blt.n	80004de <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80004c8:	683b      	ldr	r3, [r7, #0]
 80004ca:	b2da      	uxtb	r2, r3
 80004cc:	490c      	ldr	r1, [pc, #48]	; (8000500 <__NVIC_SetPriority+0x4c>)
 80004ce:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80004d2:	0112      	lsls	r2, r2, #4
 80004d4:	b2d2      	uxtb	r2, r2
 80004d6:	440b      	add	r3, r1
 80004d8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80004dc:	e00a      	b.n	80004f4 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80004de:	683b      	ldr	r3, [r7, #0]
 80004e0:	b2da      	uxtb	r2, r3
 80004e2:	4908      	ldr	r1, [pc, #32]	; (8000504 <__NVIC_SetPriority+0x50>)
 80004e4:	88fb      	ldrh	r3, [r7, #6]
 80004e6:	f003 030f 	and.w	r3, r3, #15
 80004ea:	3b04      	subs	r3, #4
 80004ec:	0112      	lsls	r2, r2, #4
 80004ee:	b2d2      	uxtb	r2, r2
 80004f0:	440b      	add	r3, r1
 80004f2:	761a      	strb	r2, [r3, #24]
}
 80004f4:	bf00      	nop
 80004f6:	370c      	adds	r7, #12
 80004f8:	46bd      	mov	sp, r7
 80004fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004fe:	4770      	bx	lr
 8000500:	e000e100 	.word	0xe000e100
 8000504:	e000ed00 	.word	0xe000ed00

08000508 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000508:	b480      	push	{r7}
 800050a:	b089      	sub	sp, #36	; 0x24
 800050c:	af00      	add	r7, sp, #0
 800050e:	60f8      	str	r0, [r7, #12]
 8000510:	60b9      	str	r1, [r7, #8]
 8000512:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000514:	68fb      	ldr	r3, [r7, #12]
 8000516:	f003 0307 	and.w	r3, r3, #7
 800051a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800051c:	69fb      	ldr	r3, [r7, #28]
 800051e:	f1c3 0307 	rsb	r3, r3, #7
 8000522:	2b04      	cmp	r3, #4
 8000524:	bf28      	it	cs
 8000526:	2304      	movcs	r3, #4
 8000528:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800052a:	69fb      	ldr	r3, [r7, #28]
 800052c:	3304      	adds	r3, #4
 800052e:	2b06      	cmp	r3, #6
 8000530:	d902      	bls.n	8000538 <NVIC_EncodePriority+0x30>
 8000532:	69fb      	ldr	r3, [r7, #28]
 8000534:	3b03      	subs	r3, #3
 8000536:	e000      	b.n	800053a <NVIC_EncodePriority+0x32>
 8000538:	2300      	movs	r3, #0
 800053a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800053c:	f04f 32ff 	mov.w	r2, #4294967295
 8000540:	69bb      	ldr	r3, [r7, #24]
 8000542:	fa02 f303 	lsl.w	r3, r2, r3
 8000546:	43da      	mvns	r2, r3
 8000548:	68bb      	ldr	r3, [r7, #8]
 800054a:	401a      	ands	r2, r3
 800054c:	697b      	ldr	r3, [r7, #20]
 800054e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000550:	f04f 31ff 	mov.w	r1, #4294967295
 8000554:	697b      	ldr	r3, [r7, #20]
 8000556:	fa01 f303 	lsl.w	r3, r1, r3
 800055a:	43d9      	mvns	r1, r3
 800055c:	687b      	ldr	r3, [r7, #4]
 800055e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000560:	4313      	orrs	r3, r2
         );
}
 8000562:	4618      	mov	r0, r3
 8000564:	3724      	adds	r7, #36	; 0x24
 8000566:	46bd      	mov	sp, r7
 8000568:	f85d 7b04 	ldr.w	r7, [sp], #4
 800056c:	4770      	bx	lr
	...

08000570 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000570:	b580      	push	{r7, lr}
 8000572:	b082      	sub	sp, #8
 8000574:	af00      	add	r7, sp, #0
 8000576:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000578:	687b      	ldr	r3, [r7, #4]
 800057a:	3b01      	subs	r3, #1
 800057c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000580:	d301      	bcc.n	8000586 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000582:	2301      	movs	r3, #1
 8000584:	e00f      	b.n	80005a6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000586:	4a0a      	ldr	r2, [pc, #40]	; (80005b0 <SysTick_Config+0x40>)
 8000588:	687b      	ldr	r3, [r7, #4]
 800058a:	3b01      	subs	r3, #1
 800058c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800058e:	210f      	movs	r1, #15
 8000590:	f04f 30ff 	mov.w	r0, #4294967295
 8000594:	f7ff ff8e 	bl	80004b4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000598:	4b05      	ldr	r3, [pc, #20]	; (80005b0 <SysTick_Config+0x40>)
 800059a:	2200      	movs	r2, #0
 800059c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800059e:	4b04      	ldr	r3, [pc, #16]	; (80005b0 <SysTick_Config+0x40>)
 80005a0:	2207      	movs	r2, #7
 80005a2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80005a4:	2300      	movs	r3, #0
}
 80005a6:	4618      	mov	r0, r3
 80005a8:	3708      	adds	r7, #8
 80005aa:	46bd      	mov	sp, r7
 80005ac:	bd80      	pop	{r7, pc}
 80005ae:	bf00      	nop
 80005b0:	e000e010 	.word	0xe000e010

080005b4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80005b4:	b580      	push	{r7, lr}
 80005b6:	b082      	sub	sp, #8
 80005b8:	af00      	add	r7, sp, #0
 80005ba:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80005bc:	6878      	ldr	r0, [r7, #4]
 80005be:	f7ff ff29 	bl	8000414 <__NVIC_SetPriorityGrouping>
}
 80005c2:	bf00      	nop
 80005c4:	3708      	adds	r7, #8
 80005c6:	46bd      	mov	sp, r7
 80005c8:	bd80      	pop	{r7, pc}

080005ca <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80005ca:	b580      	push	{r7, lr}
 80005cc:	b086      	sub	sp, #24
 80005ce:	af00      	add	r7, sp, #0
 80005d0:	4603      	mov	r3, r0
 80005d2:	60b9      	str	r1, [r7, #8]
 80005d4:	607a      	str	r2, [r7, #4]
 80005d6:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80005d8:	f7ff ff40 	bl	800045c <__NVIC_GetPriorityGrouping>
 80005dc:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80005de:	687a      	ldr	r2, [r7, #4]
 80005e0:	68b9      	ldr	r1, [r7, #8]
 80005e2:	6978      	ldr	r0, [r7, #20]
 80005e4:	f7ff ff90 	bl	8000508 <NVIC_EncodePriority>
 80005e8:	4602      	mov	r2, r0
 80005ea:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80005ee:	4611      	mov	r1, r2
 80005f0:	4618      	mov	r0, r3
 80005f2:	f7ff ff5f 	bl	80004b4 <__NVIC_SetPriority>
}
 80005f6:	bf00      	nop
 80005f8:	3718      	adds	r7, #24
 80005fa:	46bd      	mov	sp, r7
 80005fc:	bd80      	pop	{r7, pc}

080005fe <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80005fe:	b580      	push	{r7, lr}
 8000600:	b082      	sub	sp, #8
 8000602:	af00      	add	r7, sp, #0
 8000604:	4603      	mov	r3, r0
 8000606:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000608:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800060c:	4618      	mov	r0, r3
 800060e:	f7ff ff33 	bl	8000478 <__NVIC_EnableIRQ>
}
 8000612:	bf00      	nop
 8000614:	3708      	adds	r7, #8
 8000616:	46bd      	mov	sp, r7
 8000618:	bd80      	pop	{r7, pc}

0800061a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800061a:	b580      	push	{r7, lr}
 800061c:	b082      	sub	sp, #8
 800061e:	af00      	add	r7, sp, #0
 8000620:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000622:	6878      	ldr	r0, [r7, #4]
 8000624:	f7ff ffa4 	bl	8000570 <SysTick_Config>
 8000628:	4603      	mov	r3, r0
}
 800062a:	4618      	mov	r0, r3
 800062c:	3708      	adds	r7, #8
 800062e:	46bd      	mov	sp, r7
 8000630:	bd80      	pop	{r7, pc}
	...

08000634 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000634:	b480      	push	{r7}
 8000636:	b089      	sub	sp, #36	; 0x24
 8000638:	af00      	add	r7, sp, #0
 800063a:	6078      	str	r0, [r7, #4]
 800063c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800063e:	2300      	movs	r3, #0
 8000640:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8000642:	4b89      	ldr	r3, [pc, #548]	; (8000868 <HAL_GPIO_Init+0x234>)
 8000644:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8000646:	e194      	b.n	8000972 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8000648:	683b      	ldr	r3, [r7, #0]
 800064a:	681a      	ldr	r2, [r3, #0]
 800064c:	2101      	movs	r1, #1
 800064e:	69fb      	ldr	r3, [r7, #28]
 8000650:	fa01 f303 	lsl.w	r3, r1, r3
 8000654:	4013      	ands	r3, r2
 8000656:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8000658:	693b      	ldr	r3, [r7, #16]
 800065a:	2b00      	cmp	r3, #0
 800065c:	f000 8186 	beq.w	800096c <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000660:	683b      	ldr	r3, [r7, #0]
 8000662:	685b      	ldr	r3, [r3, #4]
 8000664:	2b01      	cmp	r3, #1
 8000666:	d00b      	beq.n	8000680 <HAL_GPIO_Init+0x4c>
 8000668:	683b      	ldr	r3, [r7, #0]
 800066a:	685b      	ldr	r3, [r3, #4]
 800066c:	2b02      	cmp	r3, #2
 800066e:	d007      	beq.n	8000680 <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000670:	683b      	ldr	r3, [r7, #0]
 8000672:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000674:	2b11      	cmp	r3, #17
 8000676:	d003      	beq.n	8000680 <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000678:	683b      	ldr	r3, [r7, #0]
 800067a:	685b      	ldr	r3, [r3, #4]
 800067c:	2b12      	cmp	r3, #18
 800067e:	d130      	bne.n	80006e2 <HAL_GPIO_Init+0xae>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000680:	687b      	ldr	r3, [r7, #4]
 8000682:	689b      	ldr	r3, [r3, #8]
 8000684:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8000686:	69fb      	ldr	r3, [r7, #28]
 8000688:	005b      	lsls	r3, r3, #1
 800068a:	2203      	movs	r2, #3
 800068c:	fa02 f303 	lsl.w	r3, r2, r3
 8000690:	43db      	mvns	r3, r3
 8000692:	69ba      	ldr	r2, [r7, #24]
 8000694:	4013      	ands	r3, r2
 8000696:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000698:	683b      	ldr	r3, [r7, #0]
 800069a:	68da      	ldr	r2, [r3, #12]
 800069c:	69fb      	ldr	r3, [r7, #28]
 800069e:	005b      	lsls	r3, r3, #1
 80006a0:	fa02 f303 	lsl.w	r3, r2, r3
 80006a4:	69ba      	ldr	r2, [r7, #24]
 80006a6:	4313      	orrs	r3, r2
 80006a8:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80006aa:	687b      	ldr	r3, [r7, #4]
 80006ac:	69ba      	ldr	r2, [r7, #24]
 80006ae:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80006b0:	687b      	ldr	r3, [r7, #4]
 80006b2:	685b      	ldr	r3, [r3, #4]
 80006b4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80006b6:	2201      	movs	r2, #1
 80006b8:	69fb      	ldr	r3, [r7, #28]
 80006ba:	fa02 f303 	lsl.w	r3, r2, r3
 80006be:	43db      	mvns	r3, r3
 80006c0:	69ba      	ldr	r2, [r7, #24]
 80006c2:	4013      	ands	r3, r2
 80006c4:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80006c6:	683b      	ldr	r3, [r7, #0]
 80006c8:	685b      	ldr	r3, [r3, #4]
 80006ca:	091b      	lsrs	r3, r3, #4
 80006cc:	f003 0201 	and.w	r2, r3, #1
 80006d0:	69fb      	ldr	r3, [r7, #28]
 80006d2:	fa02 f303 	lsl.w	r3, r2, r3
 80006d6:	69ba      	ldr	r2, [r7, #24]
 80006d8:	4313      	orrs	r3, r2
 80006da:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80006dc:	687b      	ldr	r3, [r7, #4]
 80006de:	69ba      	ldr	r2, [r7, #24]
 80006e0:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80006e2:	687b      	ldr	r3, [r7, #4]
 80006e4:	68db      	ldr	r3, [r3, #12]
 80006e6:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80006e8:	69fb      	ldr	r3, [r7, #28]
 80006ea:	005b      	lsls	r3, r3, #1
 80006ec:	2203      	movs	r2, #3
 80006ee:	fa02 f303 	lsl.w	r3, r2, r3
 80006f2:	43db      	mvns	r3, r3
 80006f4:	69ba      	ldr	r2, [r7, #24]
 80006f6:	4013      	ands	r3, r2
 80006f8:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80006fa:	683b      	ldr	r3, [r7, #0]
 80006fc:	689a      	ldr	r2, [r3, #8]
 80006fe:	69fb      	ldr	r3, [r7, #28]
 8000700:	005b      	lsls	r3, r3, #1
 8000702:	fa02 f303 	lsl.w	r3, r2, r3
 8000706:	69ba      	ldr	r2, [r7, #24]
 8000708:	4313      	orrs	r3, r2
 800070a:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800070c:	687b      	ldr	r3, [r7, #4]
 800070e:	69ba      	ldr	r2, [r7, #24]
 8000710:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000712:	683b      	ldr	r3, [r7, #0]
 8000714:	685b      	ldr	r3, [r3, #4]
 8000716:	2b02      	cmp	r3, #2
 8000718:	d003      	beq.n	8000722 <HAL_GPIO_Init+0xee>
 800071a:	683b      	ldr	r3, [r7, #0]
 800071c:	685b      	ldr	r3, [r3, #4]
 800071e:	2b12      	cmp	r3, #18
 8000720:	d123      	bne.n	800076a <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000722:	69fb      	ldr	r3, [r7, #28]
 8000724:	08da      	lsrs	r2, r3, #3
 8000726:	687b      	ldr	r3, [r7, #4]
 8000728:	3208      	adds	r2, #8
 800072a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800072e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8000730:	69fb      	ldr	r3, [r7, #28]
 8000732:	f003 0307 	and.w	r3, r3, #7
 8000736:	009b      	lsls	r3, r3, #2
 8000738:	220f      	movs	r2, #15
 800073a:	fa02 f303 	lsl.w	r3, r2, r3
 800073e:	43db      	mvns	r3, r3
 8000740:	69ba      	ldr	r2, [r7, #24]
 8000742:	4013      	ands	r3, r2
 8000744:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8000746:	683b      	ldr	r3, [r7, #0]
 8000748:	691a      	ldr	r2, [r3, #16]
 800074a:	69fb      	ldr	r3, [r7, #28]
 800074c:	f003 0307 	and.w	r3, r3, #7
 8000750:	009b      	lsls	r3, r3, #2
 8000752:	fa02 f303 	lsl.w	r3, r2, r3
 8000756:	69ba      	ldr	r2, [r7, #24]
 8000758:	4313      	orrs	r3, r2
 800075a:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800075c:	69fb      	ldr	r3, [r7, #28]
 800075e:	08da      	lsrs	r2, r3, #3
 8000760:	687b      	ldr	r3, [r7, #4]
 8000762:	3208      	adds	r2, #8
 8000764:	69b9      	ldr	r1, [r7, #24]
 8000766:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800076a:	687b      	ldr	r3, [r7, #4]
 800076c:	681b      	ldr	r3, [r3, #0]
 800076e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8000770:	69fb      	ldr	r3, [r7, #28]
 8000772:	005b      	lsls	r3, r3, #1
 8000774:	2203      	movs	r2, #3
 8000776:	fa02 f303 	lsl.w	r3, r2, r3
 800077a:	43db      	mvns	r3, r3
 800077c:	69ba      	ldr	r2, [r7, #24]
 800077e:	4013      	ands	r3, r2
 8000780:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000782:	683b      	ldr	r3, [r7, #0]
 8000784:	685b      	ldr	r3, [r3, #4]
 8000786:	f003 0203 	and.w	r2, r3, #3
 800078a:	69fb      	ldr	r3, [r7, #28]
 800078c:	005b      	lsls	r3, r3, #1
 800078e:	fa02 f303 	lsl.w	r3, r2, r3
 8000792:	69ba      	ldr	r2, [r7, #24]
 8000794:	4313      	orrs	r3, r2
 8000796:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000798:	687b      	ldr	r3, [r7, #4]
 800079a:	69ba      	ldr	r2, [r7, #24]
 800079c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800079e:	683b      	ldr	r3, [r7, #0]
 80007a0:	685b      	ldr	r3, [r3, #4]
 80007a2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80007a6:	2b00      	cmp	r3, #0
 80007a8:	f000 80e0 	beq.w	800096c <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80007ac:	4b2f      	ldr	r3, [pc, #188]	; (800086c <HAL_GPIO_Init+0x238>)
 80007ae:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80007b2:	4a2e      	ldr	r2, [pc, #184]	; (800086c <HAL_GPIO_Init+0x238>)
 80007b4:	f043 0302 	orr.w	r3, r3, #2
 80007b8:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 80007bc:	4b2b      	ldr	r3, [pc, #172]	; (800086c <HAL_GPIO_Init+0x238>)
 80007be:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80007c2:	f003 0302 	and.w	r3, r3, #2
 80007c6:	60fb      	str	r3, [r7, #12]
 80007c8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80007ca:	4a29      	ldr	r2, [pc, #164]	; (8000870 <HAL_GPIO_Init+0x23c>)
 80007cc:	69fb      	ldr	r3, [r7, #28]
 80007ce:	089b      	lsrs	r3, r3, #2
 80007d0:	3302      	adds	r3, #2
 80007d2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80007d6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80007d8:	69fb      	ldr	r3, [r7, #28]
 80007da:	f003 0303 	and.w	r3, r3, #3
 80007de:	009b      	lsls	r3, r3, #2
 80007e0:	220f      	movs	r2, #15
 80007e2:	fa02 f303 	lsl.w	r3, r2, r3
 80007e6:	43db      	mvns	r3, r3
 80007e8:	69ba      	ldr	r2, [r7, #24]
 80007ea:	4013      	ands	r3, r2
 80007ec:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80007ee:	687b      	ldr	r3, [r7, #4]
 80007f0:	4a20      	ldr	r2, [pc, #128]	; (8000874 <HAL_GPIO_Init+0x240>)
 80007f2:	4293      	cmp	r3, r2
 80007f4:	d052      	beq.n	800089c <HAL_GPIO_Init+0x268>
 80007f6:	687b      	ldr	r3, [r7, #4]
 80007f8:	4a1f      	ldr	r2, [pc, #124]	; (8000878 <HAL_GPIO_Init+0x244>)
 80007fa:	4293      	cmp	r3, r2
 80007fc:	d031      	beq.n	8000862 <HAL_GPIO_Init+0x22e>
 80007fe:	687b      	ldr	r3, [r7, #4]
 8000800:	4a1e      	ldr	r2, [pc, #120]	; (800087c <HAL_GPIO_Init+0x248>)
 8000802:	4293      	cmp	r3, r2
 8000804:	d02b      	beq.n	800085e <HAL_GPIO_Init+0x22a>
 8000806:	687b      	ldr	r3, [r7, #4]
 8000808:	4a1d      	ldr	r2, [pc, #116]	; (8000880 <HAL_GPIO_Init+0x24c>)
 800080a:	4293      	cmp	r3, r2
 800080c:	d025      	beq.n	800085a <HAL_GPIO_Init+0x226>
 800080e:	687b      	ldr	r3, [r7, #4]
 8000810:	4a1c      	ldr	r2, [pc, #112]	; (8000884 <HAL_GPIO_Init+0x250>)
 8000812:	4293      	cmp	r3, r2
 8000814:	d01f      	beq.n	8000856 <HAL_GPIO_Init+0x222>
 8000816:	687b      	ldr	r3, [r7, #4]
 8000818:	4a1b      	ldr	r2, [pc, #108]	; (8000888 <HAL_GPIO_Init+0x254>)
 800081a:	4293      	cmp	r3, r2
 800081c:	d019      	beq.n	8000852 <HAL_GPIO_Init+0x21e>
 800081e:	687b      	ldr	r3, [r7, #4]
 8000820:	4a1a      	ldr	r2, [pc, #104]	; (800088c <HAL_GPIO_Init+0x258>)
 8000822:	4293      	cmp	r3, r2
 8000824:	d013      	beq.n	800084e <HAL_GPIO_Init+0x21a>
 8000826:	687b      	ldr	r3, [r7, #4]
 8000828:	4a19      	ldr	r2, [pc, #100]	; (8000890 <HAL_GPIO_Init+0x25c>)
 800082a:	4293      	cmp	r3, r2
 800082c:	d00d      	beq.n	800084a <HAL_GPIO_Init+0x216>
 800082e:	687b      	ldr	r3, [r7, #4]
 8000830:	4a18      	ldr	r2, [pc, #96]	; (8000894 <HAL_GPIO_Init+0x260>)
 8000832:	4293      	cmp	r3, r2
 8000834:	d007      	beq.n	8000846 <HAL_GPIO_Init+0x212>
 8000836:	687b      	ldr	r3, [r7, #4]
 8000838:	4a17      	ldr	r2, [pc, #92]	; (8000898 <HAL_GPIO_Init+0x264>)
 800083a:	4293      	cmp	r3, r2
 800083c:	d101      	bne.n	8000842 <HAL_GPIO_Init+0x20e>
 800083e:	2309      	movs	r3, #9
 8000840:	e02d      	b.n	800089e <HAL_GPIO_Init+0x26a>
 8000842:	230a      	movs	r3, #10
 8000844:	e02b      	b.n	800089e <HAL_GPIO_Init+0x26a>
 8000846:	2308      	movs	r3, #8
 8000848:	e029      	b.n	800089e <HAL_GPIO_Init+0x26a>
 800084a:	2307      	movs	r3, #7
 800084c:	e027      	b.n	800089e <HAL_GPIO_Init+0x26a>
 800084e:	2306      	movs	r3, #6
 8000850:	e025      	b.n	800089e <HAL_GPIO_Init+0x26a>
 8000852:	2305      	movs	r3, #5
 8000854:	e023      	b.n	800089e <HAL_GPIO_Init+0x26a>
 8000856:	2304      	movs	r3, #4
 8000858:	e021      	b.n	800089e <HAL_GPIO_Init+0x26a>
 800085a:	2303      	movs	r3, #3
 800085c:	e01f      	b.n	800089e <HAL_GPIO_Init+0x26a>
 800085e:	2302      	movs	r3, #2
 8000860:	e01d      	b.n	800089e <HAL_GPIO_Init+0x26a>
 8000862:	2301      	movs	r3, #1
 8000864:	e01b      	b.n	800089e <HAL_GPIO_Init+0x26a>
 8000866:	bf00      	nop
 8000868:	58000080 	.word	0x58000080
 800086c:	58024400 	.word	0x58024400
 8000870:	58000400 	.word	0x58000400
 8000874:	58020000 	.word	0x58020000
 8000878:	58020400 	.word	0x58020400
 800087c:	58020800 	.word	0x58020800
 8000880:	58020c00 	.word	0x58020c00
 8000884:	58021000 	.word	0x58021000
 8000888:	58021400 	.word	0x58021400
 800088c:	58021800 	.word	0x58021800
 8000890:	58021c00 	.word	0x58021c00
 8000894:	58022000 	.word	0x58022000
 8000898:	58022400 	.word	0x58022400
 800089c:	2300      	movs	r3, #0
 800089e:	69fa      	ldr	r2, [r7, #28]
 80008a0:	f002 0203 	and.w	r2, r2, #3
 80008a4:	0092      	lsls	r2, r2, #2
 80008a6:	4093      	lsls	r3, r2
 80008a8:	69ba      	ldr	r2, [r7, #24]
 80008aa:	4313      	orrs	r3, r2
 80008ac:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80008ae:	4938      	ldr	r1, [pc, #224]	; (8000990 <HAL_GPIO_Init+0x35c>)
 80008b0:	69fb      	ldr	r3, [r7, #28]
 80008b2:	089b      	lsrs	r3, r3, #2
 80008b4:	3302      	adds	r3, #2
 80008b6:	69ba      	ldr	r2, [r7, #24]
 80008b8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 80008bc:	697b      	ldr	r3, [r7, #20]
 80008be:	681b      	ldr	r3, [r3, #0]
 80008c0:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80008c2:	693b      	ldr	r3, [r7, #16]
 80008c4:	43db      	mvns	r3, r3
 80008c6:	69ba      	ldr	r2, [r7, #24]
 80008c8:	4013      	ands	r3, r2
 80008ca:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80008cc:	683b      	ldr	r3, [r7, #0]
 80008ce:	685b      	ldr	r3, [r3, #4]
 80008d0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80008d4:	2b00      	cmp	r3, #0
 80008d6:	d003      	beq.n	80008e0 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80008d8:	69ba      	ldr	r2, [r7, #24]
 80008da:	693b      	ldr	r3, [r7, #16]
 80008dc:	4313      	orrs	r3, r2
 80008de:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 80008e0:	697b      	ldr	r3, [r7, #20]
 80008e2:	69ba      	ldr	r2, [r7, #24]
 80008e4:	601a      	str	r2, [r3, #0]

        temp = EXTI_CurrentCPU->EMR1;
 80008e6:	697b      	ldr	r3, [r7, #20]
 80008e8:	685b      	ldr	r3, [r3, #4]
 80008ea:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80008ec:	693b      	ldr	r3, [r7, #16]
 80008ee:	43db      	mvns	r3, r3
 80008f0:	69ba      	ldr	r2, [r7, #24]
 80008f2:	4013      	ands	r3, r2
 80008f4:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80008f6:	683b      	ldr	r3, [r7, #0]
 80008f8:	685b      	ldr	r3, [r3, #4]
 80008fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80008fe:	2b00      	cmp	r3, #0
 8000900:	d003      	beq.n	800090a <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8000902:	69ba      	ldr	r2, [r7, #24]
 8000904:	693b      	ldr	r3, [r7, #16]
 8000906:	4313      	orrs	r3, r2
 8000908:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 800090a:	697b      	ldr	r3, [r7, #20]
 800090c:	69ba      	ldr	r2, [r7, #24]
 800090e:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8000910:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000914:	681b      	ldr	r3, [r3, #0]
 8000916:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8000918:	693b      	ldr	r3, [r7, #16]
 800091a:	43db      	mvns	r3, r3
 800091c:	69ba      	ldr	r2, [r7, #24]
 800091e:	4013      	ands	r3, r2
 8000920:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000922:	683b      	ldr	r3, [r7, #0]
 8000924:	685b      	ldr	r3, [r3, #4]
 8000926:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800092a:	2b00      	cmp	r3, #0
 800092c:	d003      	beq.n	8000936 <HAL_GPIO_Init+0x302>
        {
          temp |= iocurrent;
 800092e:	69ba      	ldr	r2, [r7, #24]
 8000930:	693b      	ldr	r3, [r7, #16]
 8000932:	4313      	orrs	r3, r2
 8000934:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8000936:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800093a:	69bb      	ldr	r3, [r7, #24]
 800093c:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 800093e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000942:	685b      	ldr	r3, [r3, #4]
 8000944:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8000946:	693b      	ldr	r3, [r7, #16]
 8000948:	43db      	mvns	r3, r3
 800094a:	69ba      	ldr	r2, [r7, #24]
 800094c:	4013      	ands	r3, r2
 800094e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000950:	683b      	ldr	r3, [r7, #0]
 8000952:	685b      	ldr	r3, [r3, #4]
 8000954:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000958:	2b00      	cmp	r3, #0
 800095a:	d003      	beq.n	8000964 <HAL_GPIO_Init+0x330>
        {
          temp |= iocurrent;
 800095c:	69ba      	ldr	r2, [r7, #24]
 800095e:	693b      	ldr	r3, [r7, #16]
 8000960:	4313      	orrs	r3, r2
 8000962:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8000964:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000968:	69bb      	ldr	r3, [r7, #24]
 800096a:	6053      	str	r3, [r2, #4]
      }
    }

    position++;
 800096c:	69fb      	ldr	r3, [r7, #28]
 800096e:	3301      	adds	r3, #1
 8000970:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8000972:	683b      	ldr	r3, [r7, #0]
 8000974:	681a      	ldr	r2, [r3, #0]
 8000976:	69fb      	ldr	r3, [r7, #28]
 8000978:	fa22 f303 	lsr.w	r3, r2, r3
 800097c:	2b00      	cmp	r3, #0
 800097e:	f47f ae63 	bne.w	8000648 <HAL_GPIO_Init+0x14>
  }
}
 8000982:	bf00      	nop
 8000984:	3724      	adds	r7, #36	; 0x24
 8000986:	46bd      	mov	sp, r7
 8000988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800098c:	4770      	bx	lr
 800098e:	bf00      	nop
 8000990:	58000400 	.word	0x58000400

08000994 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000994:	b480      	push	{r7}
 8000996:	b083      	sub	sp, #12
 8000998:	af00      	add	r7, sp, #0
 800099a:	6078      	str	r0, [r7, #4]
 800099c:	460b      	mov	r3, r1
 800099e:	807b      	strh	r3, [r7, #2]
 80009a0:	4613      	mov	r3, r2
 80009a2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80009a4:	787b      	ldrb	r3, [r7, #1]
 80009a6:	2b00      	cmp	r3, #0
 80009a8:	d003      	beq.n	80009b2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80009aa:	887a      	ldrh	r2, [r7, #2]
 80009ac:	687b      	ldr	r3, [r7, #4]
 80009ae:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 80009b0:	e003      	b.n	80009ba <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 80009b2:	887b      	ldrh	r3, [r7, #2]
 80009b4:	041a      	lsls	r2, r3, #16
 80009b6:	687b      	ldr	r3, [r7, #4]
 80009b8:	619a      	str	r2, [r3, #24]
}
 80009ba:	bf00      	nop
 80009bc:	370c      	adds	r7, #12
 80009be:	46bd      	mov	sp, r7
 80009c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009c4:	4770      	bx	lr

080009c6 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80009c6:	b580      	push	{r7, lr}
 80009c8:	b082      	sub	sp, #8
 80009ca:	af00      	add	r7, sp, #0
 80009cc:	4603      	mov	r3, r0
 80009ce:	80fb      	strh	r3, [r7, #6]
    __HAL_GPIO_EXTID2_CLEAR_IT(GPIO_Pin);
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
  }
#else
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00U)
 80009d0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80009d4:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 80009d8:	88fb      	ldrh	r3, [r7, #6]
 80009da:	4013      	ands	r3, r2
 80009dc:	2b00      	cmp	r3, #0
 80009de:	d008      	beq.n	80009f2 <HAL_GPIO_EXTI_IRQHandler+0x2c>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80009e0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80009e4:	88fb      	ldrh	r3, [r7, #6]
 80009e6:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80009ea:	88fb      	ldrh	r3, [r7, #6]
 80009ec:	4618      	mov	r0, r3
 80009ee:	f000 f804 	bl	80009fa <HAL_GPIO_EXTI_Callback>
  }
#endif
}
 80009f2:	bf00      	nop
 80009f4:	3708      	adds	r7, #8
 80009f6:	46bd      	mov	sp, r7
 80009f8:	bd80      	pop	{r7, pc}

080009fa <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80009fa:	b480      	push	{r7}
 80009fc:	b083      	sub	sp, #12
 80009fe:	af00      	add	r7, sp, #0
 8000a00:	4603      	mov	r3, r0
 8000a02:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8000a04:	bf00      	nop
 8000a06:	370c      	adds	r7, #12
 8000a08:	46bd      	mov	sp, r7
 8000a0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a0e:	4770      	bx	lr

08000a10 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8000a10:	b580      	push	{r7, lr}
 8000a12:	b084      	sub	sp, #16
 8000a14:	af00      	add	r7, sp, #0
 8000a16:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8000a18:	4b19      	ldr	r3, [pc, #100]	; (8000a80 <HAL_PWREx_ConfigSupply+0x70>)
 8000a1a:	68db      	ldr	r3, [r3, #12]
 8000a1c:	f003 0304 	and.w	r3, r3, #4
 8000a20:	2b04      	cmp	r3, #4
 8000a22:	d00a      	beq.n	8000a3a <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8000a24:	4b16      	ldr	r3, [pc, #88]	; (8000a80 <HAL_PWREx_ConfigSupply+0x70>)
 8000a26:	68db      	ldr	r3, [r3, #12]
 8000a28:	f003 0307 	and.w	r3, r3, #7
 8000a2c:	687a      	ldr	r2, [r7, #4]
 8000a2e:	429a      	cmp	r2, r3
 8000a30:	d001      	beq.n	8000a36 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8000a32:	2301      	movs	r3, #1
 8000a34:	e01f      	b.n	8000a76 <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8000a36:	2300      	movs	r3, #0
 8000a38:	e01d      	b.n	8000a76 <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8000a3a:	4b11      	ldr	r3, [pc, #68]	; (8000a80 <HAL_PWREx_ConfigSupply+0x70>)
 8000a3c:	68db      	ldr	r3, [r3, #12]
 8000a3e:	f023 0207 	bic.w	r2, r3, #7
 8000a42:	490f      	ldr	r1, [pc, #60]	; (8000a80 <HAL_PWREx_ConfigSupply+0x70>)
 8000a44:	687b      	ldr	r3, [r7, #4]
 8000a46:	4313      	orrs	r3, r2
 8000a48:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8000a4a:	f7ff fccb 	bl	80003e4 <HAL_GetTick>
 8000a4e:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8000a50:	e009      	b.n	8000a66 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8000a52:	f7ff fcc7 	bl	80003e4 <HAL_GetTick>
 8000a56:	4602      	mov	r2, r0
 8000a58:	68fb      	ldr	r3, [r7, #12]
 8000a5a:	1ad3      	subs	r3, r2, r3
 8000a5c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8000a60:	d901      	bls.n	8000a66 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8000a62:	2301      	movs	r3, #1
 8000a64:	e007      	b.n	8000a76 <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8000a66:	4b06      	ldr	r3, [pc, #24]	; (8000a80 <HAL_PWREx_ConfigSupply+0x70>)
 8000a68:	685b      	ldr	r3, [r3, #4]
 8000a6a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000a6e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000a72:	d1ee      	bne.n	8000a52 <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8000a74:	2300      	movs	r3, #0
}
 8000a76:	4618      	mov	r0, r3
 8000a78:	3710      	adds	r7, #16
 8000a7a:	46bd      	mov	sp, r7
 8000a7c:	bd80      	pop	{r7, pc}
 8000a7e:	bf00      	nop
 8000a80:	58024800 	.word	0x58024800

08000a84 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000a84:	b580      	push	{r7, lr}
 8000a86:	b08c      	sub	sp, #48	; 0x30
 8000a88:	af00      	add	r7, sp, #0
 8000a8a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000a8c:	687b      	ldr	r3, [r7, #4]
 8000a8e:	2b00      	cmp	r3, #0
 8000a90:	d101      	bne.n	8000a96 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000a92:	2301      	movs	r3, #1
 8000a94:	e3c4      	b.n	8001220 <HAL_RCC_OscConfig+0x79c>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000a96:	687b      	ldr	r3, [r7, #4]
 8000a98:	681b      	ldr	r3, [r3, #0]
 8000a9a:	f003 0301 	and.w	r3, r3, #1
 8000a9e:	2b00      	cmp	r3, #0
 8000aa0:	f000 8087 	beq.w	8000bb2 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8000aa4:	4ba2      	ldr	r3, [pc, #648]	; (8000d30 <HAL_RCC_OscConfig+0x2ac>)
 8000aa6:	691b      	ldr	r3, [r3, #16]
 8000aa8:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8000aac:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8000aae:	4ba0      	ldr	r3, [pc, #640]	; (8000d30 <HAL_RCC_OscConfig+0x2ac>)
 8000ab0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000ab2:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8000ab4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000ab6:	2b10      	cmp	r3, #16
 8000ab8:	d007      	beq.n	8000aca <HAL_RCC_OscConfig+0x46>
 8000aba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000abc:	2b18      	cmp	r3, #24
 8000abe:	d110      	bne.n	8000ae2 <HAL_RCC_OscConfig+0x5e>
 8000ac0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000ac2:	f003 0303 	and.w	r3, r3, #3
 8000ac6:	2b02      	cmp	r3, #2
 8000ac8:	d10b      	bne.n	8000ae2 <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000aca:	4b99      	ldr	r3, [pc, #612]	; (8000d30 <HAL_RCC_OscConfig+0x2ac>)
 8000acc:	681b      	ldr	r3, [r3, #0]
 8000ace:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000ad2:	2b00      	cmp	r3, #0
 8000ad4:	d06c      	beq.n	8000bb0 <HAL_RCC_OscConfig+0x12c>
 8000ad6:	687b      	ldr	r3, [r7, #4]
 8000ad8:	685b      	ldr	r3, [r3, #4]
 8000ada:	2b00      	cmp	r3, #0
 8000adc:	d168      	bne.n	8000bb0 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8000ade:	2301      	movs	r3, #1
 8000ae0:	e39e      	b.n	8001220 <HAL_RCC_OscConfig+0x79c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000ae2:	687b      	ldr	r3, [r7, #4]
 8000ae4:	685b      	ldr	r3, [r3, #4]
 8000ae6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000aea:	d106      	bne.n	8000afa <HAL_RCC_OscConfig+0x76>
 8000aec:	4b90      	ldr	r3, [pc, #576]	; (8000d30 <HAL_RCC_OscConfig+0x2ac>)
 8000aee:	681b      	ldr	r3, [r3, #0]
 8000af0:	4a8f      	ldr	r2, [pc, #572]	; (8000d30 <HAL_RCC_OscConfig+0x2ac>)
 8000af2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000af6:	6013      	str	r3, [r2, #0]
 8000af8:	e02e      	b.n	8000b58 <HAL_RCC_OscConfig+0xd4>
 8000afa:	687b      	ldr	r3, [r7, #4]
 8000afc:	685b      	ldr	r3, [r3, #4]
 8000afe:	2b00      	cmp	r3, #0
 8000b00:	d10c      	bne.n	8000b1c <HAL_RCC_OscConfig+0x98>
 8000b02:	4b8b      	ldr	r3, [pc, #556]	; (8000d30 <HAL_RCC_OscConfig+0x2ac>)
 8000b04:	681b      	ldr	r3, [r3, #0]
 8000b06:	4a8a      	ldr	r2, [pc, #552]	; (8000d30 <HAL_RCC_OscConfig+0x2ac>)
 8000b08:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000b0c:	6013      	str	r3, [r2, #0]
 8000b0e:	4b88      	ldr	r3, [pc, #544]	; (8000d30 <HAL_RCC_OscConfig+0x2ac>)
 8000b10:	681b      	ldr	r3, [r3, #0]
 8000b12:	4a87      	ldr	r2, [pc, #540]	; (8000d30 <HAL_RCC_OscConfig+0x2ac>)
 8000b14:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000b18:	6013      	str	r3, [r2, #0]
 8000b1a:	e01d      	b.n	8000b58 <HAL_RCC_OscConfig+0xd4>
 8000b1c:	687b      	ldr	r3, [r7, #4]
 8000b1e:	685b      	ldr	r3, [r3, #4]
 8000b20:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000b24:	d10c      	bne.n	8000b40 <HAL_RCC_OscConfig+0xbc>
 8000b26:	4b82      	ldr	r3, [pc, #520]	; (8000d30 <HAL_RCC_OscConfig+0x2ac>)
 8000b28:	681b      	ldr	r3, [r3, #0]
 8000b2a:	4a81      	ldr	r2, [pc, #516]	; (8000d30 <HAL_RCC_OscConfig+0x2ac>)
 8000b2c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000b30:	6013      	str	r3, [r2, #0]
 8000b32:	4b7f      	ldr	r3, [pc, #508]	; (8000d30 <HAL_RCC_OscConfig+0x2ac>)
 8000b34:	681b      	ldr	r3, [r3, #0]
 8000b36:	4a7e      	ldr	r2, [pc, #504]	; (8000d30 <HAL_RCC_OscConfig+0x2ac>)
 8000b38:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000b3c:	6013      	str	r3, [r2, #0]
 8000b3e:	e00b      	b.n	8000b58 <HAL_RCC_OscConfig+0xd4>
 8000b40:	4b7b      	ldr	r3, [pc, #492]	; (8000d30 <HAL_RCC_OscConfig+0x2ac>)
 8000b42:	681b      	ldr	r3, [r3, #0]
 8000b44:	4a7a      	ldr	r2, [pc, #488]	; (8000d30 <HAL_RCC_OscConfig+0x2ac>)
 8000b46:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000b4a:	6013      	str	r3, [r2, #0]
 8000b4c:	4b78      	ldr	r3, [pc, #480]	; (8000d30 <HAL_RCC_OscConfig+0x2ac>)
 8000b4e:	681b      	ldr	r3, [r3, #0]
 8000b50:	4a77      	ldr	r2, [pc, #476]	; (8000d30 <HAL_RCC_OscConfig+0x2ac>)
 8000b52:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000b56:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000b58:	687b      	ldr	r3, [r7, #4]
 8000b5a:	685b      	ldr	r3, [r3, #4]
 8000b5c:	2b00      	cmp	r3, #0
 8000b5e:	d013      	beq.n	8000b88 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000b60:	f7ff fc40 	bl	80003e4 <HAL_GetTick>
 8000b64:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8000b66:	e008      	b.n	8000b7a <HAL_RCC_OscConfig+0xf6>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000b68:	f7ff fc3c 	bl	80003e4 <HAL_GetTick>
 8000b6c:	4602      	mov	r2, r0
 8000b6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b70:	1ad3      	subs	r3, r2, r3
 8000b72:	2b64      	cmp	r3, #100	; 0x64
 8000b74:	d901      	bls.n	8000b7a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8000b76:	2303      	movs	r3, #3
 8000b78:	e352      	b.n	8001220 <HAL_RCC_OscConfig+0x79c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8000b7a:	4b6d      	ldr	r3, [pc, #436]	; (8000d30 <HAL_RCC_OscConfig+0x2ac>)
 8000b7c:	681b      	ldr	r3, [r3, #0]
 8000b7e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000b82:	2b00      	cmp	r3, #0
 8000b84:	d0f0      	beq.n	8000b68 <HAL_RCC_OscConfig+0xe4>
 8000b86:	e014      	b.n	8000bb2 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000b88:	f7ff fc2c 	bl	80003e4 <HAL_GetTick>
 8000b8c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8000b8e:	e008      	b.n	8000ba2 <HAL_RCC_OscConfig+0x11e>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000b90:	f7ff fc28 	bl	80003e4 <HAL_GetTick>
 8000b94:	4602      	mov	r2, r0
 8000b96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b98:	1ad3      	subs	r3, r2, r3
 8000b9a:	2b64      	cmp	r3, #100	; 0x64
 8000b9c:	d901      	bls.n	8000ba2 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8000b9e:	2303      	movs	r3, #3
 8000ba0:	e33e      	b.n	8001220 <HAL_RCC_OscConfig+0x79c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8000ba2:	4b63      	ldr	r3, [pc, #396]	; (8000d30 <HAL_RCC_OscConfig+0x2ac>)
 8000ba4:	681b      	ldr	r3, [r3, #0]
 8000ba6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000baa:	2b00      	cmp	r3, #0
 8000bac:	d1f0      	bne.n	8000b90 <HAL_RCC_OscConfig+0x10c>
 8000bae:	e000      	b.n	8000bb2 <HAL_RCC_OscConfig+0x12e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000bb0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000bb2:	687b      	ldr	r3, [r7, #4]
 8000bb4:	681b      	ldr	r3, [r3, #0]
 8000bb6:	f003 0302 	and.w	r3, r3, #2
 8000bba:	2b00      	cmp	r3, #0
 8000bbc:	f000 8092 	beq.w	8000ce4 <HAL_RCC_OscConfig+0x260>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8000bc0:	4b5b      	ldr	r3, [pc, #364]	; (8000d30 <HAL_RCC_OscConfig+0x2ac>)
 8000bc2:	691b      	ldr	r3, [r3, #16]
 8000bc4:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8000bc8:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8000bca:	4b59      	ldr	r3, [pc, #356]	; (8000d30 <HAL_RCC_OscConfig+0x2ac>)
 8000bcc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000bce:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8000bd0:	6a3b      	ldr	r3, [r7, #32]
 8000bd2:	2b00      	cmp	r3, #0
 8000bd4:	d007      	beq.n	8000be6 <HAL_RCC_OscConfig+0x162>
 8000bd6:	6a3b      	ldr	r3, [r7, #32]
 8000bd8:	2b18      	cmp	r3, #24
 8000bda:	d12d      	bne.n	8000c38 <HAL_RCC_OscConfig+0x1b4>
 8000bdc:	69fb      	ldr	r3, [r7, #28]
 8000bde:	f003 0303 	and.w	r3, r3, #3
 8000be2:	2b00      	cmp	r3, #0
 8000be4:	d128      	bne.n	8000c38 <HAL_RCC_OscConfig+0x1b4>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8000be6:	4b52      	ldr	r3, [pc, #328]	; (8000d30 <HAL_RCC_OscConfig+0x2ac>)
 8000be8:	681b      	ldr	r3, [r3, #0]
 8000bea:	f003 0304 	and.w	r3, r3, #4
 8000bee:	2b00      	cmp	r3, #0
 8000bf0:	d005      	beq.n	8000bfe <HAL_RCC_OscConfig+0x17a>
 8000bf2:	687b      	ldr	r3, [r7, #4]
 8000bf4:	68db      	ldr	r3, [r3, #12]
 8000bf6:	2b00      	cmp	r3, #0
 8000bf8:	d101      	bne.n	8000bfe <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8000bfa:	2301      	movs	r3, #1
 8000bfc:	e310      	b.n	8001220 <HAL_RCC_OscConfig+0x79c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000bfe:	f7ff fbfd 	bl	80003fc <HAL_GetREVID>
 8000c02:	4602      	mov	r2, r0
 8000c04:	f241 0303 	movw	r3, #4099	; 0x1003
 8000c08:	429a      	cmp	r2, r3
 8000c0a:	d80a      	bhi.n	8000c22 <HAL_RCC_OscConfig+0x19e>
 8000c0c:	4b48      	ldr	r3, [pc, #288]	; (8000d30 <HAL_RCC_OscConfig+0x2ac>)
 8000c0e:	685b      	ldr	r3, [r3, #4]
 8000c10:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8000c14:	687b      	ldr	r3, [r7, #4]
 8000c16:	691b      	ldr	r3, [r3, #16]
 8000c18:	031b      	lsls	r3, r3, #12
 8000c1a:	4945      	ldr	r1, [pc, #276]	; (8000d30 <HAL_RCC_OscConfig+0x2ac>)
 8000c1c:	4313      	orrs	r3, r2
 8000c1e:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8000c20:	e060      	b.n	8000ce4 <HAL_RCC_OscConfig+0x260>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000c22:	4b43      	ldr	r3, [pc, #268]	; (8000d30 <HAL_RCC_OscConfig+0x2ac>)
 8000c24:	685b      	ldr	r3, [r3, #4]
 8000c26:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8000c2a:	687b      	ldr	r3, [r7, #4]
 8000c2c:	691b      	ldr	r3, [r3, #16]
 8000c2e:	061b      	lsls	r3, r3, #24
 8000c30:	493f      	ldr	r1, [pc, #252]	; (8000d30 <HAL_RCC_OscConfig+0x2ac>)
 8000c32:	4313      	orrs	r3, r2
 8000c34:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8000c36:	e055      	b.n	8000ce4 <HAL_RCC_OscConfig+0x260>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8000c38:	687b      	ldr	r3, [r7, #4]
 8000c3a:	68db      	ldr	r3, [r3, #12]
 8000c3c:	2b00      	cmp	r3, #0
 8000c3e:	d038      	beq.n	8000cb2 <HAL_RCC_OscConfig+0x22e>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8000c40:	4b3b      	ldr	r3, [pc, #236]	; (8000d30 <HAL_RCC_OscConfig+0x2ac>)
 8000c42:	681b      	ldr	r3, [r3, #0]
 8000c44:	f023 0219 	bic.w	r2, r3, #25
 8000c48:	687b      	ldr	r3, [r7, #4]
 8000c4a:	68db      	ldr	r3, [r3, #12]
 8000c4c:	4938      	ldr	r1, [pc, #224]	; (8000d30 <HAL_RCC_OscConfig+0x2ac>)
 8000c4e:	4313      	orrs	r3, r2
 8000c50:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000c52:	f7ff fbc7 	bl	80003e4 <HAL_GetTick>
 8000c56:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8000c58:	e008      	b.n	8000c6c <HAL_RCC_OscConfig+0x1e8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000c5a:	f7ff fbc3 	bl	80003e4 <HAL_GetTick>
 8000c5e:	4602      	mov	r2, r0
 8000c60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c62:	1ad3      	subs	r3, r2, r3
 8000c64:	2b02      	cmp	r3, #2
 8000c66:	d901      	bls.n	8000c6c <HAL_RCC_OscConfig+0x1e8>
          {
            return HAL_TIMEOUT;
 8000c68:	2303      	movs	r3, #3
 8000c6a:	e2d9      	b.n	8001220 <HAL_RCC_OscConfig+0x79c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8000c6c:	4b30      	ldr	r3, [pc, #192]	; (8000d30 <HAL_RCC_OscConfig+0x2ac>)
 8000c6e:	681b      	ldr	r3, [r3, #0]
 8000c70:	f003 0304 	and.w	r3, r3, #4
 8000c74:	2b00      	cmp	r3, #0
 8000c76:	d0f0      	beq.n	8000c5a <HAL_RCC_OscConfig+0x1d6>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000c78:	f7ff fbc0 	bl	80003fc <HAL_GetREVID>
 8000c7c:	4602      	mov	r2, r0
 8000c7e:	f241 0303 	movw	r3, #4099	; 0x1003
 8000c82:	429a      	cmp	r2, r3
 8000c84:	d80a      	bhi.n	8000c9c <HAL_RCC_OscConfig+0x218>
 8000c86:	4b2a      	ldr	r3, [pc, #168]	; (8000d30 <HAL_RCC_OscConfig+0x2ac>)
 8000c88:	685b      	ldr	r3, [r3, #4]
 8000c8a:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8000c8e:	687b      	ldr	r3, [r7, #4]
 8000c90:	691b      	ldr	r3, [r3, #16]
 8000c92:	031b      	lsls	r3, r3, #12
 8000c94:	4926      	ldr	r1, [pc, #152]	; (8000d30 <HAL_RCC_OscConfig+0x2ac>)
 8000c96:	4313      	orrs	r3, r2
 8000c98:	604b      	str	r3, [r1, #4]
 8000c9a:	e023      	b.n	8000ce4 <HAL_RCC_OscConfig+0x260>
 8000c9c:	4b24      	ldr	r3, [pc, #144]	; (8000d30 <HAL_RCC_OscConfig+0x2ac>)
 8000c9e:	685b      	ldr	r3, [r3, #4]
 8000ca0:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8000ca4:	687b      	ldr	r3, [r7, #4]
 8000ca6:	691b      	ldr	r3, [r3, #16]
 8000ca8:	061b      	lsls	r3, r3, #24
 8000caa:	4921      	ldr	r1, [pc, #132]	; (8000d30 <HAL_RCC_OscConfig+0x2ac>)
 8000cac:	4313      	orrs	r3, r2
 8000cae:	604b      	str	r3, [r1, #4]
 8000cb0:	e018      	b.n	8000ce4 <HAL_RCC_OscConfig+0x260>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8000cb2:	4b1f      	ldr	r3, [pc, #124]	; (8000d30 <HAL_RCC_OscConfig+0x2ac>)
 8000cb4:	681b      	ldr	r3, [r3, #0]
 8000cb6:	4a1e      	ldr	r2, [pc, #120]	; (8000d30 <HAL_RCC_OscConfig+0x2ac>)
 8000cb8:	f023 0301 	bic.w	r3, r3, #1
 8000cbc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000cbe:	f7ff fb91 	bl	80003e4 <HAL_GetTick>
 8000cc2:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8000cc4:	e008      	b.n	8000cd8 <HAL_RCC_OscConfig+0x254>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000cc6:	f7ff fb8d 	bl	80003e4 <HAL_GetTick>
 8000cca:	4602      	mov	r2, r0
 8000ccc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000cce:	1ad3      	subs	r3, r2, r3
 8000cd0:	2b02      	cmp	r3, #2
 8000cd2:	d901      	bls.n	8000cd8 <HAL_RCC_OscConfig+0x254>
          {
            return HAL_TIMEOUT;
 8000cd4:	2303      	movs	r3, #3
 8000cd6:	e2a3      	b.n	8001220 <HAL_RCC_OscConfig+0x79c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8000cd8:	4b15      	ldr	r3, [pc, #84]	; (8000d30 <HAL_RCC_OscConfig+0x2ac>)
 8000cda:	681b      	ldr	r3, [r3, #0]
 8000cdc:	f003 0304 	and.w	r3, r3, #4
 8000ce0:	2b00      	cmp	r3, #0
 8000ce2:	d1f0      	bne.n	8000cc6 <HAL_RCC_OscConfig+0x242>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8000ce4:	687b      	ldr	r3, [r7, #4]
 8000ce6:	681b      	ldr	r3, [r3, #0]
 8000ce8:	f003 0310 	and.w	r3, r3, #16
 8000cec:	2b00      	cmp	r3, #0
 8000cee:	f000 8091 	beq.w	8000e14 <HAL_RCC_OscConfig+0x390>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8000cf2:	4b0f      	ldr	r3, [pc, #60]	; (8000d30 <HAL_RCC_OscConfig+0x2ac>)
 8000cf4:	691b      	ldr	r3, [r3, #16]
 8000cf6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8000cfa:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8000cfc:	4b0c      	ldr	r3, [pc, #48]	; (8000d30 <HAL_RCC_OscConfig+0x2ac>)
 8000cfe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000d00:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8000d02:	69bb      	ldr	r3, [r7, #24]
 8000d04:	2b08      	cmp	r3, #8
 8000d06:	d007      	beq.n	8000d18 <HAL_RCC_OscConfig+0x294>
 8000d08:	69bb      	ldr	r3, [r7, #24]
 8000d0a:	2b18      	cmp	r3, #24
 8000d0c:	d12f      	bne.n	8000d6e <HAL_RCC_OscConfig+0x2ea>
 8000d0e:	697b      	ldr	r3, [r7, #20]
 8000d10:	f003 0303 	and.w	r3, r3, #3
 8000d14:	2b01      	cmp	r3, #1
 8000d16:	d12a      	bne.n	8000d6e <HAL_RCC_OscConfig+0x2ea>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8000d18:	4b05      	ldr	r3, [pc, #20]	; (8000d30 <HAL_RCC_OscConfig+0x2ac>)
 8000d1a:	681b      	ldr	r3, [r3, #0]
 8000d1c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000d20:	2b00      	cmp	r3, #0
 8000d22:	d007      	beq.n	8000d34 <HAL_RCC_OscConfig+0x2b0>
 8000d24:	687b      	ldr	r3, [r7, #4]
 8000d26:	69db      	ldr	r3, [r3, #28]
 8000d28:	2b80      	cmp	r3, #128	; 0x80
 8000d2a:	d003      	beq.n	8000d34 <HAL_RCC_OscConfig+0x2b0>
      {
        return HAL_ERROR;
 8000d2c:	2301      	movs	r3, #1
 8000d2e:	e277      	b.n	8001220 <HAL_RCC_OscConfig+0x79c>
 8000d30:	58024400 	.word	0x58024400
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8000d34:	f7ff fb62 	bl	80003fc <HAL_GetREVID>
 8000d38:	4602      	mov	r2, r0
 8000d3a:	f241 0303 	movw	r3, #4099	; 0x1003
 8000d3e:	429a      	cmp	r2, r3
 8000d40:	d80a      	bhi.n	8000d58 <HAL_RCC_OscConfig+0x2d4>
 8000d42:	4ba2      	ldr	r3, [pc, #648]	; (8000fcc <HAL_RCC_OscConfig+0x548>)
 8000d44:	685b      	ldr	r3, [r3, #4]
 8000d46:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8000d4a:	687b      	ldr	r3, [r7, #4]
 8000d4c:	6a1b      	ldr	r3, [r3, #32]
 8000d4e:	069b      	lsls	r3, r3, #26
 8000d50:	499e      	ldr	r1, [pc, #632]	; (8000fcc <HAL_RCC_OscConfig+0x548>)
 8000d52:	4313      	orrs	r3, r2
 8000d54:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8000d56:	e05d      	b.n	8000e14 <HAL_RCC_OscConfig+0x390>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8000d58:	4b9c      	ldr	r3, [pc, #624]	; (8000fcc <HAL_RCC_OscConfig+0x548>)
 8000d5a:	68db      	ldr	r3, [r3, #12]
 8000d5c:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8000d60:	687b      	ldr	r3, [r7, #4]
 8000d62:	6a1b      	ldr	r3, [r3, #32]
 8000d64:	061b      	lsls	r3, r3, #24
 8000d66:	4999      	ldr	r1, [pc, #612]	; (8000fcc <HAL_RCC_OscConfig+0x548>)
 8000d68:	4313      	orrs	r3, r2
 8000d6a:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8000d6c:	e052      	b.n	8000e14 <HAL_RCC_OscConfig+0x390>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 8000d6e:	687b      	ldr	r3, [r7, #4]
 8000d70:	69db      	ldr	r3, [r3, #28]
 8000d72:	2b00      	cmp	r3, #0
 8000d74:	d035      	beq.n	8000de2 <HAL_RCC_OscConfig+0x35e>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8000d76:	4b95      	ldr	r3, [pc, #596]	; (8000fcc <HAL_RCC_OscConfig+0x548>)
 8000d78:	681b      	ldr	r3, [r3, #0]
 8000d7a:	4a94      	ldr	r2, [pc, #592]	; (8000fcc <HAL_RCC_OscConfig+0x548>)
 8000d7c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000d80:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000d82:	f7ff fb2f 	bl	80003e4 <HAL_GetTick>
 8000d86:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8000d88:	e008      	b.n	8000d9c <HAL_RCC_OscConfig+0x318>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8000d8a:	f7ff fb2b 	bl	80003e4 <HAL_GetTick>
 8000d8e:	4602      	mov	r2, r0
 8000d90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d92:	1ad3      	subs	r3, r2, r3
 8000d94:	2b02      	cmp	r3, #2
 8000d96:	d901      	bls.n	8000d9c <HAL_RCC_OscConfig+0x318>
          {
            return HAL_TIMEOUT;
 8000d98:	2303      	movs	r3, #3
 8000d9a:	e241      	b.n	8001220 <HAL_RCC_OscConfig+0x79c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8000d9c:	4b8b      	ldr	r3, [pc, #556]	; (8000fcc <HAL_RCC_OscConfig+0x548>)
 8000d9e:	681b      	ldr	r3, [r3, #0]
 8000da0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000da4:	2b00      	cmp	r3, #0
 8000da6:	d0f0      	beq.n	8000d8a <HAL_RCC_OscConfig+0x306>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8000da8:	f7ff fb28 	bl	80003fc <HAL_GetREVID>
 8000dac:	4602      	mov	r2, r0
 8000dae:	f241 0303 	movw	r3, #4099	; 0x1003
 8000db2:	429a      	cmp	r2, r3
 8000db4:	d80a      	bhi.n	8000dcc <HAL_RCC_OscConfig+0x348>
 8000db6:	4b85      	ldr	r3, [pc, #532]	; (8000fcc <HAL_RCC_OscConfig+0x548>)
 8000db8:	685b      	ldr	r3, [r3, #4]
 8000dba:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8000dbe:	687b      	ldr	r3, [r7, #4]
 8000dc0:	6a1b      	ldr	r3, [r3, #32]
 8000dc2:	069b      	lsls	r3, r3, #26
 8000dc4:	4981      	ldr	r1, [pc, #516]	; (8000fcc <HAL_RCC_OscConfig+0x548>)
 8000dc6:	4313      	orrs	r3, r2
 8000dc8:	604b      	str	r3, [r1, #4]
 8000dca:	e023      	b.n	8000e14 <HAL_RCC_OscConfig+0x390>
 8000dcc:	4b7f      	ldr	r3, [pc, #508]	; (8000fcc <HAL_RCC_OscConfig+0x548>)
 8000dce:	68db      	ldr	r3, [r3, #12]
 8000dd0:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8000dd4:	687b      	ldr	r3, [r7, #4]
 8000dd6:	6a1b      	ldr	r3, [r3, #32]
 8000dd8:	061b      	lsls	r3, r3, #24
 8000dda:	497c      	ldr	r1, [pc, #496]	; (8000fcc <HAL_RCC_OscConfig+0x548>)
 8000ddc:	4313      	orrs	r3, r2
 8000dde:	60cb      	str	r3, [r1, #12]
 8000de0:	e018      	b.n	8000e14 <HAL_RCC_OscConfig+0x390>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8000de2:	4b7a      	ldr	r3, [pc, #488]	; (8000fcc <HAL_RCC_OscConfig+0x548>)
 8000de4:	681b      	ldr	r3, [r3, #0]
 8000de6:	4a79      	ldr	r2, [pc, #484]	; (8000fcc <HAL_RCC_OscConfig+0x548>)
 8000de8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8000dec:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000dee:	f7ff faf9 	bl	80003e4 <HAL_GetTick>
 8000df2:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8000df4:	e008      	b.n	8000e08 <HAL_RCC_OscConfig+0x384>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8000df6:	f7ff faf5 	bl	80003e4 <HAL_GetTick>
 8000dfa:	4602      	mov	r2, r0
 8000dfc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000dfe:	1ad3      	subs	r3, r2, r3
 8000e00:	2b02      	cmp	r3, #2
 8000e02:	d901      	bls.n	8000e08 <HAL_RCC_OscConfig+0x384>
          {
            return HAL_TIMEOUT;
 8000e04:	2303      	movs	r3, #3
 8000e06:	e20b      	b.n	8001220 <HAL_RCC_OscConfig+0x79c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8000e08:	4b70      	ldr	r3, [pc, #448]	; (8000fcc <HAL_RCC_OscConfig+0x548>)
 8000e0a:	681b      	ldr	r3, [r3, #0]
 8000e0c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000e10:	2b00      	cmp	r3, #0
 8000e12:	d1f0      	bne.n	8000df6 <HAL_RCC_OscConfig+0x372>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000e14:	687b      	ldr	r3, [r7, #4]
 8000e16:	681b      	ldr	r3, [r3, #0]
 8000e18:	f003 0308 	and.w	r3, r3, #8
 8000e1c:	2b00      	cmp	r3, #0
 8000e1e:	d036      	beq.n	8000e8e <HAL_RCC_OscConfig+0x40a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8000e20:	687b      	ldr	r3, [r7, #4]
 8000e22:	695b      	ldr	r3, [r3, #20]
 8000e24:	2b00      	cmp	r3, #0
 8000e26:	d019      	beq.n	8000e5c <HAL_RCC_OscConfig+0x3d8>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8000e28:	4b68      	ldr	r3, [pc, #416]	; (8000fcc <HAL_RCC_OscConfig+0x548>)
 8000e2a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8000e2c:	4a67      	ldr	r2, [pc, #412]	; (8000fcc <HAL_RCC_OscConfig+0x548>)
 8000e2e:	f043 0301 	orr.w	r3, r3, #1
 8000e32:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8000e34:	f7ff fad6 	bl	80003e4 <HAL_GetTick>
 8000e38:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8000e3a:	e008      	b.n	8000e4e <HAL_RCC_OscConfig+0x3ca>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000e3c:	f7ff fad2 	bl	80003e4 <HAL_GetTick>
 8000e40:	4602      	mov	r2, r0
 8000e42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e44:	1ad3      	subs	r3, r2, r3
 8000e46:	2b02      	cmp	r3, #2
 8000e48:	d901      	bls.n	8000e4e <HAL_RCC_OscConfig+0x3ca>
        {
          return HAL_TIMEOUT;
 8000e4a:	2303      	movs	r3, #3
 8000e4c:	e1e8      	b.n	8001220 <HAL_RCC_OscConfig+0x79c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8000e4e:	4b5f      	ldr	r3, [pc, #380]	; (8000fcc <HAL_RCC_OscConfig+0x548>)
 8000e50:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8000e52:	f003 0302 	and.w	r3, r3, #2
 8000e56:	2b00      	cmp	r3, #0
 8000e58:	d0f0      	beq.n	8000e3c <HAL_RCC_OscConfig+0x3b8>
 8000e5a:	e018      	b.n	8000e8e <HAL_RCC_OscConfig+0x40a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8000e5c:	4b5b      	ldr	r3, [pc, #364]	; (8000fcc <HAL_RCC_OscConfig+0x548>)
 8000e5e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8000e60:	4a5a      	ldr	r2, [pc, #360]	; (8000fcc <HAL_RCC_OscConfig+0x548>)
 8000e62:	f023 0301 	bic.w	r3, r3, #1
 8000e66:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8000e68:	f7ff fabc 	bl	80003e4 <HAL_GetTick>
 8000e6c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8000e6e:	e008      	b.n	8000e82 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000e70:	f7ff fab8 	bl	80003e4 <HAL_GetTick>
 8000e74:	4602      	mov	r2, r0
 8000e76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e78:	1ad3      	subs	r3, r2, r3
 8000e7a:	2b02      	cmp	r3, #2
 8000e7c:	d901      	bls.n	8000e82 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8000e7e:	2303      	movs	r3, #3
 8000e80:	e1ce      	b.n	8001220 <HAL_RCC_OscConfig+0x79c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8000e82:	4b52      	ldr	r3, [pc, #328]	; (8000fcc <HAL_RCC_OscConfig+0x548>)
 8000e84:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8000e86:	f003 0302 	and.w	r3, r3, #2
 8000e8a:	2b00      	cmp	r3, #0
 8000e8c:	d1f0      	bne.n	8000e70 <HAL_RCC_OscConfig+0x3ec>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8000e8e:	687b      	ldr	r3, [r7, #4]
 8000e90:	681b      	ldr	r3, [r3, #0]
 8000e92:	f003 0320 	and.w	r3, r3, #32
 8000e96:	2b00      	cmp	r3, #0
 8000e98:	d036      	beq.n	8000f08 <HAL_RCC_OscConfig+0x484>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 8000e9a:	687b      	ldr	r3, [r7, #4]
 8000e9c:	699b      	ldr	r3, [r3, #24]
 8000e9e:	2b00      	cmp	r3, #0
 8000ea0:	d019      	beq.n	8000ed6 <HAL_RCC_OscConfig+0x452>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8000ea2:	4b4a      	ldr	r3, [pc, #296]	; (8000fcc <HAL_RCC_OscConfig+0x548>)
 8000ea4:	681b      	ldr	r3, [r3, #0]
 8000ea6:	4a49      	ldr	r2, [pc, #292]	; (8000fcc <HAL_RCC_OscConfig+0x548>)
 8000ea8:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000eac:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8000eae:	f7ff fa99 	bl	80003e4 <HAL_GetTick>
 8000eb2:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8000eb4:	e008      	b.n	8000ec8 <HAL_RCC_OscConfig+0x444>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8000eb6:	f7ff fa95 	bl	80003e4 <HAL_GetTick>
 8000eba:	4602      	mov	r2, r0
 8000ebc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ebe:	1ad3      	subs	r3, r2, r3
 8000ec0:	2b02      	cmp	r3, #2
 8000ec2:	d901      	bls.n	8000ec8 <HAL_RCC_OscConfig+0x444>
        {
          return HAL_TIMEOUT;
 8000ec4:	2303      	movs	r3, #3
 8000ec6:	e1ab      	b.n	8001220 <HAL_RCC_OscConfig+0x79c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8000ec8:	4b40      	ldr	r3, [pc, #256]	; (8000fcc <HAL_RCC_OscConfig+0x548>)
 8000eca:	681b      	ldr	r3, [r3, #0]
 8000ecc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000ed0:	2b00      	cmp	r3, #0
 8000ed2:	d0f0      	beq.n	8000eb6 <HAL_RCC_OscConfig+0x432>
 8000ed4:	e018      	b.n	8000f08 <HAL_RCC_OscConfig+0x484>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8000ed6:	4b3d      	ldr	r3, [pc, #244]	; (8000fcc <HAL_RCC_OscConfig+0x548>)
 8000ed8:	681b      	ldr	r3, [r3, #0]
 8000eda:	4a3c      	ldr	r2, [pc, #240]	; (8000fcc <HAL_RCC_OscConfig+0x548>)
 8000edc:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8000ee0:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8000ee2:	f7ff fa7f 	bl	80003e4 <HAL_GetTick>
 8000ee6:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8000ee8:	e008      	b.n	8000efc <HAL_RCC_OscConfig+0x478>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8000eea:	f7ff fa7b 	bl	80003e4 <HAL_GetTick>
 8000eee:	4602      	mov	r2, r0
 8000ef0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ef2:	1ad3      	subs	r3, r2, r3
 8000ef4:	2b02      	cmp	r3, #2
 8000ef6:	d901      	bls.n	8000efc <HAL_RCC_OscConfig+0x478>
        {
          return HAL_TIMEOUT;
 8000ef8:	2303      	movs	r3, #3
 8000efa:	e191      	b.n	8001220 <HAL_RCC_OscConfig+0x79c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8000efc:	4b33      	ldr	r3, [pc, #204]	; (8000fcc <HAL_RCC_OscConfig+0x548>)
 8000efe:	681b      	ldr	r3, [r3, #0]
 8000f00:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000f04:	2b00      	cmp	r3, #0
 8000f06:	d1f0      	bne.n	8000eea <HAL_RCC_OscConfig+0x466>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000f08:	687b      	ldr	r3, [r7, #4]
 8000f0a:	681b      	ldr	r3, [r3, #0]
 8000f0c:	f003 0304 	and.w	r3, r3, #4
 8000f10:	2b00      	cmp	r3, #0
 8000f12:	f000 8086 	beq.w	8001022 <HAL_RCC_OscConfig+0x59e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8000f16:	4b2e      	ldr	r3, [pc, #184]	; (8000fd0 <HAL_RCC_OscConfig+0x54c>)
 8000f18:	681b      	ldr	r3, [r3, #0]
 8000f1a:	4a2d      	ldr	r2, [pc, #180]	; (8000fd0 <HAL_RCC_OscConfig+0x54c>)
 8000f1c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000f20:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8000f22:	f7ff fa5f 	bl	80003e4 <HAL_GetTick>
 8000f26:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8000f28:	e008      	b.n	8000f3c <HAL_RCC_OscConfig+0x4b8>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8000f2a:	f7ff fa5b 	bl	80003e4 <HAL_GetTick>
 8000f2e:	4602      	mov	r2, r0
 8000f30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f32:	1ad3      	subs	r3, r2, r3
 8000f34:	2b64      	cmp	r3, #100	; 0x64
 8000f36:	d901      	bls.n	8000f3c <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_TIMEOUT;
 8000f38:	2303      	movs	r3, #3
 8000f3a:	e171      	b.n	8001220 <HAL_RCC_OscConfig+0x79c>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8000f3c:	4b24      	ldr	r3, [pc, #144]	; (8000fd0 <HAL_RCC_OscConfig+0x54c>)
 8000f3e:	681b      	ldr	r3, [r3, #0]
 8000f40:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000f44:	2b00      	cmp	r3, #0
 8000f46:	d0f0      	beq.n	8000f2a <HAL_RCC_OscConfig+0x4a6>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000f48:	687b      	ldr	r3, [r7, #4]
 8000f4a:	689b      	ldr	r3, [r3, #8]
 8000f4c:	2b01      	cmp	r3, #1
 8000f4e:	d106      	bne.n	8000f5e <HAL_RCC_OscConfig+0x4da>
 8000f50:	4b1e      	ldr	r3, [pc, #120]	; (8000fcc <HAL_RCC_OscConfig+0x548>)
 8000f52:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000f54:	4a1d      	ldr	r2, [pc, #116]	; (8000fcc <HAL_RCC_OscConfig+0x548>)
 8000f56:	f043 0301 	orr.w	r3, r3, #1
 8000f5a:	6713      	str	r3, [r2, #112]	; 0x70
 8000f5c:	e02d      	b.n	8000fba <HAL_RCC_OscConfig+0x536>
 8000f5e:	687b      	ldr	r3, [r7, #4]
 8000f60:	689b      	ldr	r3, [r3, #8]
 8000f62:	2b00      	cmp	r3, #0
 8000f64:	d10c      	bne.n	8000f80 <HAL_RCC_OscConfig+0x4fc>
 8000f66:	4b19      	ldr	r3, [pc, #100]	; (8000fcc <HAL_RCC_OscConfig+0x548>)
 8000f68:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000f6a:	4a18      	ldr	r2, [pc, #96]	; (8000fcc <HAL_RCC_OscConfig+0x548>)
 8000f6c:	f023 0301 	bic.w	r3, r3, #1
 8000f70:	6713      	str	r3, [r2, #112]	; 0x70
 8000f72:	4b16      	ldr	r3, [pc, #88]	; (8000fcc <HAL_RCC_OscConfig+0x548>)
 8000f74:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000f76:	4a15      	ldr	r2, [pc, #84]	; (8000fcc <HAL_RCC_OscConfig+0x548>)
 8000f78:	f023 0304 	bic.w	r3, r3, #4
 8000f7c:	6713      	str	r3, [r2, #112]	; 0x70
 8000f7e:	e01c      	b.n	8000fba <HAL_RCC_OscConfig+0x536>
 8000f80:	687b      	ldr	r3, [r7, #4]
 8000f82:	689b      	ldr	r3, [r3, #8]
 8000f84:	2b05      	cmp	r3, #5
 8000f86:	d10c      	bne.n	8000fa2 <HAL_RCC_OscConfig+0x51e>
 8000f88:	4b10      	ldr	r3, [pc, #64]	; (8000fcc <HAL_RCC_OscConfig+0x548>)
 8000f8a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000f8c:	4a0f      	ldr	r2, [pc, #60]	; (8000fcc <HAL_RCC_OscConfig+0x548>)
 8000f8e:	f043 0304 	orr.w	r3, r3, #4
 8000f92:	6713      	str	r3, [r2, #112]	; 0x70
 8000f94:	4b0d      	ldr	r3, [pc, #52]	; (8000fcc <HAL_RCC_OscConfig+0x548>)
 8000f96:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000f98:	4a0c      	ldr	r2, [pc, #48]	; (8000fcc <HAL_RCC_OscConfig+0x548>)
 8000f9a:	f043 0301 	orr.w	r3, r3, #1
 8000f9e:	6713      	str	r3, [r2, #112]	; 0x70
 8000fa0:	e00b      	b.n	8000fba <HAL_RCC_OscConfig+0x536>
 8000fa2:	4b0a      	ldr	r3, [pc, #40]	; (8000fcc <HAL_RCC_OscConfig+0x548>)
 8000fa4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000fa6:	4a09      	ldr	r2, [pc, #36]	; (8000fcc <HAL_RCC_OscConfig+0x548>)
 8000fa8:	f023 0301 	bic.w	r3, r3, #1
 8000fac:	6713      	str	r3, [r2, #112]	; 0x70
 8000fae:	4b07      	ldr	r3, [pc, #28]	; (8000fcc <HAL_RCC_OscConfig+0x548>)
 8000fb0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000fb2:	4a06      	ldr	r2, [pc, #24]	; (8000fcc <HAL_RCC_OscConfig+0x548>)
 8000fb4:	f023 0304 	bic.w	r3, r3, #4
 8000fb8:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8000fba:	687b      	ldr	r3, [r7, #4]
 8000fbc:	689b      	ldr	r3, [r3, #8]
 8000fbe:	2b00      	cmp	r3, #0
 8000fc0:	d01a      	beq.n	8000ff8 <HAL_RCC_OscConfig+0x574>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8000fc2:	f7ff fa0f 	bl	80003e4 <HAL_GetTick>
 8000fc6:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8000fc8:	e00f      	b.n	8000fea <HAL_RCC_OscConfig+0x566>
 8000fca:	bf00      	nop
 8000fcc:	58024400 	.word	0x58024400
 8000fd0:	58024800 	.word	0x58024800
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000fd4:	f7ff fa06 	bl	80003e4 <HAL_GetTick>
 8000fd8:	4602      	mov	r2, r0
 8000fda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000fdc:	1ad3      	subs	r3, r2, r3
 8000fde:	f241 3288 	movw	r2, #5000	; 0x1388
 8000fe2:	4293      	cmp	r3, r2
 8000fe4:	d901      	bls.n	8000fea <HAL_RCC_OscConfig+0x566>
        {
          return HAL_TIMEOUT;
 8000fe6:	2303      	movs	r3, #3
 8000fe8:	e11a      	b.n	8001220 <HAL_RCC_OscConfig+0x79c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8000fea:	4b8f      	ldr	r3, [pc, #572]	; (8001228 <HAL_RCC_OscConfig+0x7a4>)
 8000fec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000fee:	f003 0302 	and.w	r3, r3, #2
 8000ff2:	2b00      	cmp	r3, #0
 8000ff4:	d0ee      	beq.n	8000fd4 <HAL_RCC_OscConfig+0x550>
 8000ff6:	e014      	b.n	8001022 <HAL_RCC_OscConfig+0x59e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8000ff8:	f7ff f9f4 	bl	80003e4 <HAL_GetTick>
 8000ffc:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8000ffe:	e00a      	b.n	8001016 <HAL_RCC_OscConfig+0x592>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001000:	f7ff f9f0 	bl	80003e4 <HAL_GetTick>
 8001004:	4602      	mov	r2, r0
 8001006:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001008:	1ad3      	subs	r3, r2, r3
 800100a:	f241 3288 	movw	r2, #5000	; 0x1388
 800100e:	4293      	cmp	r3, r2
 8001010:	d901      	bls.n	8001016 <HAL_RCC_OscConfig+0x592>
        {
          return HAL_TIMEOUT;
 8001012:	2303      	movs	r3, #3
 8001014:	e104      	b.n	8001220 <HAL_RCC_OscConfig+0x79c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8001016:	4b84      	ldr	r3, [pc, #528]	; (8001228 <HAL_RCC_OscConfig+0x7a4>)
 8001018:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800101a:	f003 0302 	and.w	r3, r3, #2
 800101e:	2b00      	cmp	r3, #0
 8001020:	d1ee      	bne.n	8001000 <HAL_RCC_OscConfig+0x57c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001022:	687b      	ldr	r3, [r7, #4]
 8001024:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001026:	2b00      	cmp	r3, #0
 8001028:	f000 80f9 	beq.w	800121e <HAL_RCC_OscConfig+0x79a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 800102c:	4b7e      	ldr	r3, [pc, #504]	; (8001228 <HAL_RCC_OscConfig+0x7a4>)
 800102e:	691b      	ldr	r3, [r3, #16]
 8001030:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001034:	2b18      	cmp	r3, #24
 8001036:	f000 80b4 	beq.w	80011a2 <HAL_RCC_OscConfig+0x71e>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800103e:	2b02      	cmp	r3, #2
 8001040:	f040 8095 	bne.w	800116e <HAL_RCC_OscConfig+0x6ea>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001044:	4b78      	ldr	r3, [pc, #480]	; (8001228 <HAL_RCC_OscConfig+0x7a4>)
 8001046:	681b      	ldr	r3, [r3, #0]
 8001048:	4a77      	ldr	r2, [pc, #476]	; (8001228 <HAL_RCC_OscConfig+0x7a4>)
 800104a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800104e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001050:	f7ff f9c8 	bl	80003e4 <HAL_GetTick>
 8001054:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001056:	e008      	b.n	800106a <HAL_RCC_OscConfig+0x5e6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001058:	f7ff f9c4 	bl	80003e4 <HAL_GetTick>
 800105c:	4602      	mov	r2, r0
 800105e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001060:	1ad3      	subs	r3, r2, r3
 8001062:	2b02      	cmp	r3, #2
 8001064:	d901      	bls.n	800106a <HAL_RCC_OscConfig+0x5e6>
          {
            return HAL_TIMEOUT;
 8001066:	2303      	movs	r3, #3
 8001068:	e0da      	b.n	8001220 <HAL_RCC_OscConfig+0x79c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800106a:	4b6f      	ldr	r3, [pc, #444]	; (8001228 <HAL_RCC_OscConfig+0x7a4>)
 800106c:	681b      	ldr	r3, [r3, #0]
 800106e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001072:	2b00      	cmp	r3, #0
 8001074:	d1f0      	bne.n	8001058 <HAL_RCC_OscConfig+0x5d4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001076:	4b6c      	ldr	r3, [pc, #432]	; (8001228 <HAL_RCC_OscConfig+0x7a4>)
 8001078:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800107a:	4b6c      	ldr	r3, [pc, #432]	; (800122c <HAL_RCC_OscConfig+0x7a8>)
 800107c:	4013      	ands	r3, r2
 800107e:	687a      	ldr	r2, [r7, #4]
 8001080:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8001082:	687a      	ldr	r2, [r7, #4]
 8001084:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8001086:	0112      	lsls	r2, r2, #4
 8001088:	430a      	orrs	r2, r1
 800108a:	4967      	ldr	r1, [pc, #412]	; (8001228 <HAL_RCC_OscConfig+0x7a4>)
 800108c:	4313      	orrs	r3, r2
 800108e:	628b      	str	r3, [r1, #40]	; 0x28
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001094:	3b01      	subs	r3, #1
 8001096:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800109e:	3b01      	subs	r3, #1
 80010a0:	025b      	lsls	r3, r3, #9
 80010a2:	b29b      	uxth	r3, r3
 80010a4:	431a      	orrs	r2, r3
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80010aa:	3b01      	subs	r3, #1
 80010ac:	041b      	lsls	r3, r3, #16
 80010ae:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80010b2:	431a      	orrs	r2, r3
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80010b8:	3b01      	subs	r3, #1
 80010ba:	061b      	lsls	r3, r3, #24
 80010bc:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80010c0:	4959      	ldr	r1, [pc, #356]	; (8001228 <HAL_RCC_OscConfig+0x7a4>)
 80010c2:	4313      	orrs	r3, r2
 80010c4:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 80010c6:	4b58      	ldr	r3, [pc, #352]	; (8001228 <HAL_RCC_OscConfig+0x7a4>)
 80010c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80010ca:	4a57      	ldr	r2, [pc, #348]	; (8001228 <HAL_RCC_OscConfig+0x7a4>)
 80010cc:	f023 0301 	bic.w	r3, r3, #1
 80010d0:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80010d2:	4b55      	ldr	r3, [pc, #340]	; (8001228 <HAL_RCC_OscConfig+0x7a4>)
 80010d4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80010d6:	4b56      	ldr	r3, [pc, #344]	; (8001230 <HAL_RCC_OscConfig+0x7ac>)
 80010d8:	4013      	ands	r3, r2
 80010da:	687a      	ldr	r2, [r7, #4]
 80010dc:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80010de:	00d2      	lsls	r2, r2, #3
 80010e0:	4951      	ldr	r1, [pc, #324]	; (8001228 <HAL_RCC_OscConfig+0x7a4>)
 80010e2:	4313      	orrs	r3, r2
 80010e4:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 80010e6:	4b50      	ldr	r3, [pc, #320]	; (8001228 <HAL_RCC_OscConfig+0x7a4>)
 80010e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80010ea:	f023 020c 	bic.w	r2, r3, #12
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010f2:	494d      	ldr	r1, [pc, #308]	; (8001228 <HAL_RCC_OscConfig+0x7a4>)
 80010f4:	4313      	orrs	r3, r2
 80010f6:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 80010f8:	4b4b      	ldr	r3, [pc, #300]	; (8001228 <HAL_RCC_OscConfig+0x7a4>)
 80010fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80010fc:	f023 0202 	bic.w	r2, r3, #2
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001104:	4948      	ldr	r1, [pc, #288]	; (8001228 <HAL_RCC_OscConfig+0x7a4>)
 8001106:	4313      	orrs	r3, r2
 8001108:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800110a:	4b47      	ldr	r3, [pc, #284]	; (8001228 <HAL_RCC_OscConfig+0x7a4>)
 800110c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800110e:	4a46      	ldr	r2, [pc, #280]	; (8001228 <HAL_RCC_OscConfig+0x7a4>)
 8001110:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001114:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8001116:	4b44      	ldr	r3, [pc, #272]	; (8001228 <HAL_RCC_OscConfig+0x7a4>)
 8001118:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800111a:	4a43      	ldr	r2, [pc, #268]	; (8001228 <HAL_RCC_OscConfig+0x7a4>)
 800111c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001120:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8001122:	4b41      	ldr	r3, [pc, #260]	; (8001228 <HAL_RCC_OscConfig+0x7a4>)
 8001124:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001126:	4a40      	ldr	r2, [pc, #256]	; (8001228 <HAL_RCC_OscConfig+0x7a4>)
 8001128:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800112c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 800112e:	4b3e      	ldr	r3, [pc, #248]	; (8001228 <HAL_RCC_OscConfig+0x7a4>)
 8001130:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001132:	4a3d      	ldr	r2, [pc, #244]	; (8001228 <HAL_RCC_OscConfig+0x7a4>)
 8001134:	f043 0301 	orr.w	r3, r3, #1
 8001138:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800113a:	4b3b      	ldr	r3, [pc, #236]	; (8001228 <HAL_RCC_OscConfig+0x7a4>)
 800113c:	681b      	ldr	r3, [r3, #0]
 800113e:	4a3a      	ldr	r2, [pc, #232]	; (8001228 <HAL_RCC_OscConfig+0x7a4>)
 8001140:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001144:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001146:	f7ff f94d 	bl	80003e4 <HAL_GetTick>
 800114a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800114c:	e008      	b.n	8001160 <HAL_RCC_OscConfig+0x6dc>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800114e:	f7ff f949 	bl	80003e4 <HAL_GetTick>
 8001152:	4602      	mov	r2, r0
 8001154:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001156:	1ad3      	subs	r3, r2, r3
 8001158:	2b02      	cmp	r3, #2
 800115a:	d901      	bls.n	8001160 <HAL_RCC_OscConfig+0x6dc>
          {
            return HAL_TIMEOUT;
 800115c:	2303      	movs	r3, #3
 800115e:	e05f      	b.n	8001220 <HAL_RCC_OscConfig+0x79c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8001160:	4b31      	ldr	r3, [pc, #196]	; (8001228 <HAL_RCC_OscConfig+0x7a4>)
 8001162:	681b      	ldr	r3, [r3, #0]
 8001164:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001168:	2b00      	cmp	r3, #0
 800116a:	d0f0      	beq.n	800114e <HAL_RCC_OscConfig+0x6ca>
 800116c:	e057      	b.n	800121e <HAL_RCC_OscConfig+0x79a>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800116e:	4b2e      	ldr	r3, [pc, #184]	; (8001228 <HAL_RCC_OscConfig+0x7a4>)
 8001170:	681b      	ldr	r3, [r3, #0]
 8001172:	4a2d      	ldr	r2, [pc, #180]	; (8001228 <HAL_RCC_OscConfig+0x7a4>)
 8001174:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001178:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800117a:	f7ff f933 	bl	80003e4 <HAL_GetTick>
 800117e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001180:	e008      	b.n	8001194 <HAL_RCC_OscConfig+0x710>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001182:	f7ff f92f 	bl	80003e4 <HAL_GetTick>
 8001186:	4602      	mov	r2, r0
 8001188:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800118a:	1ad3      	subs	r3, r2, r3
 800118c:	2b02      	cmp	r3, #2
 800118e:	d901      	bls.n	8001194 <HAL_RCC_OscConfig+0x710>
          {
            return HAL_TIMEOUT;
 8001190:	2303      	movs	r3, #3
 8001192:	e045      	b.n	8001220 <HAL_RCC_OscConfig+0x79c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001194:	4b24      	ldr	r3, [pc, #144]	; (8001228 <HAL_RCC_OscConfig+0x7a4>)
 8001196:	681b      	ldr	r3, [r3, #0]
 8001198:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800119c:	2b00      	cmp	r3, #0
 800119e:	d1f0      	bne.n	8001182 <HAL_RCC_OscConfig+0x6fe>
 80011a0:	e03d      	b.n	800121e <HAL_RCC_OscConfig+0x79a>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 80011a2:	4b21      	ldr	r3, [pc, #132]	; (8001228 <HAL_RCC_OscConfig+0x7a4>)
 80011a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80011a6:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 80011a8:	4b1f      	ldr	r3, [pc, #124]	; (8001228 <HAL_RCC_OscConfig+0x7a4>)
 80011aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011ac:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80011b2:	2b01      	cmp	r3, #1
 80011b4:	d031      	beq.n	800121a <HAL_RCC_OscConfig+0x796>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80011b6:	693b      	ldr	r3, [r7, #16]
 80011b8:	f003 0203 	and.w	r2, r3, #3
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80011c0:	429a      	cmp	r2, r3
 80011c2:	d12a      	bne.n	800121a <HAL_RCC_OscConfig+0x796>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80011c4:	693b      	ldr	r3, [r7, #16]
 80011c6:	091b      	lsrs	r3, r3, #4
 80011c8:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80011d0:	429a      	cmp	r2, r3
 80011d2:	d122      	bne.n	800121a <HAL_RCC_OscConfig+0x796>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80011d4:	68fb      	ldr	r3, [r7, #12]
 80011d6:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011de:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80011e0:	429a      	cmp	r2, r3
 80011e2:	d11a      	bne.n	800121a <HAL_RCC_OscConfig+0x796>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80011e4:	68fb      	ldr	r3, [r7, #12]
 80011e6:	0a5b      	lsrs	r3, r3, #9
 80011e8:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80011f0:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80011f2:	429a      	cmp	r2, r3
 80011f4:	d111      	bne.n	800121a <HAL_RCC_OscConfig+0x796>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80011f6:	68fb      	ldr	r3, [r7, #12]
 80011f8:	0c1b      	lsrs	r3, r3, #16
 80011fa:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001202:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8001204:	429a      	cmp	r2, r3
 8001206:	d108      	bne.n	800121a <HAL_RCC_OscConfig+0x796>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8001208:	68fb      	ldr	r3, [r7, #12]
 800120a:	0e1b      	lsrs	r3, r3, #24
 800120c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001214:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8001216:	429a      	cmp	r2, r3
 8001218:	d001      	beq.n	800121e <HAL_RCC_OscConfig+0x79a>
      {
        return HAL_ERROR;
 800121a:	2301      	movs	r3, #1
 800121c:	e000      	b.n	8001220 <HAL_RCC_OscConfig+0x79c>
      }
    }
  }
  return HAL_OK;
 800121e:	2300      	movs	r3, #0
}
 8001220:	4618      	mov	r0, r3
 8001222:	3730      	adds	r7, #48	; 0x30
 8001224:	46bd      	mov	sp, r7
 8001226:	bd80      	pop	{r7, pc}
 8001228:	58024400 	.word	0x58024400
 800122c:	fffffc0c 	.word	0xfffffc0c
 8001230:	ffff0007 	.word	0xffff0007

08001234 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001234:	b580      	push	{r7, lr}
 8001236:	b086      	sub	sp, #24
 8001238:	af00      	add	r7, sp, #0
 800123a:	6078      	str	r0, [r7, #4]
 800123c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	2b00      	cmp	r3, #0
 8001242:	d101      	bne.n	8001248 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001244:	2301      	movs	r3, #1
 8001246:	e19c      	b.n	8001582 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001248:	4b8a      	ldr	r3, [pc, #552]	; (8001474 <HAL_RCC_ClockConfig+0x240>)
 800124a:	681b      	ldr	r3, [r3, #0]
 800124c:	f003 030f 	and.w	r3, r3, #15
 8001250:	683a      	ldr	r2, [r7, #0]
 8001252:	429a      	cmp	r2, r3
 8001254:	d910      	bls.n	8001278 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001256:	4b87      	ldr	r3, [pc, #540]	; (8001474 <HAL_RCC_ClockConfig+0x240>)
 8001258:	681b      	ldr	r3, [r3, #0]
 800125a:	f023 020f 	bic.w	r2, r3, #15
 800125e:	4985      	ldr	r1, [pc, #532]	; (8001474 <HAL_RCC_ClockConfig+0x240>)
 8001260:	683b      	ldr	r3, [r7, #0]
 8001262:	4313      	orrs	r3, r2
 8001264:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001266:	4b83      	ldr	r3, [pc, #524]	; (8001474 <HAL_RCC_ClockConfig+0x240>)
 8001268:	681b      	ldr	r3, [r3, #0]
 800126a:	f003 030f 	and.w	r3, r3, #15
 800126e:	683a      	ldr	r2, [r7, #0]
 8001270:	429a      	cmp	r2, r3
 8001272:	d001      	beq.n	8001278 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8001274:	2301      	movs	r3, #1
 8001276:	e184      	b.n	8001582 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	681b      	ldr	r3, [r3, #0]
 800127c:	f003 0304 	and.w	r3, r3, #4
 8001280:	2b00      	cmp	r3, #0
 8001282:	d010      	beq.n	80012a6 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	691a      	ldr	r2, [r3, #16]
 8001288:	4b7b      	ldr	r3, [pc, #492]	; (8001478 <HAL_RCC_ClockConfig+0x244>)
 800128a:	699b      	ldr	r3, [r3, #24]
 800128c:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8001290:	429a      	cmp	r2, r3
 8001292:	d908      	bls.n	80012a6 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8001294:	4b78      	ldr	r3, [pc, #480]	; (8001478 <HAL_RCC_ClockConfig+0x244>)
 8001296:	699b      	ldr	r3, [r3, #24]
 8001298:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	691b      	ldr	r3, [r3, #16]
 80012a0:	4975      	ldr	r1, [pc, #468]	; (8001478 <HAL_RCC_ClockConfig+0x244>)
 80012a2:	4313      	orrs	r3, r2
 80012a4:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	681b      	ldr	r3, [r3, #0]
 80012aa:	f003 0308 	and.w	r3, r3, #8
 80012ae:	2b00      	cmp	r3, #0
 80012b0:	d010      	beq.n	80012d4 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	695a      	ldr	r2, [r3, #20]
 80012b6:	4b70      	ldr	r3, [pc, #448]	; (8001478 <HAL_RCC_ClockConfig+0x244>)
 80012b8:	69db      	ldr	r3, [r3, #28]
 80012ba:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80012be:	429a      	cmp	r2, r3
 80012c0:	d908      	bls.n	80012d4 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80012c2:	4b6d      	ldr	r3, [pc, #436]	; (8001478 <HAL_RCC_ClockConfig+0x244>)
 80012c4:	69db      	ldr	r3, [r3, #28]
 80012c6:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	695b      	ldr	r3, [r3, #20]
 80012ce:	496a      	ldr	r1, [pc, #424]	; (8001478 <HAL_RCC_ClockConfig+0x244>)
 80012d0:	4313      	orrs	r3, r2
 80012d2:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	681b      	ldr	r3, [r3, #0]
 80012d8:	f003 0310 	and.w	r3, r3, #16
 80012dc:	2b00      	cmp	r3, #0
 80012de:	d010      	beq.n	8001302 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	699a      	ldr	r2, [r3, #24]
 80012e4:	4b64      	ldr	r3, [pc, #400]	; (8001478 <HAL_RCC_ClockConfig+0x244>)
 80012e6:	69db      	ldr	r3, [r3, #28]
 80012e8:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80012ec:	429a      	cmp	r2, r3
 80012ee:	d908      	bls.n	8001302 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80012f0:	4b61      	ldr	r3, [pc, #388]	; (8001478 <HAL_RCC_ClockConfig+0x244>)
 80012f2:	69db      	ldr	r3, [r3, #28]
 80012f4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	699b      	ldr	r3, [r3, #24]
 80012fc:	495e      	ldr	r1, [pc, #376]	; (8001478 <HAL_RCC_ClockConfig+0x244>)
 80012fe:	4313      	orrs	r3, r2
 8001300:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	681b      	ldr	r3, [r3, #0]
 8001306:	f003 0320 	and.w	r3, r3, #32
 800130a:	2b00      	cmp	r3, #0
 800130c:	d010      	beq.n	8001330 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	69da      	ldr	r2, [r3, #28]
 8001312:	4b59      	ldr	r3, [pc, #356]	; (8001478 <HAL_RCC_ClockConfig+0x244>)
 8001314:	6a1b      	ldr	r3, [r3, #32]
 8001316:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800131a:	429a      	cmp	r2, r3
 800131c:	d908      	bls.n	8001330 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 800131e:	4b56      	ldr	r3, [pc, #344]	; (8001478 <HAL_RCC_ClockConfig+0x244>)
 8001320:	6a1b      	ldr	r3, [r3, #32]
 8001322:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	69db      	ldr	r3, [r3, #28]
 800132a:	4953      	ldr	r1, [pc, #332]	; (8001478 <HAL_RCC_ClockConfig+0x244>)
 800132c:	4313      	orrs	r3, r2
 800132e:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	681b      	ldr	r3, [r3, #0]
 8001334:	f003 0302 	and.w	r3, r3, #2
 8001338:	2b00      	cmp	r3, #0
 800133a:	d010      	beq.n	800135e <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	68da      	ldr	r2, [r3, #12]
 8001340:	4b4d      	ldr	r3, [pc, #308]	; (8001478 <HAL_RCC_ClockConfig+0x244>)
 8001342:	699b      	ldr	r3, [r3, #24]
 8001344:	f003 030f 	and.w	r3, r3, #15
 8001348:	429a      	cmp	r2, r3
 800134a:	d908      	bls.n	800135e <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800134c:	4b4a      	ldr	r3, [pc, #296]	; (8001478 <HAL_RCC_ClockConfig+0x244>)
 800134e:	699b      	ldr	r3, [r3, #24]
 8001350:	f023 020f 	bic.w	r2, r3, #15
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	68db      	ldr	r3, [r3, #12]
 8001358:	4947      	ldr	r1, [pc, #284]	; (8001478 <HAL_RCC_ClockConfig+0x244>)
 800135a:	4313      	orrs	r3, r2
 800135c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	681b      	ldr	r3, [r3, #0]
 8001362:	f003 0301 	and.w	r3, r3, #1
 8001366:	2b00      	cmp	r3, #0
 8001368:	d055      	beq.n	8001416 <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 800136a:	4b43      	ldr	r3, [pc, #268]	; (8001478 <HAL_RCC_ClockConfig+0x244>)
 800136c:	699b      	ldr	r3, [r3, #24]
 800136e:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	689b      	ldr	r3, [r3, #8]
 8001376:	4940      	ldr	r1, [pc, #256]	; (8001478 <HAL_RCC_ClockConfig+0x244>)
 8001378:	4313      	orrs	r3, r2
 800137a:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	685b      	ldr	r3, [r3, #4]
 8001380:	2b02      	cmp	r3, #2
 8001382:	d107      	bne.n	8001394 <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001384:	4b3c      	ldr	r3, [pc, #240]	; (8001478 <HAL_RCC_ClockConfig+0x244>)
 8001386:	681b      	ldr	r3, [r3, #0]
 8001388:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800138c:	2b00      	cmp	r3, #0
 800138e:	d121      	bne.n	80013d4 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8001390:	2301      	movs	r3, #1
 8001392:	e0f6      	b.n	8001582 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	685b      	ldr	r3, [r3, #4]
 8001398:	2b03      	cmp	r3, #3
 800139a:	d107      	bne.n	80013ac <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800139c:	4b36      	ldr	r3, [pc, #216]	; (8001478 <HAL_RCC_ClockConfig+0x244>)
 800139e:	681b      	ldr	r3, [r3, #0]
 80013a0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80013a4:	2b00      	cmp	r3, #0
 80013a6:	d115      	bne.n	80013d4 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80013a8:	2301      	movs	r3, #1
 80013aa:	e0ea      	b.n	8001582 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	685b      	ldr	r3, [r3, #4]
 80013b0:	2b01      	cmp	r3, #1
 80013b2:	d107      	bne.n	80013c4 <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80013b4:	4b30      	ldr	r3, [pc, #192]	; (8001478 <HAL_RCC_ClockConfig+0x244>)
 80013b6:	681b      	ldr	r3, [r3, #0]
 80013b8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80013bc:	2b00      	cmp	r3, #0
 80013be:	d109      	bne.n	80013d4 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80013c0:	2301      	movs	r3, #1
 80013c2:	e0de      	b.n	8001582 <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80013c4:	4b2c      	ldr	r3, [pc, #176]	; (8001478 <HAL_RCC_ClockConfig+0x244>)
 80013c6:	681b      	ldr	r3, [r3, #0]
 80013c8:	f003 0304 	and.w	r3, r3, #4
 80013cc:	2b00      	cmp	r3, #0
 80013ce:	d101      	bne.n	80013d4 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80013d0:	2301      	movs	r3, #1
 80013d2:	e0d6      	b.n	8001582 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80013d4:	4b28      	ldr	r3, [pc, #160]	; (8001478 <HAL_RCC_ClockConfig+0x244>)
 80013d6:	691b      	ldr	r3, [r3, #16]
 80013d8:	f023 0207 	bic.w	r2, r3, #7
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	685b      	ldr	r3, [r3, #4]
 80013e0:	4925      	ldr	r1, [pc, #148]	; (8001478 <HAL_RCC_ClockConfig+0x244>)
 80013e2:	4313      	orrs	r3, r2
 80013e4:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80013e6:	f7fe fffd 	bl	80003e4 <HAL_GetTick>
 80013ea:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80013ec:	e00a      	b.n	8001404 <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80013ee:	f7fe fff9 	bl	80003e4 <HAL_GetTick>
 80013f2:	4602      	mov	r2, r0
 80013f4:	697b      	ldr	r3, [r7, #20]
 80013f6:	1ad3      	subs	r3, r2, r3
 80013f8:	f241 3288 	movw	r2, #5000	; 0x1388
 80013fc:	4293      	cmp	r3, r2
 80013fe:	d901      	bls.n	8001404 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8001400:	2303      	movs	r3, #3
 8001402:	e0be      	b.n	8001582 <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001404:	4b1c      	ldr	r3, [pc, #112]	; (8001478 <HAL_RCC_ClockConfig+0x244>)
 8001406:	691b      	ldr	r3, [r3, #16]
 8001408:	f003 0238 	and.w	r2, r3, #56	; 0x38
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	685b      	ldr	r3, [r3, #4]
 8001410:	00db      	lsls	r3, r3, #3
 8001412:	429a      	cmp	r2, r3
 8001414:	d1eb      	bne.n	80013ee <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	681b      	ldr	r3, [r3, #0]
 800141a:	f003 0302 	and.w	r3, r3, #2
 800141e:	2b00      	cmp	r3, #0
 8001420:	d010      	beq.n	8001444 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	68da      	ldr	r2, [r3, #12]
 8001426:	4b14      	ldr	r3, [pc, #80]	; (8001478 <HAL_RCC_ClockConfig+0x244>)
 8001428:	699b      	ldr	r3, [r3, #24]
 800142a:	f003 030f 	and.w	r3, r3, #15
 800142e:	429a      	cmp	r2, r3
 8001430:	d208      	bcs.n	8001444 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001432:	4b11      	ldr	r3, [pc, #68]	; (8001478 <HAL_RCC_ClockConfig+0x244>)
 8001434:	699b      	ldr	r3, [r3, #24]
 8001436:	f023 020f 	bic.w	r2, r3, #15
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	68db      	ldr	r3, [r3, #12]
 800143e:	490e      	ldr	r1, [pc, #56]	; (8001478 <HAL_RCC_ClockConfig+0x244>)
 8001440:	4313      	orrs	r3, r2
 8001442:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001444:	4b0b      	ldr	r3, [pc, #44]	; (8001474 <HAL_RCC_ClockConfig+0x240>)
 8001446:	681b      	ldr	r3, [r3, #0]
 8001448:	f003 030f 	and.w	r3, r3, #15
 800144c:	683a      	ldr	r2, [r7, #0]
 800144e:	429a      	cmp	r2, r3
 8001450:	d214      	bcs.n	800147c <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001452:	4b08      	ldr	r3, [pc, #32]	; (8001474 <HAL_RCC_ClockConfig+0x240>)
 8001454:	681b      	ldr	r3, [r3, #0]
 8001456:	f023 020f 	bic.w	r2, r3, #15
 800145a:	4906      	ldr	r1, [pc, #24]	; (8001474 <HAL_RCC_ClockConfig+0x240>)
 800145c:	683b      	ldr	r3, [r7, #0]
 800145e:	4313      	orrs	r3, r2
 8001460:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001462:	4b04      	ldr	r3, [pc, #16]	; (8001474 <HAL_RCC_ClockConfig+0x240>)
 8001464:	681b      	ldr	r3, [r3, #0]
 8001466:	f003 030f 	and.w	r3, r3, #15
 800146a:	683a      	ldr	r2, [r7, #0]
 800146c:	429a      	cmp	r2, r3
 800146e:	d005      	beq.n	800147c <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8001470:	2301      	movs	r3, #1
 8001472:	e086      	b.n	8001582 <HAL_RCC_ClockConfig+0x34e>
 8001474:	52002000 	.word	0x52002000
 8001478:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	681b      	ldr	r3, [r3, #0]
 8001480:	f003 0304 	and.w	r3, r3, #4
 8001484:	2b00      	cmp	r3, #0
 8001486:	d010      	beq.n	80014aa <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	691a      	ldr	r2, [r3, #16]
 800148c:	4b3f      	ldr	r3, [pc, #252]	; (800158c <HAL_RCC_ClockConfig+0x358>)
 800148e:	699b      	ldr	r3, [r3, #24]
 8001490:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8001494:	429a      	cmp	r2, r3
 8001496:	d208      	bcs.n	80014aa <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8001498:	4b3c      	ldr	r3, [pc, #240]	; (800158c <HAL_RCC_ClockConfig+0x358>)
 800149a:	699b      	ldr	r3, [r3, #24]
 800149c:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	691b      	ldr	r3, [r3, #16]
 80014a4:	4939      	ldr	r1, [pc, #228]	; (800158c <HAL_RCC_ClockConfig+0x358>)
 80014a6:	4313      	orrs	r3, r2
 80014a8:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	681b      	ldr	r3, [r3, #0]
 80014ae:	f003 0308 	and.w	r3, r3, #8
 80014b2:	2b00      	cmp	r3, #0
 80014b4:	d010      	beq.n	80014d8 <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	695a      	ldr	r2, [r3, #20]
 80014ba:	4b34      	ldr	r3, [pc, #208]	; (800158c <HAL_RCC_ClockConfig+0x358>)
 80014bc:	69db      	ldr	r3, [r3, #28]
 80014be:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80014c2:	429a      	cmp	r2, r3
 80014c4:	d208      	bcs.n	80014d8 <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80014c6:	4b31      	ldr	r3, [pc, #196]	; (800158c <HAL_RCC_ClockConfig+0x358>)
 80014c8:	69db      	ldr	r3, [r3, #28]
 80014ca:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	695b      	ldr	r3, [r3, #20]
 80014d2:	492e      	ldr	r1, [pc, #184]	; (800158c <HAL_RCC_ClockConfig+0x358>)
 80014d4:	4313      	orrs	r3, r2
 80014d6:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	681b      	ldr	r3, [r3, #0]
 80014dc:	f003 0310 	and.w	r3, r3, #16
 80014e0:	2b00      	cmp	r3, #0
 80014e2:	d010      	beq.n	8001506 <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	699a      	ldr	r2, [r3, #24]
 80014e8:	4b28      	ldr	r3, [pc, #160]	; (800158c <HAL_RCC_ClockConfig+0x358>)
 80014ea:	69db      	ldr	r3, [r3, #28]
 80014ec:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80014f0:	429a      	cmp	r2, r3
 80014f2:	d208      	bcs.n	8001506 <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80014f4:	4b25      	ldr	r3, [pc, #148]	; (800158c <HAL_RCC_ClockConfig+0x358>)
 80014f6:	69db      	ldr	r3, [r3, #28]
 80014f8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	699b      	ldr	r3, [r3, #24]
 8001500:	4922      	ldr	r1, [pc, #136]	; (800158c <HAL_RCC_ClockConfig+0x358>)
 8001502:	4313      	orrs	r3, r2
 8001504:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	681b      	ldr	r3, [r3, #0]
 800150a:	f003 0320 	and.w	r3, r3, #32
 800150e:	2b00      	cmp	r3, #0
 8001510:	d010      	beq.n	8001534 <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	69da      	ldr	r2, [r3, #28]
 8001516:	4b1d      	ldr	r3, [pc, #116]	; (800158c <HAL_RCC_ClockConfig+0x358>)
 8001518:	6a1b      	ldr	r3, [r3, #32]
 800151a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800151e:	429a      	cmp	r2, r3
 8001520:	d208      	bcs.n	8001534 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8001522:	4b1a      	ldr	r3, [pc, #104]	; (800158c <HAL_RCC_ClockConfig+0x358>)
 8001524:	6a1b      	ldr	r3, [r3, #32]
 8001526:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	69db      	ldr	r3, [r3, #28]
 800152e:	4917      	ldr	r1, [pc, #92]	; (800158c <HAL_RCC_ClockConfig+0x358>)
 8001530:	4313      	orrs	r3, r2
 8001532:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8001534:	f000 f834 	bl	80015a0 <HAL_RCC_GetSysClockFreq>
 8001538:	4601      	mov	r1, r0
 800153a:	4b14      	ldr	r3, [pc, #80]	; (800158c <HAL_RCC_ClockConfig+0x358>)
 800153c:	699b      	ldr	r3, [r3, #24]
 800153e:	0a1b      	lsrs	r3, r3, #8
 8001540:	f003 030f 	and.w	r3, r3, #15
 8001544:	4a12      	ldr	r2, [pc, #72]	; (8001590 <HAL_RCC_ClockConfig+0x35c>)
 8001546:	5cd3      	ldrb	r3, [r2, r3]
 8001548:	f003 031f 	and.w	r3, r3, #31
 800154c:	fa21 f303 	lsr.w	r3, r1, r3
 8001550:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8001552:	4b0e      	ldr	r3, [pc, #56]	; (800158c <HAL_RCC_ClockConfig+0x358>)
 8001554:	699b      	ldr	r3, [r3, #24]
 8001556:	f003 030f 	and.w	r3, r3, #15
 800155a:	4a0d      	ldr	r2, [pc, #52]	; (8001590 <HAL_RCC_ClockConfig+0x35c>)
 800155c:	5cd3      	ldrb	r3, [r2, r3]
 800155e:	f003 031f 	and.w	r3, r3, #31
 8001562:	693a      	ldr	r2, [r7, #16]
 8001564:	fa22 f303 	lsr.w	r3, r2, r3
 8001568:	4a0a      	ldr	r2, [pc, #40]	; (8001594 <HAL_RCC_ClockConfig+0x360>)
 800156a:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800156c:	4a0a      	ldr	r2, [pc, #40]	; (8001598 <HAL_RCC_ClockConfig+0x364>)
 800156e:	693b      	ldr	r3, [r7, #16]
 8001570:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 8001572:	4b0a      	ldr	r3, [pc, #40]	; (800159c <HAL_RCC_ClockConfig+0x368>)
 8001574:	681b      	ldr	r3, [r3, #0]
 8001576:	4618      	mov	r0, r3
 8001578:	f7fe feea 	bl	8000350 <HAL_InitTick>
 800157c:	4603      	mov	r3, r0
 800157e:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8001580:	7bfb      	ldrb	r3, [r7, #15]
}
 8001582:	4618      	mov	r0, r3
 8001584:	3718      	adds	r7, #24
 8001586:	46bd      	mov	sp, r7
 8001588:	bd80      	pop	{r7, pc}
 800158a:	bf00      	nop
 800158c:	58024400 	.word	0x58024400
 8001590:	080037ec 	.word	0x080037ec
 8001594:	2400000c 	.word	0x2400000c
 8001598:	24000008 	.word	0x24000008
 800159c:	24000000 	.word	0x24000000

080015a0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80015a0:	b480      	push	{r7}
 80015a2:	b089      	sub	sp, #36	; 0x24
 80015a4:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 80015a6:	4baf      	ldr	r3, [pc, #700]	; (8001864 <HAL_RCC_GetSysClockFreq+0x2c4>)
 80015a8:	691b      	ldr	r3, [r3, #16]
 80015aa:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80015ae:	2b18      	cmp	r3, #24
 80015b0:	f200 814e 	bhi.w	8001850 <HAL_RCC_GetSysClockFreq+0x2b0>
 80015b4:	a201      	add	r2, pc, #4	; (adr r2, 80015bc <HAL_RCC_GetSysClockFreq+0x1c>)
 80015b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80015ba:	bf00      	nop
 80015bc:	08001621 	.word	0x08001621
 80015c0:	08001851 	.word	0x08001851
 80015c4:	08001851 	.word	0x08001851
 80015c8:	08001851 	.word	0x08001851
 80015cc:	08001851 	.word	0x08001851
 80015d0:	08001851 	.word	0x08001851
 80015d4:	08001851 	.word	0x08001851
 80015d8:	08001851 	.word	0x08001851
 80015dc:	08001647 	.word	0x08001647
 80015e0:	08001851 	.word	0x08001851
 80015e4:	08001851 	.word	0x08001851
 80015e8:	08001851 	.word	0x08001851
 80015ec:	08001851 	.word	0x08001851
 80015f0:	08001851 	.word	0x08001851
 80015f4:	08001851 	.word	0x08001851
 80015f8:	08001851 	.word	0x08001851
 80015fc:	0800164d 	.word	0x0800164d
 8001600:	08001851 	.word	0x08001851
 8001604:	08001851 	.word	0x08001851
 8001608:	08001851 	.word	0x08001851
 800160c:	08001851 	.word	0x08001851
 8001610:	08001851 	.word	0x08001851
 8001614:	08001851 	.word	0x08001851
 8001618:	08001851 	.word	0x08001851
 800161c:	08001653 	.word	0x08001653
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8001620:	4b90      	ldr	r3, [pc, #576]	; (8001864 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8001622:	681b      	ldr	r3, [r3, #0]
 8001624:	f003 0320 	and.w	r3, r3, #32
 8001628:	2b00      	cmp	r3, #0
 800162a:	d009      	beq.n	8001640 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800162c:	4b8d      	ldr	r3, [pc, #564]	; (8001864 <HAL_RCC_GetSysClockFreq+0x2c4>)
 800162e:	681b      	ldr	r3, [r3, #0]
 8001630:	08db      	lsrs	r3, r3, #3
 8001632:	f003 0303 	and.w	r3, r3, #3
 8001636:	4a8c      	ldr	r2, [pc, #560]	; (8001868 <HAL_RCC_GetSysClockFreq+0x2c8>)
 8001638:	fa22 f303 	lsr.w	r3, r2, r3
 800163c:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 800163e:	e10a      	b.n	8001856 <HAL_RCC_GetSysClockFreq+0x2b6>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8001640:	4b89      	ldr	r3, [pc, #548]	; (8001868 <HAL_RCC_GetSysClockFreq+0x2c8>)
 8001642:	61bb      	str	r3, [r7, #24]
    break;
 8001644:	e107      	b.n	8001856 <HAL_RCC_GetSysClockFreq+0x2b6>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 8001646:	4b89      	ldr	r3, [pc, #548]	; (800186c <HAL_RCC_GetSysClockFreq+0x2cc>)
 8001648:	61bb      	str	r3, [r7, #24]
    break;
 800164a:	e104      	b.n	8001856 <HAL_RCC_GetSysClockFreq+0x2b6>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 800164c:	4b88      	ldr	r3, [pc, #544]	; (8001870 <HAL_RCC_GetSysClockFreq+0x2d0>)
 800164e:	61bb      	str	r3, [r7, #24]
    break;
 8001650:	e101      	b.n	8001856 <HAL_RCC_GetSysClockFreq+0x2b6>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8001652:	4b84      	ldr	r3, [pc, #528]	; (8001864 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8001654:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001656:	f003 0303 	and.w	r3, r3, #3
 800165a:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 800165c:	4b81      	ldr	r3, [pc, #516]	; (8001864 <HAL_RCC_GetSysClockFreq+0x2c4>)
 800165e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001660:	091b      	lsrs	r3, r3, #4
 8001662:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001666:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8001668:	4b7e      	ldr	r3, [pc, #504]	; (8001864 <HAL_RCC_GetSysClockFreq+0x2c4>)
 800166a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800166c:	f003 0301 	and.w	r3, r3, #1
 8001670:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8001672:	4b7c      	ldr	r3, [pc, #496]	; (8001864 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8001674:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001676:	08db      	lsrs	r3, r3, #3
 8001678:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800167c:	68fa      	ldr	r2, [r7, #12]
 800167e:	fb02 f303 	mul.w	r3, r2, r3
 8001682:	ee07 3a90 	vmov	s15, r3
 8001686:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800168a:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 800168e:	693b      	ldr	r3, [r7, #16]
 8001690:	2b00      	cmp	r3, #0
 8001692:	f000 80da 	beq.w	800184a <HAL_RCC_GetSysClockFreq+0x2aa>
    {
      switch (pllsource)
 8001696:	697b      	ldr	r3, [r7, #20]
 8001698:	2b01      	cmp	r3, #1
 800169a:	d05a      	beq.n	8001752 <HAL_RCC_GetSysClockFreq+0x1b2>
 800169c:	2b01      	cmp	r3, #1
 800169e:	d302      	bcc.n	80016a6 <HAL_RCC_GetSysClockFreq+0x106>
 80016a0:	2b02      	cmp	r3, #2
 80016a2:	d078      	beq.n	8001796 <HAL_RCC_GetSysClockFreq+0x1f6>
 80016a4:	e099      	b.n	80017da <HAL_RCC_GetSysClockFreq+0x23a>
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80016a6:	4b6f      	ldr	r3, [pc, #444]	; (8001864 <HAL_RCC_GetSysClockFreq+0x2c4>)
 80016a8:	681b      	ldr	r3, [r3, #0]
 80016aa:	f003 0320 	and.w	r3, r3, #32
 80016ae:	2b00      	cmp	r3, #0
 80016b0:	d02d      	beq.n	800170e <HAL_RCC_GetSysClockFreq+0x16e>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80016b2:	4b6c      	ldr	r3, [pc, #432]	; (8001864 <HAL_RCC_GetSysClockFreq+0x2c4>)
 80016b4:	681b      	ldr	r3, [r3, #0]
 80016b6:	08db      	lsrs	r3, r3, #3
 80016b8:	f003 0303 	and.w	r3, r3, #3
 80016bc:	4a6a      	ldr	r2, [pc, #424]	; (8001868 <HAL_RCC_GetSysClockFreq+0x2c8>)
 80016be:	fa22 f303 	lsr.w	r3, r2, r3
 80016c2:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	ee07 3a90 	vmov	s15, r3
 80016ca:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80016ce:	693b      	ldr	r3, [r7, #16]
 80016d0:	ee07 3a90 	vmov	s15, r3
 80016d4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80016d8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80016dc:	4b61      	ldr	r3, [pc, #388]	; (8001864 <HAL_RCC_GetSysClockFreq+0x2c4>)
 80016de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016e0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80016e4:	ee07 3a90 	vmov	s15, r3
 80016e8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80016ec:	ed97 6a02 	vldr	s12, [r7, #8]
 80016f0:	eddf 5a60 	vldr	s11, [pc, #384]	; 8001874 <HAL_RCC_GetSysClockFreq+0x2d4>
 80016f4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80016f8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80016fc:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8001700:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8001704:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001708:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 800170c:	e087      	b.n	800181e <HAL_RCC_GetSysClockFreq+0x27e>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800170e:	693b      	ldr	r3, [r7, #16]
 8001710:	ee07 3a90 	vmov	s15, r3
 8001714:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001718:	eddf 6a57 	vldr	s13, [pc, #348]	; 8001878 <HAL_RCC_GetSysClockFreq+0x2d8>
 800171c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001720:	4b50      	ldr	r3, [pc, #320]	; (8001864 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8001722:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001724:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001728:	ee07 3a90 	vmov	s15, r3
 800172c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8001730:	ed97 6a02 	vldr	s12, [r7, #8]
 8001734:	eddf 5a4f 	vldr	s11, [pc, #316]	; 8001874 <HAL_RCC_GetSysClockFreq+0x2d4>
 8001738:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800173c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8001740:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8001744:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8001748:	ee67 7a27 	vmul.f32	s15, s14, s15
 800174c:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8001750:	e065      	b.n	800181e <HAL_RCC_GetSysClockFreq+0x27e>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8001752:	693b      	ldr	r3, [r7, #16]
 8001754:	ee07 3a90 	vmov	s15, r3
 8001758:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800175c:	eddf 6a47 	vldr	s13, [pc, #284]	; 800187c <HAL_RCC_GetSysClockFreq+0x2dc>
 8001760:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001764:	4b3f      	ldr	r3, [pc, #252]	; (8001864 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8001766:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001768:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800176c:	ee07 3a90 	vmov	s15, r3
 8001770:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8001774:	ed97 6a02 	vldr	s12, [r7, #8]
 8001778:	eddf 5a3e 	vldr	s11, [pc, #248]	; 8001874 <HAL_RCC_GetSysClockFreq+0x2d4>
 800177c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8001780:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8001784:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8001788:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800178c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001790:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8001794:	e043      	b.n	800181e <HAL_RCC_GetSysClockFreq+0x27e>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8001796:	693b      	ldr	r3, [r7, #16]
 8001798:	ee07 3a90 	vmov	s15, r3
 800179c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80017a0:	eddf 6a37 	vldr	s13, [pc, #220]	; 8001880 <HAL_RCC_GetSysClockFreq+0x2e0>
 80017a4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80017a8:	4b2e      	ldr	r3, [pc, #184]	; (8001864 <HAL_RCC_GetSysClockFreq+0x2c4>)
 80017aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017ac:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80017b0:	ee07 3a90 	vmov	s15, r3
 80017b4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80017b8:	ed97 6a02 	vldr	s12, [r7, #8]
 80017bc:	eddf 5a2d 	vldr	s11, [pc, #180]	; 8001874 <HAL_RCC_GetSysClockFreq+0x2d4>
 80017c0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80017c4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80017c8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80017cc:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80017d0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80017d4:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80017d8:	e021      	b.n	800181e <HAL_RCC_GetSysClockFreq+0x27e>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80017da:	693b      	ldr	r3, [r7, #16]
 80017dc:	ee07 3a90 	vmov	s15, r3
 80017e0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80017e4:	eddf 6a25 	vldr	s13, [pc, #148]	; 800187c <HAL_RCC_GetSysClockFreq+0x2dc>
 80017e8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80017ec:	4b1d      	ldr	r3, [pc, #116]	; (8001864 <HAL_RCC_GetSysClockFreq+0x2c4>)
 80017ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017f0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80017f4:	ee07 3a90 	vmov	s15, r3
 80017f8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80017fc:	ed97 6a02 	vldr	s12, [r7, #8]
 8001800:	eddf 5a1c 	vldr	s11, [pc, #112]	; 8001874 <HAL_RCC_GetSysClockFreq+0x2d4>
 8001804:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8001808:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800180c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8001810:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8001814:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001818:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800181c:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 800181e:	4b11      	ldr	r3, [pc, #68]	; (8001864 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8001820:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001822:	0a5b      	lsrs	r3, r3, #9
 8001824:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001828:	3301      	adds	r3, #1
 800182a:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 800182c:	683b      	ldr	r3, [r7, #0]
 800182e:	ee07 3a90 	vmov	s15, r3
 8001832:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001836:	edd7 6a07 	vldr	s13, [r7, #28]
 800183a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800183e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001842:	ee17 3a90 	vmov	r3, s15
 8001846:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 8001848:	e005      	b.n	8001856 <HAL_RCC_GetSysClockFreq+0x2b6>
      sysclockfreq = 0U;
 800184a:	2300      	movs	r3, #0
 800184c:	61bb      	str	r3, [r7, #24]
    break;
 800184e:	e002      	b.n	8001856 <HAL_RCC_GetSysClockFreq+0x2b6>

  default:
    sysclockfreq = CSI_VALUE;
 8001850:	4b06      	ldr	r3, [pc, #24]	; (800186c <HAL_RCC_GetSysClockFreq+0x2cc>)
 8001852:	61bb      	str	r3, [r7, #24]
    break;
 8001854:	bf00      	nop
  }

  return sysclockfreq;
 8001856:	69bb      	ldr	r3, [r7, #24]
}
 8001858:	4618      	mov	r0, r3
 800185a:	3724      	adds	r7, #36	; 0x24
 800185c:	46bd      	mov	sp, r7
 800185e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001862:	4770      	bx	lr
 8001864:	58024400 	.word	0x58024400
 8001868:	03d09000 	.word	0x03d09000
 800186c:	003d0900 	.word	0x003d0900
 8001870:	007a1200 	.word	0x007a1200
 8001874:	46000000 	.word	0x46000000
 8001878:	4c742400 	.word	0x4c742400
 800187c:	4a742400 	.word	0x4a742400
 8001880:	4af42400 	.word	0x4af42400

08001884 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8001884:	b580      	push	{r7, lr}
 8001886:	b082      	sub	sp, #8
 8001888:	af00      	add	r7, sp, #0
 800188a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	2b00      	cmp	r3, #0
 8001890:	d101      	bne.n	8001896 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8001892:	2301      	movs	r3, #1
 8001894:	e01d      	b.n	80018d2 <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800189c:	b2db      	uxtb	r3, r3
 800189e:	2b00      	cmp	r3, #0
 80018a0:	d106      	bne.n	80018b0 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	2200      	movs	r2, #0
 80018a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80018aa:	6878      	ldr	r0, [r7, #4]
 80018ac:	f001 fc88 	bl	80031c0 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	2202      	movs	r2, #2
 80018b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	681a      	ldr	r2, [r3, #0]
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	3304      	adds	r3, #4
 80018c0:	4619      	mov	r1, r3
 80018c2:	4610      	mov	r0, r2
 80018c4:	f000 f97a 	bl	8001bbc <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	2201      	movs	r2, #1
 80018cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80018d0:	2300      	movs	r3, #0
}
 80018d2:	4618      	mov	r0, r3
 80018d4:	3708      	adds	r7, #8
 80018d6:	46bd      	mov	sp, r7
 80018d8:	bd80      	pop	{r7, pc}
	...

080018dc <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80018dc:	b580      	push	{r7, lr}
 80018de:	b084      	sub	sp, #16
 80018e0:	af00      	add	r7, sp, #0
 80018e2:	6078      	str	r0, [r7, #4]
 80018e4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	681b      	ldr	r3, [r3, #0]
 80018ea:	2201      	movs	r2, #1
 80018ec:	6839      	ldr	r1, [r7, #0]
 80018ee:	4618      	mov	r0, r3
 80018f0:	f000 fccc 	bl	800228c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	681b      	ldr	r3, [r3, #0]
 80018f8:	4a1e      	ldr	r2, [pc, #120]	; (8001974 <HAL_TIM_PWM_Start+0x98>)
 80018fa:	4293      	cmp	r3, r2
 80018fc:	d013      	beq.n	8001926 <HAL_TIM_PWM_Start+0x4a>
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	681b      	ldr	r3, [r3, #0]
 8001902:	4a1d      	ldr	r2, [pc, #116]	; (8001978 <HAL_TIM_PWM_Start+0x9c>)
 8001904:	4293      	cmp	r3, r2
 8001906:	d00e      	beq.n	8001926 <HAL_TIM_PWM_Start+0x4a>
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	681b      	ldr	r3, [r3, #0]
 800190c:	4a1b      	ldr	r2, [pc, #108]	; (800197c <HAL_TIM_PWM_Start+0xa0>)
 800190e:	4293      	cmp	r3, r2
 8001910:	d009      	beq.n	8001926 <HAL_TIM_PWM_Start+0x4a>
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	681b      	ldr	r3, [r3, #0]
 8001916:	4a1a      	ldr	r2, [pc, #104]	; (8001980 <HAL_TIM_PWM_Start+0xa4>)
 8001918:	4293      	cmp	r3, r2
 800191a:	d004      	beq.n	8001926 <HAL_TIM_PWM_Start+0x4a>
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	4a18      	ldr	r2, [pc, #96]	; (8001984 <HAL_TIM_PWM_Start+0xa8>)
 8001922:	4293      	cmp	r3, r2
 8001924:	d101      	bne.n	800192a <HAL_TIM_PWM_Start+0x4e>
 8001926:	2301      	movs	r3, #1
 8001928:	e000      	b.n	800192c <HAL_TIM_PWM_Start+0x50>
 800192a:	2300      	movs	r3, #0
 800192c:	2b00      	cmp	r3, #0
 800192e:	d007      	beq.n	8001940 <HAL_TIM_PWM_Start+0x64>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	681b      	ldr	r3, [r3, #0]
 8001934:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	681b      	ldr	r3, [r3, #0]
 800193a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800193e:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	681b      	ldr	r3, [r3, #0]
 8001944:	689a      	ldr	r2, [r3, #8]
 8001946:	4b10      	ldr	r3, [pc, #64]	; (8001988 <HAL_TIM_PWM_Start+0xac>)
 8001948:	4013      	ands	r3, r2
 800194a:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800194c:	68fb      	ldr	r3, [r7, #12]
 800194e:	2b06      	cmp	r3, #6
 8001950:	d00b      	beq.n	800196a <HAL_TIM_PWM_Start+0x8e>
 8001952:	68fb      	ldr	r3, [r7, #12]
 8001954:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001958:	d007      	beq.n	800196a <HAL_TIM_PWM_Start+0x8e>
  {
    __HAL_TIM_ENABLE(htim);
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	681b      	ldr	r3, [r3, #0]
 800195e:	681a      	ldr	r2, [r3, #0]
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	f042 0201 	orr.w	r2, r2, #1
 8001968:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800196a:	2300      	movs	r3, #0
}
 800196c:	4618      	mov	r0, r3
 800196e:	3710      	adds	r7, #16
 8001970:	46bd      	mov	sp, r7
 8001972:	bd80      	pop	{r7, pc}
 8001974:	40010000 	.word	0x40010000
 8001978:	40010400 	.word	0x40010400
 800197c:	40014000 	.word	0x40014000
 8001980:	40014400 	.word	0x40014400
 8001984:	40014800 	.word	0x40014800
 8001988:	00010007 	.word	0x00010007

0800198c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800198c:	b580      	push	{r7, lr}
 800198e:	b084      	sub	sp, #16
 8001990:	af00      	add	r7, sp, #0
 8001992:	60f8      	str	r0, [r7, #12]
 8001994:	60b9      	str	r1, [r7, #8]
 8001996:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8001998:	68fb      	ldr	r3, [r7, #12]
 800199a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800199e:	2b01      	cmp	r3, #1
 80019a0:	d101      	bne.n	80019a6 <HAL_TIM_PWM_ConfigChannel+0x1a>
 80019a2:	2302      	movs	r3, #2
 80019a4:	e105      	b.n	8001bb2 <HAL_TIM_PWM_ConfigChannel+0x226>
 80019a6:	68fb      	ldr	r3, [r7, #12]
 80019a8:	2201      	movs	r2, #1
 80019aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80019ae:	68fb      	ldr	r3, [r7, #12]
 80019b0:	2202      	movs	r2, #2
 80019b2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	2b14      	cmp	r3, #20
 80019ba:	f200 80f0 	bhi.w	8001b9e <HAL_TIM_PWM_ConfigChannel+0x212>
 80019be:	a201      	add	r2, pc, #4	; (adr r2, 80019c4 <HAL_TIM_PWM_ConfigChannel+0x38>)
 80019c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80019c4:	08001a19 	.word	0x08001a19
 80019c8:	08001b9f 	.word	0x08001b9f
 80019cc:	08001b9f 	.word	0x08001b9f
 80019d0:	08001b9f 	.word	0x08001b9f
 80019d4:	08001a59 	.word	0x08001a59
 80019d8:	08001b9f 	.word	0x08001b9f
 80019dc:	08001b9f 	.word	0x08001b9f
 80019e0:	08001b9f 	.word	0x08001b9f
 80019e4:	08001a9b 	.word	0x08001a9b
 80019e8:	08001b9f 	.word	0x08001b9f
 80019ec:	08001b9f 	.word	0x08001b9f
 80019f0:	08001b9f 	.word	0x08001b9f
 80019f4:	08001adb 	.word	0x08001adb
 80019f8:	08001b9f 	.word	0x08001b9f
 80019fc:	08001b9f 	.word	0x08001b9f
 8001a00:	08001b9f 	.word	0x08001b9f
 8001a04:	08001b1d 	.word	0x08001b1d
 8001a08:	08001b9f 	.word	0x08001b9f
 8001a0c:	08001b9f 	.word	0x08001b9f
 8001a10:	08001b9f 	.word	0x08001b9f
 8001a14:	08001b5d 	.word	0x08001b5d
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8001a18:	68fb      	ldr	r3, [r7, #12]
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	68b9      	ldr	r1, [r7, #8]
 8001a1e:	4618      	mov	r0, r3
 8001a20:	f000 f966 	bl	8001cf0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8001a24:	68fb      	ldr	r3, [r7, #12]
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	699a      	ldr	r2, [r3, #24]
 8001a2a:	68fb      	ldr	r3, [r7, #12]
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	f042 0208 	orr.w	r2, r2, #8
 8001a32:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8001a34:	68fb      	ldr	r3, [r7, #12]
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	699a      	ldr	r2, [r3, #24]
 8001a3a:	68fb      	ldr	r3, [r7, #12]
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	f022 0204 	bic.w	r2, r2, #4
 8001a42:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8001a44:	68fb      	ldr	r3, [r7, #12]
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	6999      	ldr	r1, [r3, #24]
 8001a4a:	68bb      	ldr	r3, [r7, #8]
 8001a4c:	691a      	ldr	r2, [r3, #16]
 8001a4e:	68fb      	ldr	r3, [r7, #12]
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	430a      	orrs	r2, r1
 8001a54:	619a      	str	r2, [r3, #24]
      break;
 8001a56:	e0a3      	b.n	8001ba0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8001a58:	68fb      	ldr	r3, [r7, #12]
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	68b9      	ldr	r1, [r7, #8]
 8001a5e:	4618      	mov	r0, r3
 8001a60:	f000 f9d6 	bl	8001e10 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8001a64:	68fb      	ldr	r3, [r7, #12]
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	699a      	ldr	r2, [r3, #24]
 8001a6a:	68fb      	ldr	r3, [r7, #12]
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001a72:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8001a74:	68fb      	ldr	r3, [r7, #12]
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	699a      	ldr	r2, [r3, #24]
 8001a7a:	68fb      	ldr	r3, [r7, #12]
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001a82:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8001a84:	68fb      	ldr	r3, [r7, #12]
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	6999      	ldr	r1, [r3, #24]
 8001a8a:	68bb      	ldr	r3, [r7, #8]
 8001a8c:	691b      	ldr	r3, [r3, #16]
 8001a8e:	021a      	lsls	r2, r3, #8
 8001a90:	68fb      	ldr	r3, [r7, #12]
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	430a      	orrs	r2, r1
 8001a96:	619a      	str	r2, [r3, #24]
      break;
 8001a98:	e082      	b.n	8001ba0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8001a9a:	68fb      	ldr	r3, [r7, #12]
 8001a9c:	681b      	ldr	r3, [r3, #0]
 8001a9e:	68b9      	ldr	r1, [r7, #8]
 8001aa0:	4618      	mov	r0, r3
 8001aa2:	f000 fa3f 	bl	8001f24 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8001aa6:	68fb      	ldr	r3, [r7, #12]
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	69da      	ldr	r2, [r3, #28]
 8001aac:	68fb      	ldr	r3, [r7, #12]
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	f042 0208 	orr.w	r2, r2, #8
 8001ab4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8001ab6:	68fb      	ldr	r3, [r7, #12]
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	69da      	ldr	r2, [r3, #28]
 8001abc:	68fb      	ldr	r3, [r7, #12]
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	f022 0204 	bic.w	r2, r2, #4
 8001ac4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8001ac6:	68fb      	ldr	r3, [r7, #12]
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	69d9      	ldr	r1, [r3, #28]
 8001acc:	68bb      	ldr	r3, [r7, #8]
 8001ace:	691a      	ldr	r2, [r3, #16]
 8001ad0:	68fb      	ldr	r3, [r7, #12]
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	430a      	orrs	r2, r1
 8001ad6:	61da      	str	r2, [r3, #28]
      break;
 8001ad8:	e062      	b.n	8001ba0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8001ada:	68fb      	ldr	r3, [r7, #12]
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	68b9      	ldr	r1, [r7, #8]
 8001ae0:	4618      	mov	r0, r3
 8001ae2:	f000 faa5 	bl	8002030 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8001ae6:	68fb      	ldr	r3, [r7, #12]
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	69da      	ldr	r2, [r3, #28]
 8001aec:	68fb      	ldr	r3, [r7, #12]
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001af4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8001af6:	68fb      	ldr	r3, [r7, #12]
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	69da      	ldr	r2, [r3, #28]
 8001afc:	68fb      	ldr	r3, [r7, #12]
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001b04:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8001b06:	68fb      	ldr	r3, [r7, #12]
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	69d9      	ldr	r1, [r3, #28]
 8001b0c:	68bb      	ldr	r3, [r7, #8]
 8001b0e:	691b      	ldr	r3, [r3, #16]
 8001b10:	021a      	lsls	r2, r3, #8
 8001b12:	68fb      	ldr	r3, [r7, #12]
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	430a      	orrs	r2, r1
 8001b18:	61da      	str	r2, [r3, #28]
      break;
 8001b1a:	e041      	b.n	8001ba0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8001b1c:	68fb      	ldr	r3, [r7, #12]
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	68b9      	ldr	r1, [r7, #8]
 8001b22:	4618      	mov	r0, r3
 8001b24:	f000 faec 	bl	8002100 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8001b28:	68fb      	ldr	r3, [r7, #12]
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8001b2e:	68fb      	ldr	r3, [r7, #12]
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	f042 0208 	orr.w	r2, r2, #8
 8001b36:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8001b38:	68fb      	ldr	r3, [r7, #12]
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8001b3e:	68fb      	ldr	r3, [r7, #12]
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	f022 0204 	bic.w	r2, r2, #4
 8001b46:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8001b48:	68fb      	ldr	r3, [r7, #12]
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8001b4e:	68bb      	ldr	r3, [r7, #8]
 8001b50:	691a      	ldr	r2, [r3, #16]
 8001b52:	68fb      	ldr	r3, [r7, #12]
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	430a      	orrs	r2, r1
 8001b58:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8001b5a:	e021      	b.n	8001ba0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8001b5c:	68fb      	ldr	r3, [r7, #12]
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	68b9      	ldr	r1, [r7, #8]
 8001b62:	4618      	mov	r0, r3
 8001b64:	f000 fb2e 	bl	80021c4 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8001b68:	68fb      	ldr	r3, [r7, #12]
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8001b6e:	68fb      	ldr	r3, [r7, #12]
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001b76:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8001b78:	68fb      	ldr	r3, [r7, #12]
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8001b7e:	68fb      	ldr	r3, [r7, #12]
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001b86:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8001b88:	68fb      	ldr	r3, [r7, #12]
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8001b8e:	68bb      	ldr	r3, [r7, #8]
 8001b90:	691b      	ldr	r3, [r3, #16]
 8001b92:	021a      	lsls	r2, r3, #8
 8001b94:	68fb      	ldr	r3, [r7, #12]
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	430a      	orrs	r2, r1
 8001b9a:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8001b9c:	e000      	b.n	8001ba0 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      break;
 8001b9e:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 8001ba0:	68fb      	ldr	r3, [r7, #12]
 8001ba2:	2201      	movs	r2, #1
 8001ba4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8001ba8:	68fb      	ldr	r3, [r7, #12]
 8001baa:	2200      	movs	r2, #0
 8001bac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8001bb0:	2300      	movs	r3, #0
}
 8001bb2:	4618      	mov	r0, r3
 8001bb4:	3710      	adds	r7, #16
 8001bb6:	46bd      	mov	sp, r7
 8001bb8:	bd80      	pop	{r7, pc}
 8001bba:	bf00      	nop

08001bbc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8001bbc:	b480      	push	{r7}
 8001bbe:	b085      	sub	sp, #20
 8001bc0:	af00      	add	r7, sp, #0
 8001bc2:	6078      	str	r0, [r7, #4]
 8001bc4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	4a40      	ldr	r2, [pc, #256]	; (8001cd0 <TIM_Base_SetConfig+0x114>)
 8001bd0:	4293      	cmp	r3, r2
 8001bd2:	d013      	beq.n	8001bfc <TIM_Base_SetConfig+0x40>
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001bda:	d00f      	beq.n	8001bfc <TIM_Base_SetConfig+0x40>
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	4a3d      	ldr	r2, [pc, #244]	; (8001cd4 <TIM_Base_SetConfig+0x118>)
 8001be0:	4293      	cmp	r3, r2
 8001be2:	d00b      	beq.n	8001bfc <TIM_Base_SetConfig+0x40>
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	4a3c      	ldr	r2, [pc, #240]	; (8001cd8 <TIM_Base_SetConfig+0x11c>)
 8001be8:	4293      	cmp	r3, r2
 8001bea:	d007      	beq.n	8001bfc <TIM_Base_SetConfig+0x40>
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	4a3b      	ldr	r2, [pc, #236]	; (8001cdc <TIM_Base_SetConfig+0x120>)
 8001bf0:	4293      	cmp	r3, r2
 8001bf2:	d003      	beq.n	8001bfc <TIM_Base_SetConfig+0x40>
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	4a3a      	ldr	r2, [pc, #232]	; (8001ce0 <TIM_Base_SetConfig+0x124>)
 8001bf8:	4293      	cmp	r3, r2
 8001bfa:	d108      	bne.n	8001c0e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001bfc:	68fb      	ldr	r3, [r7, #12]
 8001bfe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001c02:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8001c04:	683b      	ldr	r3, [r7, #0]
 8001c06:	685b      	ldr	r3, [r3, #4]
 8001c08:	68fa      	ldr	r2, [r7, #12]
 8001c0a:	4313      	orrs	r3, r2
 8001c0c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	4a2f      	ldr	r2, [pc, #188]	; (8001cd0 <TIM_Base_SetConfig+0x114>)
 8001c12:	4293      	cmp	r3, r2
 8001c14:	d01f      	beq.n	8001c56 <TIM_Base_SetConfig+0x9a>
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001c1c:	d01b      	beq.n	8001c56 <TIM_Base_SetConfig+0x9a>
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	4a2c      	ldr	r2, [pc, #176]	; (8001cd4 <TIM_Base_SetConfig+0x118>)
 8001c22:	4293      	cmp	r3, r2
 8001c24:	d017      	beq.n	8001c56 <TIM_Base_SetConfig+0x9a>
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	4a2b      	ldr	r2, [pc, #172]	; (8001cd8 <TIM_Base_SetConfig+0x11c>)
 8001c2a:	4293      	cmp	r3, r2
 8001c2c:	d013      	beq.n	8001c56 <TIM_Base_SetConfig+0x9a>
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	4a2a      	ldr	r2, [pc, #168]	; (8001cdc <TIM_Base_SetConfig+0x120>)
 8001c32:	4293      	cmp	r3, r2
 8001c34:	d00f      	beq.n	8001c56 <TIM_Base_SetConfig+0x9a>
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	4a29      	ldr	r2, [pc, #164]	; (8001ce0 <TIM_Base_SetConfig+0x124>)
 8001c3a:	4293      	cmp	r3, r2
 8001c3c:	d00b      	beq.n	8001c56 <TIM_Base_SetConfig+0x9a>
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	4a28      	ldr	r2, [pc, #160]	; (8001ce4 <TIM_Base_SetConfig+0x128>)
 8001c42:	4293      	cmp	r3, r2
 8001c44:	d007      	beq.n	8001c56 <TIM_Base_SetConfig+0x9a>
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	4a27      	ldr	r2, [pc, #156]	; (8001ce8 <TIM_Base_SetConfig+0x12c>)
 8001c4a:	4293      	cmp	r3, r2
 8001c4c:	d003      	beq.n	8001c56 <TIM_Base_SetConfig+0x9a>
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	4a26      	ldr	r2, [pc, #152]	; (8001cec <TIM_Base_SetConfig+0x130>)
 8001c52:	4293      	cmp	r3, r2
 8001c54:	d108      	bne.n	8001c68 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8001c56:	68fb      	ldr	r3, [r7, #12]
 8001c58:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001c5c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001c5e:	683b      	ldr	r3, [r7, #0]
 8001c60:	68db      	ldr	r3, [r3, #12]
 8001c62:	68fa      	ldr	r2, [r7, #12]
 8001c64:	4313      	orrs	r3, r2
 8001c66:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001c68:	68fb      	ldr	r3, [r7, #12]
 8001c6a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8001c6e:	683b      	ldr	r3, [r7, #0]
 8001c70:	695b      	ldr	r3, [r3, #20]
 8001c72:	4313      	orrs	r3, r2
 8001c74:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	68fa      	ldr	r2, [r7, #12]
 8001c7a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001c7c:	683b      	ldr	r3, [r7, #0]
 8001c7e:	689a      	ldr	r2, [r3, #8]
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8001c84:	683b      	ldr	r3, [r7, #0]
 8001c86:	681a      	ldr	r2, [r3, #0]
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	4a10      	ldr	r2, [pc, #64]	; (8001cd0 <TIM_Base_SetConfig+0x114>)
 8001c90:	4293      	cmp	r3, r2
 8001c92:	d00f      	beq.n	8001cb4 <TIM_Base_SetConfig+0xf8>
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	4a12      	ldr	r2, [pc, #72]	; (8001ce0 <TIM_Base_SetConfig+0x124>)
 8001c98:	4293      	cmp	r3, r2
 8001c9a:	d00b      	beq.n	8001cb4 <TIM_Base_SetConfig+0xf8>
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	4a11      	ldr	r2, [pc, #68]	; (8001ce4 <TIM_Base_SetConfig+0x128>)
 8001ca0:	4293      	cmp	r3, r2
 8001ca2:	d007      	beq.n	8001cb4 <TIM_Base_SetConfig+0xf8>
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	4a10      	ldr	r2, [pc, #64]	; (8001ce8 <TIM_Base_SetConfig+0x12c>)
 8001ca8:	4293      	cmp	r3, r2
 8001caa:	d003      	beq.n	8001cb4 <TIM_Base_SetConfig+0xf8>
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	4a0f      	ldr	r2, [pc, #60]	; (8001cec <TIM_Base_SetConfig+0x130>)
 8001cb0:	4293      	cmp	r3, r2
 8001cb2:	d103      	bne.n	8001cbc <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8001cb4:	683b      	ldr	r3, [r7, #0]
 8001cb6:	691a      	ldr	r2, [r3, #16]
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	2201      	movs	r2, #1
 8001cc0:	615a      	str	r2, [r3, #20]
}
 8001cc2:	bf00      	nop
 8001cc4:	3714      	adds	r7, #20
 8001cc6:	46bd      	mov	sp, r7
 8001cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ccc:	4770      	bx	lr
 8001cce:	bf00      	nop
 8001cd0:	40010000 	.word	0x40010000
 8001cd4:	40000400 	.word	0x40000400
 8001cd8:	40000800 	.word	0x40000800
 8001cdc:	40000c00 	.word	0x40000c00
 8001ce0:	40010400 	.word	0x40010400
 8001ce4:	40014000 	.word	0x40014000
 8001ce8:	40014400 	.word	0x40014400
 8001cec:	40014800 	.word	0x40014800

08001cf0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8001cf0:	b480      	push	{r7}
 8001cf2:	b087      	sub	sp, #28
 8001cf4:	af00      	add	r7, sp, #0
 8001cf6:	6078      	str	r0, [r7, #4]
 8001cf8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	6a1b      	ldr	r3, [r3, #32]
 8001cfe:	f023 0201 	bic.w	r2, r3, #1
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	6a1b      	ldr	r3, [r3, #32]
 8001d0a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	685b      	ldr	r3, [r3, #4]
 8001d10:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	699b      	ldr	r3, [r3, #24]
 8001d16:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8001d18:	68fa      	ldr	r2, [r7, #12]
 8001d1a:	4b37      	ldr	r3, [pc, #220]	; (8001df8 <TIM_OC1_SetConfig+0x108>)
 8001d1c:	4013      	ands	r3, r2
 8001d1e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8001d20:	68fb      	ldr	r3, [r7, #12]
 8001d22:	f023 0303 	bic.w	r3, r3, #3
 8001d26:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8001d28:	683b      	ldr	r3, [r7, #0]
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	68fa      	ldr	r2, [r7, #12]
 8001d2e:	4313      	orrs	r3, r2
 8001d30:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8001d32:	697b      	ldr	r3, [r7, #20]
 8001d34:	f023 0302 	bic.w	r3, r3, #2
 8001d38:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8001d3a:	683b      	ldr	r3, [r7, #0]
 8001d3c:	689b      	ldr	r3, [r3, #8]
 8001d3e:	697a      	ldr	r2, [r7, #20]
 8001d40:	4313      	orrs	r3, r2
 8001d42:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	4a2d      	ldr	r2, [pc, #180]	; (8001dfc <TIM_OC1_SetConfig+0x10c>)
 8001d48:	4293      	cmp	r3, r2
 8001d4a:	d00f      	beq.n	8001d6c <TIM_OC1_SetConfig+0x7c>
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	4a2c      	ldr	r2, [pc, #176]	; (8001e00 <TIM_OC1_SetConfig+0x110>)
 8001d50:	4293      	cmp	r3, r2
 8001d52:	d00b      	beq.n	8001d6c <TIM_OC1_SetConfig+0x7c>
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	4a2b      	ldr	r2, [pc, #172]	; (8001e04 <TIM_OC1_SetConfig+0x114>)
 8001d58:	4293      	cmp	r3, r2
 8001d5a:	d007      	beq.n	8001d6c <TIM_OC1_SetConfig+0x7c>
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	4a2a      	ldr	r2, [pc, #168]	; (8001e08 <TIM_OC1_SetConfig+0x118>)
 8001d60:	4293      	cmp	r3, r2
 8001d62:	d003      	beq.n	8001d6c <TIM_OC1_SetConfig+0x7c>
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	4a29      	ldr	r2, [pc, #164]	; (8001e0c <TIM_OC1_SetConfig+0x11c>)
 8001d68:	4293      	cmp	r3, r2
 8001d6a:	d10c      	bne.n	8001d86 <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8001d6c:	697b      	ldr	r3, [r7, #20]
 8001d6e:	f023 0308 	bic.w	r3, r3, #8
 8001d72:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8001d74:	683b      	ldr	r3, [r7, #0]
 8001d76:	68db      	ldr	r3, [r3, #12]
 8001d78:	697a      	ldr	r2, [r7, #20]
 8001d7a:	4313      	orrs	r3, r2
 8001d7c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8001d7e:	697b      	ldr	r3, [r7, #20]
 8001d80:	f023 0304 	bic.w	r3, r3, #4
 8001d84:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	4a1c      	ldr	r2, [pc, #112]	; (8001dfc <TIM_OC1_SetConfig+0x10c>)
 8001d8a:	4293      	cmp	r3, r2
 8001d8c:	d00f      	beq.n	8001dae <TIM_OC1_SetConfig+0xbe>
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	4a1b      	ldr	r2, [pc, #108]	; (8001e00 <TIM_OC1_SetConfig+0x110>)
 8001d92:	4293      	cmp	r3, r2
 8001d94:	d00b      	beq.n	8001dae <TIM_OC1_SetConfig+0xbe>
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	4a1a      	ldr	r2, [pc, #104]	; (8001e04 <TIM_OC1_SetConfig+0x114>)
 8001d9a:	4293      	cmp	r3, r2
 8001d9c:	d007      	beq.n	8001dae <TIM_OC1_SetConfig+0xbe>
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	4a19      	ldr	r2, [pc, #100]	; (8001e08 <TIM_OC1_SetConfig+0x118>)
 8001da2:	4293      	cmp	r3, r2
 8001da4:	d003      	beq.n	8001dae <TIM_OC1_SetConfig+0xbe>
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	4a18      	ldr	r2, [pc, #96]	; (8001e0c <TIM_OC1_SetConfig+0x11c>)
 8001daa:	4293      	cmp	r3, r2
 8001dac:	d111      	bne.n	8001dd2 <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8001dae:	693b      	ldr	r3, [r7, #16]
 8001db0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001db4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8001db6:	693b      	ldr	r3, [r7, #16]
 8001db8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8001dbc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8001dbe:	683b      	ldr	r3, [r7, #0]
 8001dc0:	695b      	ldr	r3, [r3, #20]
 8001dc2:	693a      	ldr	r2, [r7, #16]
 8001dc4:	4313      	orrs	r3, r2
 8001dc6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8001dc8:	683b      	ldr	r3, [r7, #0]
 8001dca:	699b      	ldr	r3, [r3, #24]
 8001dcc:	693a      	ldr	r2, [r7, #16]
 8001dce:	4313      	orrs	r3, r2
 8001dd0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	693a      	ldr	r2, [r7, #16]
 8001dd6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	68fa      	ldr	r2, [r7, #12]
 8001ddc:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8001dde:	683b      	ldr	r3, [r7, #0]
 8001de0:	685a      	ldr	r2, [r3, #4]
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	697a      	ldr	r2, [r7, #20]
 8001dea:	621a      	str	r2, [r3, #32]
}
 8001dec:	bf00      	nop
 8001dee:	371c      	adds	r7, #28
 8001df0:	46bd      	mov	sp, r7
 8001df2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001df6:	4770      	bx	lr
 8001df8:	fffeff8f 	.word	0xfffeff8f
 8001dfc:	40010000 	.word	0x40010000
 8001e00:	40010400 	.word	0x40010400
 8001e04:	40014000 	.word	0x40014000
 8001e08:	40014400 	.word	0x40014400
 8001e0c:	40014800 	.word	0x40014800

08001e10 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8001e10:	b480      	push	{r7}
 8001e12:	b087      	sub	sp, #28
 8001e14:	af00      	add	r7, sp, #0
 8001e16:	6078      	str	r0, [r7, #4]
 8001e18:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	6a1b      	ldr	r3, [r3, #32]
 8001e1e:	f023 0210 	bic.w	r2, r3, #16
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	6a1b      	ldr	r3, [r3, #32]
 8001e2a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	685b      	ldr	r3, [r3, #4]
 8001e30:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	699b      	ldr	r3, [r3, #24]
 8001e36:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8001e38:	68fa      	ldr	r2, [r7, #12]
 8001e3a:	4b34      	ldr	r3, [pc, #208]	; (8001f0c <TIM_OC2_SetConfig+0xfc>)
 8001e3c:	4013      	ands	r3, r2
 8001e3e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8001e40:	68fb      	ldr	r3, [r7, #12]
 8001e42:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001e46:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8001e48:	683b      	ldr	r3, [r7, #0]
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	021b      	lsls	r3, r3, #8
 8001e4e:	68fa      	ldr	r2, [r7, #12]
 8001e50:	4313      	orrs	r3, r2
 8001e52:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8001e54:	697b      	ldr	r3, [r7, #20]
 8001e56:	f023 0320 	bic.w	r3, r3, #32
 8001e5a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8001e5c:	683b      	ldr	r3, [r7, #0]
 8001e5e:	689b      	ldr	r3, [r3, #8]
 8001e60:	011b      	lsls	r3, r3, #4
 8001e62:	697a      	ldr	r2, [r7, #20]
 8001e64:	4313      	orrs	r3, r2
 8001e66:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	4a29      	ldr	r2, [pc, #164]	; (8001f10 <TIM_OC2_SetConfig+0x100>)
 8001e6c:	4293      	cmp	r3, r2
 8001e6e:	d003      	beq.n	8001e78 <TIM_OC2_SetConfig+0x68>
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	4a28      	ldr	r2, [pc, #160]	; (8001f14 <TIM_OC2_SetConfig+0x104>)
 8001e74:	4293      	cmp	r3, r2
 8001e76:	d10d      	bne.n	8001e94 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8001e78:	697b      	ldr	r3, [r7, #20]
 8001e7a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001e7e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8001e80:	683b      	ldr	r3, [r7, #0]
 8001e82:	68db      	ldr	r3, [r3, #12]
 8001e84:	011b      	lsls	r3, r3, #4
 8001e86:	697a      	ldr	r2, [r7, #20]
 8001e88:	4313      	orrs	r3, r2
 8001e8a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8001e8c:	697b      	ldr	r3, [r7, #20]
 8001e8e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8001e92:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	4a1e      	ldr	r2, [pc, #120]	; (8001f10 <TIM_OC2_SetConfig+0x100>)
 8001e98:	4293      	cmp	r3, r2
 8001e9a:	d00f      	beq.n	8001ebc <TIM_OC2_SetConfig+0xac>
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	4a1d      	ldr	r2, [pc, #116]	; (8001f14 <TIM_OC2_SetConfig+0x104>)
 8001ea0:	4293      	cmp	r3, r2
 8001ea2:	d00b      	beq.n	8001ebc <TIM_OC2_SetConfig+0xac>
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	4a1c      	ldr	r2, [pc, #112]	; (8001f18 <TIM_OC2_SetConfig+0x108>)
 8001ea8:	4293      	cmp	r3, r2
 8001eaa:	d007      	beq.n	8001ebc <TIM_OC2_SetConfig+0xac>
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	4a1b      	ldr	r2, [pc, #108]	; (8001f1c <TIM_OC2_SetConfig+0x10c>)
 8001eb0:	4293      	cmp	r3, r2
 8001eb2:	d003      	beq.n	8001ebc <TIM_OC2_SetConfig+0xac>
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	4a1a      	ldr	r2, [pc, #104]	; (8001f20 <TIM_OC2_SetConfig+0x110>)
 8001eb8:	4293      	cmp	r3, r2
 8001eba:	d113      	bne.n	8001ee4 <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8001ebc:	693b      	ldr	r3, [r7, #16]
 8001ebe:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8001ec2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8001ec4:	693b      	ldr	r3, [r7, #16]
 8001ec6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8001eca:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8001ecc:	683b      	ldr	r3, [r7, #0]
 8001ece:	695b      	ldr	r3, [r3, #20]
 8001ed0:	009b      	lsls	r3, r3, #2
 8001ed2:	693a      	ldr	r2, [r7, #16]
 8001ed4:	4313      	orrs	r3, r2
 8001ed6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8001ed8:	683b      	ldr	r3, [r7, #0]
 8001eda:	699b      	ldr	r3, [r3, #24]
 8001edc:	009b      	lsls	r3, r3, #2
 8001ede:	693a      	ldr	r2, [r7, #16]
 8001ee0:	4313      	orrs	r3, r2
 8001ee2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	693a      	ldr	r2, [r7, #16]
 8001ee8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	68fa      	ldr	r2, [r7, #12]
 8001eee:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8001ef0:	683b      	ldr	r3, [r7, #0]
 8001ef2:	685a      	ldr	r2, [r3, #4]
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	697a      	ldr	r2, [r7, #20]
 8001efc:	621a      	str	r2, [r3, #32]
}
 8001efe:	bf00      	nop
 8001f00:	371c      	adds	r7, #28
 8001f02:	46bd      	mov	sp, r7
 8001f04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f08:	4770      	bx	lr
 8001f0a:	bf00      	nop
 8001f0c:	feff8fff 	.word	0xfeff8fff
 8001f10:	40010000 	.word	0x40010000
 8001f14:	40010400 	.word	0x40010400
 8001f18:	40014000 	.word	0x40014000
 8001f1c:	40014400 	.word	0x40014400
 8001f20:	40014800 	.word	0x40014800

08001f24 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8001f24:	b480      	push	{r7}
 8001f26:	b087      	sub	sp, #28
 8001f28:	af00      	add	r7, sp, #0
 8001f2a:	6078      	str	r0, [r7, #4]
 8001f2c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	6a1b      	ldr	r3, [r3, #32]
 8001f32:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	6a1b      	ldr	r3, [r3, #32]
 8001f3e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	685b      	ldr	r3, [r3, #4]
 8001f44:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	69db      	ldr	r3, [r3, #28]
 8001f4a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8001f4c:	68fb      	ldr	r3, [r7, #12]
 8001f4e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001f52:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8001f54:	68fb      	ldr	r3, [r7, #12]
 8001f56:	f023 0303 	bic.w	r3, r3, #3
 8001f5a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8001f5c:	683b      	ldr	r3, [r7, #0]
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	68fa      	ldr	r2, [r7, #12]
 8001f62:	4313      	orrs	r3, r2
 8001f64:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8001f66:	697b      	ldr	r3, [r7, #20]
 8001f68:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8001f6c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8001f6e:	683b      	ldr	r3, [r7, #0]
 8001f70:	689b      	ldr	r3, [r3, #8]
 8001f72:	021b      	lsls	r3, r3, #8
 8001f74:	697a      	ldr	r2, [r7, #20]
 8001f76:	4313      	orrs	r3, r2
 8001f78:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	4a27      	ldr	r2, [pc, #156]	; (800201c <TIM_OC3_SetConfig+0xf8>)
 8001f7e:	4293      	cmp	r3, r2
 8001f80:	d003      	beq.n	8001f8a <TIM_OC3_SetConfig+0x66>
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	4a26      	ldr	r2, [pc, #152]	; (8002020 <TIM_OC3_SetConfig+0xfc>)
 8001f86:	4293      	cmp	r3, r2
 8001f88:	d10d      	bne.n	8001fa6 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8001f8a:	697b      	ldr	r3, [r7, #20]
 8001f8c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8001f90:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8001f92:	683b      	ldr	r3, [r7, #0]
 8001f94:	68db      	ldr	r3, [r3, #12]
 8001f96:	021b      	lsls	r3, r3, #8
 8001f98:	697a      	ldr	r2, [r7, #20]
 8001f9a:	4313      	orrs	r3, r2
 8001f9c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8001f9e:	697b      	ldr	r3, [r7, #20]
 8001fa0:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8001fa4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	4a1c      	ldr	r2, [pc, #112]	; (800201c <TIM_OC3_SetConfig+0xf8>)
 8001faa:	4293      	cmp	r3, r2
 8001fac:	d00f      	beq.n	8001fce <TIM_OC3_SetConfig+0xaa>
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	4a1b      	ldr	r2, [pc, #108]	; (8002020 <TIM_OC3_SetConfig+0xfc>)
 8001fb2:	4293      	cmp	r3, r2
 8001fb4:	d00b      	beq.n	8001fce <TIM_OC3_SetConfig+0xaa>
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	4a1a      	ldr	r2, [pc, #104]	; (8002024 <TIM_OC3_SetConfig+0x100>)
 8001fba:	4293      	cmp	r3, r2
 8001fbc:	d007      	beq.n	8001fce <TIM_OC3_SetConfig+0xaa>
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	4a19      	ldr	r2, [pc, #100]	; (8002028 <TIM_OC3_SetConfig+0x104>)
 8001fc2:	4293      	cmp	r3, r2
 8001fc4:	d003      	beq.n	8001fce <TIM_OC3_SetConfig+0xaa>
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	4a18      	ldr	r2, [pc, #96]	; (800202c <TIM_OC3_SetConfig+0x108>)
 8001fca:	4293      	cmp	r3, r2
 8001fcc:	d113      	bne.n	8001ff6 <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8001fce:	693b      	ldr	r3, [r7, #16]
 8001fd0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8001fd4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8001fd6:	693b      	ldr	r3, [r7, #16]
 8001fd8:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8001fdc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8001fde:	683b      	ldr	r3, [r7, #0]
 8001fe0:	695b      	ldr	r3, [r3, #20]
 8001fe2:	011b      	lsls	r3, r3, #4
 8001fe4:	693a      	ldr	r2, [r7, #16]
 8001fe6:	4313      	orrs	r3, r2
 8001fe8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8001fea:	683b      	ldr	r3, [r7, #0]
 8001fec:	699b      	ldr	r3, [r3, #24]
 8001fee:	011b      	lsls	r3, r3, #4
 8001ff0:	693a      	ldr	r2, [r7, #16]
 8001ff2:	4313      	orrs	r3, r2
 8001ff4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	693a      	ldr	r2, [r7, #16]
 8001ffa:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	68fa      	ldr	r2, [r7, #12]
 8002000:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8002002:	683b      	ldr	r3, [r7, #0]
 8002004:	685a      	ldr	r2, [r3, #4]
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	697a      	ldr	r2, [r7, #20]
 800200e:	621a      	str	r2, [r3, #32]
}
 8002010:	bf00      	nop
 8002012:	371c      	adds	r7, #28
 8002014:	46bd      	mov	sp, r7
 8002016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800201a:	4770      	bx	lr
 800201c:	40010000 	.word	0x40010000
 8002020:	40010400 	.word	0x40010400
 8002024:	40014000 	.word	0x40014000
 8002028:	40014400 	.word	0x40014400
 800202c:	40014800 	.word	0x40014800

08002030 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002030:	b480      	push	{r7}
 8002032:	b087      	sub	sp, #28
 8002034:	af00      	add	r7, sp, #0
 8002036:	6078      	str	r0, [r7, #4]
 8002038:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	6a1b      	ldr	r3, [r3, #32]
 800203e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	6a1b      	ldr	r3, [r3, #32]
 800204a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	685b      	ldr	r3, [r3, #4]
 8002050:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	69db      	ldr	r3, [r3, #28]
 8002056:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8002058:	68fb      	ldr	r3, [r7, #12]
 800205a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800205e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8002060:	68fb      	ldr	r3, [r7, #12]
 8002062:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002066:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002068:	683b      	ldr	r3, [r7, #0]
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	021b      	lsls	r3, r3, #8
 800206e:	68fa      	ldr	r2, [r7, #12]
 8002070:	4313      	orrs	r3, r2
 8002072:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8002074:	693b      	ldr	r3, [r7, #16]
 8002076:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800207a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800207c:	683b      	ldr	r3, [r7, #0]
 800207e:	689b      	ldr	r3, [r3, #8]
 8002080:	031b      	lsls	r3, r3, #12
 8002082:	693a      	ldr	r2, [r7, #16]
 8002084:	4313      	orrs	r3, r2
 8002086:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	4a18      	ldr	r2, [pc, #96]	; (80020ec <TIM_OC4_SetConfig+0xbc>)
 800208c:	4293      	cmp	r3, r2
 800208e:	d00f      	beq.n	80020b0 <TIM_OC4_SetConfig+0x80>
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	4a17      	ldr	r2, [pc, #92]	; (80020f0 <TIM_OC4_SetConfig+0xc0>)
 8002094:	4293      	cmp	r3, r2
 8002096:	d00b      	beq.n	80020b0 <TIM_OC4_SetConfig+0x80>
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	4a16      	ldr	r2, [pc, #88]	; (80020f4 <TIM_OC4_SetConfig+0xc4>)
 800209c:	4293      	cmp	r3, r2
 800209e:	d007      	beq.n	80020b0 <TIM_OC4_SetConfig+0x80>
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	4a15      	ldr	r2, [pc, #84]	; (80020f8 <TIM_OC4_SetConfig+0xc8>)
 80020a4:	4293      	cmp	r3, r2
 80020a6:	d003      	beq.n	80020b0 <TIM_OC4_SetConfig+0x80>
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	4a14      	ldr	r2, [pc, #80]	; (80020fc <TIM_OC4_SetConfig+0xcc>)
 80020ac:	4293      	cmp	r3, r2
 80020ae:	d109      	bne.n	80020c4 <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80020b0:	697b      	ldr	r3, [r7, #20]
 80020b2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80020b6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80020b8:	683b      	ldr	r3, [r7, #0]
 80020ba:	695b      	ldr	r3, [r3, #20]
 80020bc:	019b      	lsls	r3, r3, #6
 80020be:	697a      	ldr	r2, [r7, #20]
 80020c0:	4313      	orrs	r3, r2
 80020c2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	697a      	ldr	r2, [r7, #20]
 80020c8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	68fa      	ldr	r2, [r7, #12]
 80020ce:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80020d0:	683b      	ldr	r3, [r7, #0]
 80020d2:	685a      	ldr	r2, [r3, #4]
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	693a      	ldr	r2, [r7, #16]
 80020dc:	621a      	str	r2, [r3, #32]
}
 80020de:	bf00      	nop
 80020e0:	371c      	adds	r7, #28
 80020e2:	46bd      	mov	sp, r7
 80020e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020e8:	4770      	bx	lr
 80020ea:	bf00      	nop
 80020ec:	40010000 	.word	0x40010000
 80020f0:	40010400 	.word	0x40010400
 80020f4:	40014000 	.word	0x40014000
 80020f8:	40014400 	.word	0x40014400
 80020fc:	40014800 	.word	0x40014800

08002100 <TIM_OC5_SetConfig>:
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8002100:	b480      	push	{r7}
 8002102:	b087      	sub	sp, #28
 8002104:	af00      	add	r7, sp, #0
 8002106:	6078      	str	r0, [r7, #4]
 8002108:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	6a1b      	ldr	r3, [r3, #32]
 800210e:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	6a1b      	ldr	r3, [r3, #32]
 800211a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	685b      	ldr	r3, [r3, #4]
 8002120:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002126:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8002128:	68fb      	ldr	r3, [r7, #12]
 800212a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800212e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002130:	683b      	ldr	r3, [r7, #0]
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	68fa      	ldr	r2, [r7, #12]
 8002136:	4313      	orrs	r3, r2
 8002138:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800213a:	693b      	ldr	r3, [r7, #16]
 800213c:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8002140:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8002142:	683b      	ldr	r3, [r7, #0]
 8002144:	689b      	ldr	r3, [r3, #8]
 8002146:	041b      	lsls	r3, r3, #16
 8002148:	693a      	ldr	r2, [r7, #16]
 800214a:	4313      	orrs	r3, r2
 800214c:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	4a17      	ldr	r2, [pc, #92]	; (80021b0 <TIM_OC5_SetConfig+0xb0>)
 8002152:	4293      	cmp	r3, r2
 8002154:	d00f      	beq.n	8002176 <TIM_OC5_SetConfig+0x76>
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	4a16      	ldr	r2, [pc, #88]	; (80021b4 <TIM_OC5_SetConfig+0xb4>)
 800215a:	4293      	cmp	r3, r2
 800215c:	d00b      	beq.n	8002176 <TIM_OC5_SetConfig+0x76>
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	4a15      	ldr	r2, [pc, #84]	; (80021b8 <TIM_OC5_SetConfig+0xb8>)
 8002162:	4293      	cmp	r3, r2
 8002164:	d007      	beq.n	8002176 <TIM_OC5_SetConfig+0x76>
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	4a14      	ldr	r2, [pc, #80]	; (80021bc <TIM_OC5_SetConfig+0xbc>)
 800216a:	4293      	cmp	r3, r2
 800216c:	d003      	beq.n	8002176 <TIM_OC5_SetConfig+0x76>
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	4a13      	ldr	r2, [pc, #76]	; (80021c0 <TIM_OC5_SetConfig+0xc0>)
 8002172:	4293      	cmp	r3, r2
 8002174:	d109      	bne.n	800218a <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8002176:	697b      	ldr	r3, [r7, #20]
 8002178:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800217c:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800217e:	683b      	ldr	r3, [r7, #0]
 8002180:	695b      	ldr	r3, [r3, #20]
 8002182:	021b      	lsls	r3, r3, #8
 8002184:	697a      	ldr	r2, [r7, #20]
 8002186:	4313      	orrs	r3, r2
 8002188:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	697a      	ldr	r2, [r7, #20]
 800218e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	68fa      	ldr	r2, [r7, #12]
 8002194:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8002196:	683b      	ldr	r3, [r7, #0]
 8002198:	685a      	ldr	r2, [r3, #4]
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	693a      	ldr	r2, [r7, #16]
 80021a2:	621a      	str	r2, [r3, #32]
}
 80021a4:	bf00      	nop
 80021a6:	371c      	adds	r7, #28
 80021a8:	46bd      	mov	sp, r7
 80021aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ae:	4770      	bx	lr
 80021b0:	40010000 	.word	0x40010000
 80021b4:	40010400 	.word	0x40010400
 80021b8:	40014000 	.word	0x40014000
 80021bc:	40014400 	.word	0x40014400
 80021c0:	40014800 	.word	0x40014800

080021c4 <TIM_OC6_SetConfig>:
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 80021c4:	b480      	push	{r7}
 80021c6:	b087      	sub	sp, #28
 80021c8:	af00      	add	r7, sp, #0
 80021ca:	6078      	str	r0, [r7, #4]
 80021cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	6a1b      	ldr	r3, [r3, #32]
 80021d2:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	6a1b      	ldr	r3, [r3, #32]
 80021de:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	685b      	ldr	r3, [r3, #4]
 80021e4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80021ea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80021ec:	68fb      	ldr	r3, [r7, #12]
 80021ee:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80021f2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80021f4:	683b      	ldr	r3, [r7, #0]
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	021b      	lsls	r3, r3, #8
 80021fa:	68fa      	ldr	r2, [r7, #12]
 80021fc:	4313      	orrs	r3, r2
 80021fe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8002200:	693b      	ldr	r3, [r7, #16]
 8002202:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8002206:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8002208:	683b      	ldr	r3, [r7, #0]
 800220a:	689b      	ldr	r3, [r3, #8]
 800220c:	051b      	lsls	r3, r3, #20
 800220e:	693a      	ldr	r2, [r7, #16]
 8002210:	4313      	orrs	r3, r2
 8002212:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	4a18      	ldr	r2, [pc, #96]	; (8002278 <TIM_OC6_SetConfig+0xb4>)
 8002218:	4293      	cmp	r3, r2
 800221a:	d00f      	beq.n	800223c <TIM_OC6_SetConfig+0x78>
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	4a17      	ldr	r2, [pc, #92]	; (800227c <TIM_OC6_SetConfig+0xb8>)
 8002220:	4293      	cmp	r3, r2
 8002222:	d00b      	beq.n	800223c <TIM_OC6_SetConfig+0x78>
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	4a16      	ldr	r2, [pc, #88]	; (8002280 <TIM_OC6_SetConfig+0xbc>)
 8002228:	4293      	cmp	r3, r2
 800222a:	d007      	beq.n	800223c <TIM_OC6_SetConfig+0x78>
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	4a15      	ldr	r2, [pc, #84]	; (8002284 <TIM_OC6_SetConfig+0xc0>)
 8002230:	4293      	cmp	r3, r2
 8002232:	d003      	beq.n	800223c <TIM_OC6_SetConfig+0x78>
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	4a14      	ldr	r2, [pc, #80]	; (8002288 <TIM_OC6_SetConfig+0xc4>)
 8002238:	4293      	cmp	r3, r2
 800223a:	d109      	bne.n	8002250 <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800223c:	697b      	ldr	r3, [r7, #20]
 800223e:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8002242:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8002244:	683b      	ldr	r3, [r7, #0]
 8002246:	695b      	ldr	r3, [r3, #20]
 8002248:	029b      	lsls	r3, r3, #10
 800224a:	697a      	ldr	r2, [r7, #20]
 800224c:	4313      	orrs	r3, r2
 800224e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	697a      	ldr	r2, [r7, #20]
 8002254:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	68fa      	ldr	r2, [r7, #12]
 800225a:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800225c:	683b      	ldr	r3, [r7, #0]
 800225e:	685a      	ldr	r2, [r3, #4]
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	693a      	ldr	r2, [r7, #16]
 8002268:	621a      	str	r2, [r3, #32]
}
 800226a:	bf00      	nop
 800226c:	371c      	adds	r7, #28
 800226e:	46bd      	mov	sp, r7
 8002270:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002274:	4770      	bx	lr
 8002276:	bf00      	nop
 8002278:	40010000 	.word	0x40010000
 800227c:	40010400 	.word	0x40010400
 8002280:	40014000 	.word	0x40014000
 8002284:	40014400 	.word	0x40014400
 8002288:	40014800 	.word	0x40014800

0800228c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800228c:	b480      	push	{r7}
 800228e:	b087      	sub	sp, #28
 8002290:	af00      	add	r7, sp, #0
 8002292:	60f8      	str	r0, [r7, #12]
 8002294:	60b9      	str	r1, [r7, #8]
 8002296:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8002298:	68bb      	ldr	r3, [r7, #8]
 800229a:	f003 031f 	and.w	r3, r3, #31
 800229e:	2201      	movs	r2, #1
 80022a0:	fa02 f303 	lsl.w	r3, r2, r3
 80022a4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80022a6:	68fb      	ldr	r3, [r7, #12]
 80022a8:	6a1a      	ldr	r2, [r3, #32]
 80022aa:	697b      	ldr	r3, [r7, #20]
 80022ac:	43db      	mvns	r3, r3
 80022ae:	401a      	ands	r2, r3
 80022b0:	68fb      	ldr	r3, [r7, #12]
 80022b2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80022b4:	68fb      	ldr	r3, [r7, #12]
 80022b6:	6a1a      	ldr	r2, [r3, #32]
 80022b8:	68bb      	ldr	r3, [r7, #8]
 80022ba:	f003 031f 	and.w	r3, r3, #31
 80022be:	6879      	ldr	r1, [r7, #4]
 80022c0:	fa01 f303 	lsl.w	r3, r1, r3
 80022c4:	431a      	orrs	r2, r3
 80022c6:	68fb      	ldr	r3, [r7, #12]
 80022c8:	621a      	str	r2, [r3, #32]
}
 80022ca:	bf00      	nop
 80022cc:	371c      	adds	r7, #28
 80022ce:	46bd      	mov	sp, r7
 80022d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022d4:	4770      	bx	lr
	...

080022d8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80022d8:	b480      	push	{r7}
 80022da:	b085      	sub	sp, #20
 80022dc:	af00      	add	r7, sp, #0
 80022de:	6078      	str	r0, [r7, #4]
 80022e0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80022e8:	2b01      	cmp	r3, #1
 80022ea:	d101      	bne.n	80022f0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80022ec:	2302      	movs	r3, #2
 80022ee:	e068      	b.n	80023c2 <HAL_TIMEx_MasterConfigSynchronization+0xea>
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	2201      	movs	r2, #1
 80022f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	2202      	movs	r2, #2
 80022fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	685b      	ldr	r3, [r3, #4]
 8002306:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	689b      	ldr	r3, [r3, #8]
 800230e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	4a2e      	ldr	r2, [pc, #184]	; (80023d0 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8002316:	4293      	cmp	r3, r2
 8002318:	d004      	beq.n	8002324 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	4a2d      	ldr	r2, [pc, #180]	; (80023d4 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8002320:	4293      	cmp	r3, r2
 8002322:	d108      	bne.n	8002336 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8002324:	68fb      	ldr	r3, [r7, #12]
 8002326:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800232a:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800232c:	683b      	ldr	r3, [r7, #0]
 800232e:	685b      	ldr	r3, [r3, #4]
 8002330:	68fa      	ldr	r2, [r7, #12]
 8002332:	4313      	orrs	r3, r2
 8002334:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002336:	68fb      	ldr	r3, [r7, #12]
 8002338:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800233c:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800233e:	683b      	ldr	r3, [r7, #0]
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	68fa      	ldr	r2, [r7, #12]
 8002344:	4313      	orrs	r3, r2
 8002346:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	68fa      	ldr	r2, [r7, #12]
 800234e:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	4a1e      	ldr	r2, [pc, #120]	; (80023d0 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8002356:	4293      	cmp	r3, r2
 8002358:	d01d      	beq.n	8002396 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002362:	d018      	beq.n	8002396 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	4a1b      	ldr	r2, [pc, #108]	; (80023d8 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800236a:	4293      	cmp	r3, r2
 800236c:	d013      	beq.n	8002396 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	4a1a      	ldr	r2, [pc, #104]	; (80023dc <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8002374:	4293      	cmp	r3, r2
 8002376:	d00e      	beq.n	8002396 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	4a18      	ldr	r2, [pc, #96]	; (80023e0 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800237e:	4293      	cmp	r3, r2
 8002380:	d009      	beq.n	8002396 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	4a13      	ldr	r2, [pc, #76]	; (80023d4 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8002388:	4293      	cmp	r3, r2
 800238a:	d004      	beq.n	8002396 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	4a14      	ldr	r2, [pc, #80]	; (80023e4 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8002392:	4293      	cmp	r3, r2
 8002394:	d10c      	bne.n	80023b0 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002396:	68bb      	ldr	r3, [r7, #8]
 8002398:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800239c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800239e:	683b      	ldr	r3, [r7, #0]
 80023a0:	689b      	ldr	r3, [r3, #8]
 80023a2:	68ba      	ldr	r2, [r7, #8]
 80023a4:	4313      	orrs	r3, r2
 80023a6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	68ba      	ldr	r2, [r7, #8]
 80023ae:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	2201      	movs	r2, #1
 80023b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	2200      	movs	r2, #0
 80023bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80023c0:	2300      	movs	r3, #0
}
 80023c2:	4618      	mov	r0, r3
 80023c4:	3714      	adds	r7, #20
 80023c6:	46bd      	mov	sp, r7
 80023c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023cc:	4770      	bx	lr
 80023ce:	bf00      	nop
 80023d0:	40010000 	.word	0x40010000
 80023d4:	40010400 	.word	0x40010400
 80023d8:	40000400 	.word	0x40000400
 80023dc:	40000800 	.word	0x40000800
 80023e0:	40000c00 	.word	0x40000c00
 80023e4:	40001800 	.word	0x40001800

080023e8 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80023e8:	b480      	push	{r7}
 80023ea:	b085      	sub	sp, #20
 80023ec:	af00      	add	r7, sp, #0
 80023ee:	6078      	str	r0, [r7, #4]
 80023f0:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80023f2:	2300      	movs	r3, #0
 80023f4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80023fc:	2b01      	cmp	r3, #1
 80023fe:	d101      	bne.n	8002404 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8002400:	2302      	movs	r3, #2
 8002402:	e065      	b.n	80024d0 <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	2201      	movs	r2, #1
 8002408:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800240c:	68fb      	ldr	r3, [r7, #12]
 800240e:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8002412:	683b      	ldr	r3, [r7, #0]
 8002414:	68db      	ldr	r3, [r3, #12]
 8002416:	4313      	orrs	r3, r2
 8002418:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800241a:	68fb      	ldr	r3, [r7, #12]
 800241c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002420:	683b      	ldr	r3, [r7, #0]
 8002422:	689b      	ldr	r3, [r3, #8]
 8002424:	4313      	orrs	r3, r2
 8002426:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8002428:	68fb      	ldr	r3, [r7, #12]
 800242a:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800242e:	683b      	ldr	r3, [r7, #0]
 8002430:	685b      	ldr	r3, [r3, #4]
 8002432:	4313      	orrs	r3, r2
 8002434:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8002436:	68fb      	ldr	r3, [r7, #12]
 8002438:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800243c:	683b      	ldr	r3, [r7, #0]
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	4313      	orrs	r3, r2
 8002442:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8002444:	68fb      	ldr	r3, [r7, #12]
 8002446:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800244a:	683b      	ldr	r3, [r7, #0]
 800244c:	691b      	ldr	r3, [r3, #16]
 800244e:	4313      	orrs	r3, r2
 8002450:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8002452:	68fb      	ldr	r3, [r7, #12]
 8002454:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8002458:	683b      	ldr	r3, [r7, #0]
 800245a:	695b      	ldr	r3, [r3, #20]
 800245c:	4313      	orrs	r3, r2
 800245e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8002460:	68fb      	ldr	r3, [r7, #12]
 8002462:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8002466:	683b      	ldr	r3, [r7, #0]
 8002468:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800246a:	4313      	orrs	r3, r2
 800246c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800246e:	68fb      	ldr	r3, [r7, #12]
 8002470:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 8002474:	683b      	ldr	r3, [r7, #0]
 8002476:	699b      	ldr	r3, [r3, #24]
 8002478:	041b      	lsls	r3, r3, #16
 800247a:	4313      	orrs	r3, r2
 800247c:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	4a16      	ldr	r2, [pc, #88]	; (80024dc <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 8002484:	4293      	cmp	r3, r2
 8002486:	d004      	beq.n	8002492 <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	4a14      	ldr	r2, [pc, #80]	; (80024e0 <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 800248e:	4293      	cmp	r3, r2
 8002490:	d115      	bne.n	80024be <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8002492:	68fb      	ldr	r3, [r7, #12]
 8002494:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 8002498:	683b      	ldr	r3, [r7, #0]
 800249a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800249c:	051b      	lsls	r3, r3, #20
 800249e:	4313      	orrs	r3, r2
 80024a0:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 80024a2:	68fb      	ldr	r3, [r7, #12]
 80024a4:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 80024a8:	683b      	ldr	r3, [r7, #0]
 80024aa:	69db      	ldr	r3, [r3, #28]
 80024ac:	4313      	orrs	r3, r2
 80024ae:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 80024b0:	68fb      	ldr	r3, [r7, #12]
 80024b2:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 80024b6:	683b      	ldr	r3, [r7, #0]
 80024b8:	6a1b      	ldr	r3, [r3, #32]
 80024ba:	4313      	orrs	r3, r2
 80024bc:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	68fa      	ldr	r2, [r7, #12]
 80024c4:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	2200      	movs	r2, #0
 80024ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80024ce:	2300      	movs	r3, #0
}
 80024d0:	4618      	mov	r0, r3
 80024d2:	3714      	adds	r7, #20
 80024d4:	46bd      	mov	sp, r7
 80024d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024da:	4770      	bx	lr
 80024dc:	40010000 	.word	0x40010000
 80024e0:	40010400 	.word	0x40010400

080024e4 <motorInit>:
#include "stm32h743xx.h"
#include "main.h"

//Init all Motors (All "EN" - ON, All "INA, INB" - OFF)
void motorInit()
{
 80024e4:	b480      	push	{r7}
 80024e6:	af00      	add	r7, sp, #0
	//Motor 1 setup
	MODIFY_REG(GPIOG->ODR, GPIO_ODR_OD12 | GPIO_ODR_OD9, GPIO_ODR_OD0);
 80024e8:	4b1a      	ldr	r3, [pc, #104]	; (8002554 <motorInit+0x70>)
 80024ea:	695a      	ldr	r2, [r3, #20]
 80024ec:	4b1a      	ldr	r3, [pc, #104]	; (8002558 <motorInit+0x74>)
 80024ee:	4013      	ands	r3, r2
 80024f0:	4a18      	ldr	r2, [pc, #96]	; (8002554 <motorInit+0x70>)
 80024f2:	f043 0301 	orr.w	r3, r3, #1
 80024f6:	6153      	str	r3, [r2, #20]
	//Motor 2 setup
	MODIFY_REG(GPIOD->ODR, GPIO_ODR_OD1, GPIO_ODR_OD0);
 80024f8:	4b18      	ldr	r3, [pc, #96]	; (800255c <motorInit+0x78>)
 80024fa:	695b      	ldr	r3, [r3, #20]
 80024fc:	f023 0303 	bic.w	r3, r3, #3
 8002500:	4a16      	ldr	r2, [pc, #88]	; (800255c <motorInit+0x78>)
 8002502:	f043 0301 	orr.w	r3, r3, #1
 8002506:	6153      	str	r3, [r2, #20]
	CLEAR_BIT(GPIOF->ODR, GPIO_ODR_OD0);
 8002508:	4b15      	ldr	r3, [pc, #84]	; (8002560 <motorInit+0x7c>)
 800250a:	695b      	ldr	r3, [r3, #20]
 800250c:	4a14      	ldr	r2, [pc, #80]	; (8002560 <motorInit+0x7c>)
 800250e:	f023 0301 	bic.w	r3, r3, #1
 8002512:	6153      	str	r3, [r2, #20]
	//Motor 3 setup
	MODIFY_REG(GPIOD->ODR, GPIO_ODR_OD7 | GPIO_ODR_OD6, GPIO_ODR_OD4);
 8002514:	4b11      	ldr	r3, [pc, #68]	; (800255c <motorInit+0x78>)
 8002516:	695b      	ldr	r3, [r3, #20]
 8002518:	f023 03d0 	bic.w	r3, r3, #208	; 0xd0
 800251c:	4a0f      	ldr	r2, [pc, #60]	; (800255c <motorInit+0x78>)
 800251e:	f043 0310 	orr.w	r3, r3, #16
 8002522:	6153      	str	r3, [r2, #20]
	//Motor 4 setup
	CLEAR_BIT(GPIOD->ODR, GPIO_ODR_OD5);
 8002524:	4b0d      	ldr	r3, [pc, #52]	; (800255c <motorInit+0x78>)
 8002526:	695b      	ldr	r3, [r3, #20]
 8002528:	4a0c      	ldr	r2, [pc, #48]	; (800255c <motorInit+0x78>)
 800252a:	f023 0320 	bic.w	r3, r3, #32
 800252e:	6153      	str	r3, [r2, #20]
	CLEAR_BIT(GPIOE->ODR, GPIO_ODR_OD3);
 8002530:	4b0c      	ldr	r3, [pc, #48]	; (8002564 <motorInit+0x80>)
 8002532:	695b      	ldr	r3, [r3, #20]
 8002534:	4a0b      	ldr	r2, [pc, #44]	; (8002564 <motorInit+0x80>)
 8002536:	f023 0308 	bic.w	r3, r3, #8
 800253a:	6153      	str	r3, [r2, #20]
	SET_BIT(GPIOC->ODR, GPIO_ODR_OD3);
 800253c:	4b0a      	ldr	r3, [pc, #40]	; (8002568 <motorInit+0x84>)
 800253e:	695b      	ldr	r3, [r3, #20]
 8002540:	4a09      	ldr	r2, [pc, #36]	; (8002568 <motorInit+0x84>)
 8002542:	f043 0308 	orr.w	r3, r3, #8
 8002546:	6153      	str	r3, [r2, #20]
}
 8002548:	bf00      	nop
 800254a:	46bd      	mov	sp, r7
 800254c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002550:	4770      	bx	lr
 8002552:	bf00      	nop
 8002554:	58021800 	.word	0x58021800
 8002558:	ffffedfe 	.word	0xffffedfe
 800255c:	58020c00 	.word	0x58020c00
 8002560:	58021400 	.word	0x58021400
 8002564:	58021000 	.word	0x58021000
 8002568:	58020800 	.word	0x58020800

0800256c <DWT_Init>:
#define    SYSCLOCK            480000000

#include "stm32h7xx.h"

void DWT_Init(void)
{
 800256c:	b480      	push	{r7}
 800256e:	af00      	add	r7, sp, #0
        //разрешаем использовать счётчик
    SCB_DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
 8002570:	4b09      	ldr	r3, [pc, #36]	; (8002598 <DWT_Init+0x2c>)
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	4a08      	ldr	r2, [pc, #32]	; (8002598 <DWT_Init+0x2c>)
 8002576:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800257a:	6013      	str	r3, [r2, #0]
         //обнуляем значение счётного регистра
	DWT_CYCCNT  = 0;
 800257c:	4b07      	ldr	r3, [pc, #28]	; (800259c <DWT_Init+0x30>)
 800257e:	2200      	movs	r2, #0
 8002580:	601a      	str	r2, [r3, #0]
         //запускаем счётчик
	DWT_CONTROL |= DWT_CTRL_CYCCNTENA_Msk;
 8002582:	4b07      	ldr	r3, [pc, #28]	; (80025a0 <DWT_Init+0x34>)
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	4a06      	ldr	r2, [pc, #24]	; (80025a0 <DWT_Init+0x34>)
 8002588:	f043 0301 	orr.w	r3, r3, #1
 800258c:	6013      	str	r3, [r2, #0]
}
 800258e:	bf00      	nop
 8002590:	46bd      	mov	sp, r7
 8002592:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002596:	4770      	bx	lr
 8002598:	e000edfc 	.word	0xe000edfc
 800259c:	e0001004 	.word	0xe0001004
 80025a0:	e0001000 	.word	0xe0001000

080025a4 <delta>:

static __inline uint32_t delta(uint32_t t0, uint32_t t1)
{
 80025a4:	b480      	push	{r7}
 80025a6:	b083      	sub	sp, #12
 80025a8:	af00      	add	r7, sp, #0
 80025aa:	6078      	str	r0, [r7, #4]
 80025ac:	6039      	str	r1, [r7, #0]
    return (t1 - t0);
 80025ae:	683a      	ldr	r2, [r7, #0]
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	1ad3      	subs	r3, r2, r3
}
 80025b4:	4618      	mov	r0, r3
 80025b6:	370c      	adds	r7, #12
 80025b8:	46bd      	mov	sp, r7
 80025ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025be:	4770      	bx	lr

080025c0 <delay_ms>:
      uint32_t us_count_tic =  us * (SystemCoreClock/1000000);
      while (delta(t0, DWT->CYCCNT) < us_count_tic) ;
}

void delay_ms(uint32_t ms)
{
 80025c0:	b580      	push	{r7, lr}
 80025c2:	b084      	sub	sp, #16
 80025c4:	af00      	add	r7, sp, #0
 80025c6:	6078      	str	r0, [r7, #4]
      uint32_t t0 =  DWT->CYCCNT;
 80025c8:	4b0d      	ldr	r3, [pc, #52]	; (8002600 <delay_ms+0x40>)
 80025ca:	685b      	ldr	r3, [r3, #4]
 80025cc:	60fb      	str	r3, [r7, #12]
      uint32_t us_count_tic =  ms * (SystemCoreClock/1000);
 80025ce:	4b0d      	ldr	r3, [pc, #52]	; (8002604 <delay_ms+0x44>)
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	4a0d      	ldr	r2, [pc, #52]	; (8002608 <delay_ms+0x48>)
 80025d4:	fba2 2303 	umull	r2, r3, r2, r3
 80025d8:	099a      	lsrs	r2, r3, #6
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	fb02 f303 	mul.w	r3, r2, r3
 80025e0:	60bb      	str	r3, [r7, #8]
      while (delta(t0, DWT->CYCCNT) < us_count_tic) ;
 80025e2:	bf00      	nop
 80025e4:	4b06      	ldr	r3, [pc, #24]	; (8002600 <delay_ms+0x40>)
 80025e6:	685b      	ldr	r3, [r3, #4]
 80025e8:	4619      	mov	r1, r3
 80025ea:	68f8      	ldr	r0, [r7, #12]
 80025ec:	f7ff ffda 	bl	80025a4 <delta>
 80025f0:	4602      	mov	r2, r0
 80025f2:	68bb      	ldr	r3, [r7, #8]
 80025f4:	4293      	cmp	r3, r2
 80025f6:	d8f5      	bhi.n	80025e4 <delay_ms+0x24>
}
 80025f8:	bf00      	nop
 80025fa:	3710      	adds	r7, #16
 80025fc:	46bd      	mov	sp, r7
 80025fe:	bd80      	pop	{r7, pc}
 8002600:	e0001000 	.word	0xe0001000
 8002604:	24000008 	.word	0x24000008
 8002608:	10624dd3 	.word	0x10624dd3

0800260c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800260c:	b580      	push	{r7, lr}
 800260e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002610:	f7fd fe62 	bl	80002d8 <HAL_Init>

  /* USER CODE BEGIN Init */
  DWT_Init();
 8002614:	f7ff ffaa 	bl	800256c <DWT_Init>
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002618:	f000 f894 	bl	8002744 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800261c:	f000 fc10 	bl	8002e40 <MX_GPIO_Init>
  MX_TIM1_Init();
 8002620:	f000 f90a 	bl	8002838 <MX_TIM1_Init>
  MX_TIM2_Init();
 8002624:	f000 f9a4 	bl	8002970 <MX_TIM2_Init>
  MX_TIM4_Init();
 8002628:	f000 f9fc 	bl	8002a24 <MX_TIM4_Init>
  MX_TIM5_Init();
 800262c:	f000 fa54 	bl	8002ad8 <MX_TIM5_Init>
  MX_TIM8_Init();
 8002630:	f000 faac 	bl	8002b8c <MX_TIM8_Init>
  MX_TIM12_Init();
 8002634:	f000 fb38 	bl	8002ca8 <MX_TIM12_Init>
  MX_TIM15_Init();
 8002638:	f000 fb7c 	bl	8002d34 <MX_TIM15_Init>
  /* USER CODE BEGIN 2 */

  motorInit();
 800263c:	f7ff ff52 	bl	80024e4 <motorInit>
  // initialization

  TIM15->ARR = 2399;
 8002640:	4b35      	ldr	r3, [pc, #212]	; (8002718 <main+0x10c>)
 8002642:	f640 125f 	movw	r2, #2399	; 0x95f
 8002646:	62da      	str	r2, [r3, #44]	; 0x2c
  TIM15->CCR1 = (TIM15->ARR)/2;
 8002648:	4b33      	ldr	r3, [pc, #204]	; (8002718 <main+0x10c>)
 800264a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800264c:	4a32      	ldr	r2, [pc, #200]	; (8002718 <main+0x10c>)
 800264e:	085b      	lsrs	r3, r3, #1
 8002650:	6353      	str	r3, [r2, #52]	; 0x34
  HAL_TIM_PWM_Start(&htim15, TIM_CHANNEL_1);
 8002652:	2100      	movs	r1, #0
 8002654:	4831      	ldr	r0, [pc, #196]	; (800271c <main+0x110>)
 8002656:	f7ff f941 	bl	80018dc <HAL_TIM_PWM_Start>
//  TIM3->PSC = 34;

  //HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
  //CLEAR_BIT(TIM3->CCER, TIM_CCER_CC1E);

  TIM4->ARR = 8000;
 800265a:	4b31      	ldr	r3, [pc, #196]	; (8002720 <main+0x114>)
 800265c:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 8002660:	62da      	str	r2, [r3, #44]	; 0x2c
  TIM4->CCR1 = (TIM4->ARR)/2;
 8002662:	4b2f      	ldr	r3, [pc, #188]	; (8002720 <main+0x114>)
 8002664:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002666:	4a2e      	ldr	r2, [pc, #184]	; (8002720 <main+0x114>)
 8002668:	085b      	lsrs	r3, r3, #1
 800266a:	6353      	str	r3, [r2, #52]	; 0x34
  TIM4->PSC = 34;
 800266c:	4b2c      	ldr	r3, [pc, #176]	; (8002720 <main+0x114>)
 800266e:	2222      	movs	r2, #34	; 0x22
 8002670:	629a      	str	r2, [r3, #40]	; 0x28
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_1);
 8002672:	2100      	movs	r1, #0
 8002674:	482b      	ldr	r0, [pc, #172]	; (8002724 <main+0x118>)
 8002676:	f7ff f931 	bl	80018dc <HAL_TIM_PWM_Start>
  CLEAR_BIT(TIM4->CCER, TIM_CCER_CC1E);
 800267a:	4b29      	ldr	r3, [pc, #164]	; (8002720 <main+0x114>)
 800267c:	6a1b      	ldr	r3, [r3, #32]
 800267e:	4a28      	ldr	r2, [pc, #160]	; (8002720 <main+0x114>)
 8002680:	f023 0301 	bic.w	r3, r3, #1
 8002684:	6213      	str	r3, [r2, #32]

  SET_BIT(GPIOD->ODR, GPIO_ODR_OD11);
 8002686:	4b28      	ldr	r3, [pc, #160]	; (8002728 <main+0x11c>)
 8002688:	695b      	ldr	r3, [r3, #20]
 800268a:	4a27      	ldr	r2, [pc, #156]	; (8002728 <main+0x11c>)
 800268c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002690:	6153      	str	r3, [r2, #20]

  TIM8->ARR = 10000;
 8002692:	4b26      	ldr	r3, [pc, #152]	; (800272c <main+0x120>)
 8002694:	f242 7210 	movw	r2, #10000	; 0x2710
 8002698:	62da      	str	r2, [r3, #44]	; 0x2c
  TIM8->PSC = 5;
 800269a:	4b24      	ldr	r3, [pc, #144]	; (800272c <main+0x120>)
 800269c:	2205      	movs	r2, #5
 800269e:	629a      	str	r2, [r3, #40]	; 0x28
  TIM8->CCR1 = (TIM8->ARR)/2;
 80026a0:	4b22      	ldr	r3, [pc, #136]	; (800272c <main+0x120>)
 80026a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80026a4:	4a21      	ldr	r2, [pc, #132]	; (800272c <main+0x120>)
 80026a6:	085b      	lsrs	r3, r3, #1
 80026a8:	6353      	str	r3, [r2, #52]	; 0x34
  SET_BIT(GPIOC->ODR, GPIO_ODR_OD5);
 80026aa:	4b21      	ldr	r3, [pc, #132]	; (8002730 <main+0x124>)
 80026ac:	695b      	ldr	r3, [r3, #20]
 80026ae:	4a20      	ldr	r2, [pc, #128]	; (8002730 <main+0x124>)
 80026b0:	f043 0320 	orr.w	r3, r3, #32
 80026b4:	6153      	str	r3, [r2, #20]
  HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_1);
 80026b6:	2100      	movs	r1, #0
 80026b8:	481e      	ldr	r0, [pc, #120]	; (8002734 <main+0x128>)
 80026ba:	f7ff f90f 	bl	80018dc <HAL_TIM_PWM_Start>
  CLEAR_BIT(TIM8->CCER, TIM_CCER_CC1E);
 80026be:	4b1b      	ldr	r3, [pc, #108]	; (800272c <main+0x120>)
 80026c0:	6a1b      	ldr	r3, [r3, #32]
 80026c2:	4a1a      	ldr	r2, [pc, #104]	; (800272c <main+0x120>)
 80026c4:	f023 0301 	bic.w	r3, r3, #1
 80026c8:	6213      	str	r3, [r2, #32]

  //TIM2->ARR = 3000;
  //TIM2->CCR1 = (TIM2->ARR)/2;
  //HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);

  TIM1->ARR = 3000;
 80026ca:	4b1b      	ldr	r3, [pc, #108]	; (8002738 <main+0x12c>)
 80026cc:	f640 32b8 	movw	r2, #3000	; 0xbb8
 80026d0:	62da      	str	r2, [r3, #44]	; 0x2c
  TIM1->CCR1 = (TIM1->ARR)/2;
 80026d2:	4b19      	ldr	r3, [pc, #100]	; (8002738 <main+0x12c>)
 80026d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80026d6:	4a18      	ldr	r2, [pc, #96]	; (8002738 <main+0x12c>)
 80026d8:	085b      	lsrs	r3, r3, #1
 80026da:	6353      	str	r3, [r2, #52]	; 0x34
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 80026dc:	2100      	movs	r1, #0
 80026de:	4817      	ldr	r0, [pc, #92]	; (800273c <main+0x130>)
 80026e0:	f7ff f8fc 	bl	80018dc <HAL_TIM_PWM_Start>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	  TIM1->ARR = 3000;
 80026e4:	4b14      	ldr	r3, [pc, #80]	; (8002738 <main+0x12c>)
 80026e6:	f640 32b8 	movw	r2, #3000	; 0xbb8
 80026ea:	62da      	str	r2, [r3, #44]	; 0x2c
	  TIM1->CCR1 = (TIM1->ARR)/2;
 80026ec:	4b12      	ldr	r3, [pc, #72]	; (8002738 <main+0x12c>)
 80026ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80026f0:	4a11      	ldr	r2, [pc, #68]	; (8002738 <main+0x12c>)
 80026f2:	085b      	lsrs	r3, r3, #1
 80026f4:	6353      	str	r3, [r2, #52]	; 0x34
	  SET_BIT(STP1_GPIO_PORT, STP1_PWM_PIN);
 80026f6:	4b12      	ldr	r3, [pc, #72]	; (8002740 <main+0x134>)
 80026f8:	695b      	ldr	r3, [r3, #20]
 80026fa:	4a11      	ldr	r2, [pc, #68]	; (8002740 <main+0x134>)
 80026fc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002700:	6153      	str	r3, [r2, #20]
	 // motor2_move(CW);
	  SET_BIT(TIM8->CCER, TIM_CCER_CC1E);
 8002702:	4b0a      	ldr	r3, [pc, #40]	; (800272c <main+0x120>)
 8002704:	6a1b      	ldr	r3, [r3, #32]
 8002706:	4a09      	ldr	r2, [pc, #36]	; (800272c <main+0x120>)
 8002708:	f043 0301 	orr.w	r3, r3, #1
 800270c:	6213      	str	r3, [r2, #32]
	   delay_ms(250);
 800270e:	20fa      	movs	r0, #250	; 0xfa
 8002710:	f7ff ff56 	bl	80025c0 <delay_ms>
	  TIM1->ARR = 3000;
 8002714:	e7e6      	b.n	80026e4 <main+0xd8>
 8002716:	bf00      	nop
 8002718:	40014000 	.word	0x40014000
 800271c:	240000b4 	.word	0x240000b4
 8002720:	40000800 	.word	0x40000800
 8002724:	24000074 	.word	0x24000074
 8002728:	58020c00 	.word	0x58020c00
 800272c:	40010400 	.word	0x40010400
 8002730:	58020800 	.word	0x58020800
 8002734:	24000034 	.word	0x24000034
 8002738:	40010000 	.word	0x40010000
 800273c:	24000134 	.word	0x24000134
 8002740:	58021800 	.word	0x58021800

08002744 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002744:	b580      	push	{r7, lr}
 8002746:	b09c      	sub	sp, #112	; 0x70
 8002748:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800274a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800274e:	224c      	movs	r2, #76	; 0x4c
 8002750:	2100      	movs	r1, #0
 8002752:	4618      	mov	r0, r3
 8002754:	f001 f836 	bl	80037c4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002758:	1d3b      	adds	r3, r7, #4
 800275a:	2220      	movs	r2, #32
 800275c:	2100      	movs	r1, #0
 800275e:	4618      	mov	r0, r3
 8002760:	f001 f830 	bl	80037c4 <memset>

  /** Supply configuration update enable 
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8002764:	2002      	movs	r0, #2
 8002766:	f7fe f953 	bl	8000a10 <HAL_PWREx_ConfigSupply>
  /** Configure the main internal regulator output voltage 
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 800276a:	2300      	movs	r3, #0
 800276c:	603b      	str	r3, [r7, #0]
 800276e:	4b30      	ldr	r3, [pc, #192]	; (8002830 <SystemClock_Config+0xec>)
 8002770:	699b      	ldr	r3, [r3, #24]
 8002772:	4a2f      	ldr	r2, [pc, #188]	; (8002830 <SystemClock_Config+0xec>)
 8002774:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002778:	6193      	str	r3, [r2, #24]
 800277a:	4b2d      	ldr	r3, [pc, #180]	; (8002830 <SystemClock_Config+0xec>)
 800277c:	699b      	ldr	r3, [r3, #24]
 800277e:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8002782:	603b      	str	r3, [r7, #0]
 8002784:	4b2b      	ldr	r3, [pc, #172]	; (8002834 <SystemClock_Config+0xf0>)
 8002786:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002788:	4a2a      	ldr	r2, [pc, #168]	; (8002834 <SystemClock_Config+0xf0>)
 800278a:	f043 0301 	orr.w	r3, r3, #1
 800278e:	62d3      	str	r3, [r2, #44]	; 0x2c
 8002790:	4b28      	ldr	r3, [pc, #160]	; (8002834 <SystemClock_Config+0xf0>)
 8002792:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002794:	f003 0301 	and.w	r3, r3, #1
 8002798:	603b      	str	r3, [r7, #0]
 800279a:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 800279c:	bf00      	nop
 800279e:	4b24      	ldr	r3, [pc, #144]	; (8002830 <SystemClock_Config+0xec>)
 80027a0:	699b      	ldr	r3, [r3, #24]
 80027a2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80027a6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80027aa:	d1f8      	bne.n	800279e <SystemClock_Config+0x5a>
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80027ac:	2301      	movs	r3, #1
 80027ae:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80027b0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80027b4:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80027b6:	2302      	movs	r3, #2
 80027b8:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80027ba:	2302      	movs	r3, #2
 80027bc:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 1;
 80027be:	2301      	movs	r3, #1
 80027c0:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 120;
 80027c2:	2378      	movs	r3, #120	; 0x78
 80027c4:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 80027c6:	2302      	movs	r3, #2
 80027c8:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80027ca:	2302      	movs	r3, #2
 80027cc:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 80027ce:	2302      	movs	r3, #2
 80027d0:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 80027d2:	230c      	movs	r3, #12
 80027d4:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 80027d6:	2300      	movs	r3, #0
 80027d8:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 80027da:	2300      	movs	r3, #0
 80027dc:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80027de:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80027e2:	4618      	mov	r0, r3
 80027e4:	f7fe f94e 	bl	8000a84 <HAL_RCC_OscConfig>
 80027e8:	4603      	mov	r3, r0
 80027ea:	2b00      	cmp	r3, #0
 80027ec:	d001      	beq.n	80027f2 <SystemClock_Config+0xae>
  {
    Error_Handler();
 80027ee:	f000 fcc5 	bl	800317c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80027f2:	233f      	movs	r3, #63	; 0x3f
 80027f4:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80027f6:	2303      	movs	r3, #3
 80027f8:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 80027fa:	2300      	movs	r3, #0
 80027fc:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 80027fe:	2308      	movs	r3, #8
 8002800:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8002802:	2340      	movs	r3, #64	; 0x40
 8002804:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8002806:	2340      	movs	r3, #64	; 0x40
 8002808:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 800280a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800280e:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8002810:	2340      	movs	r3, #64	; 0x40
 8002812:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8002814:	1d3b      	adds	r3, r7, #4
 8002816:	2104      	movs	r1, #4
 8002818:	4618      	mov	r0, r3
 800281a:	f7fe fd0b 	bl	8001234 <HAL_RCC_ClockConfig>
 800281e:	4603      	mov	r3, r0
 8002820:	2b00      	cmp	r3, #0
 8002822:	d001      	beq.n	8002828 <SystemClock_Config+0xe4>
  {
    Error_Handler();
 8002824:	f000 fcaa 	bl	800317c <Error_Handler>
  }
}
 8002828:	bf00      	nop
 800282a:	3770      	adds	r7, #112	; 0x70
 800282c:	46bd      	mov	sp, r7
 800282e:	bd80      	pop	{r7, pc}
 8002830:	58024800 	.word	0x58024800
 8002834:	58000400 	.word	0x58000400

08002838 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8002838:	b580      	push	{r7, lr}
 800283a:	b096      	sub	sp, #88	; 0x58
 800283c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800283e:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8002842:	2200      	movs	r2, #0
 8002844:	601a      	str	r2, [r3, #0]
 8002846:	605a      	str	r2, [r3, #4]
 8002848:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800284a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800284e:	2200      	movs	r2, #0
 8002850:	601a      	str	r2, [r3, #0]
 8002852:	605a      	str	r2, [r3, #4]
 8002854:	609a      	str	r2, [r3, #8]
 8002856:	60da      	str	r2, [r3, #12]
 8002858:	611a      	str	r2, [r3, #16]
 800285a:	615a      	str	r2, [r3, #20]
 800285c:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800285e:	1d3b      	adds	r3, r7, #4
 8002860:	222c      	movs	r2, #44	; 0x2c
 8002862:	2100      	movs	r1, #0
 8002864:	4618      	mov	r0, r3
 8002866:	f000 ffad 	bl	80037c4 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800286a:	4b3f      	ldr	r3, [pc, #252]	; (8002968 <MX_TIM1_Init+0x130>)
 800286c:	4a3f      	ldr	r2, [pc, #252]	; (800296c <MX_TIM1_Init+0x134>)
 800286e:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 5;
 8002870:	4b3d      	ldr	r3, [pc, #244]	; (8002968 <MX_TIM1_Init+0x130>)
 8002872:	2205      	movs	r2, #5
 8002874:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002876:	4b3c      	ldr	r3, [pc, #240]	; (8002968 <MX_TIM1_Init+0x130>)
 8002878:	2200      	movs	r2, #0
 800287a:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 699;
 800287c:	4b3a      	ldr	r3, [pc, #232]	; (8002968 <MX_TIM1_Init+0x130>)
 800287e:	f240 22bb 	movw	r2, #699	; 0x2bb
 8002882:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002884:	4b38      	ldr	r3, [pc, #224]	; (8002968 <MX_TIM1_Init+0x130>)
 8002886:	2200      	movs	r2, #0
 8002888:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800288a:	4b37      	ldr	r3, [pc, #220]	; (8002968 <MX_TIM1_Init+0x130>)
 800288c:	2200      	movs	r2, #0
 800288e:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8002890:	4b35      	ldr	r3, [pc, #212]	; (8002968 <MX_TIM1_Init+0x130>)
 8002892:	2280      	movs	r2, #128	; 0x80
 8002894:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8002896:	4834      	ldr	r0, [pc, #208]	; (8002968 <MX_TIM1_Init+0x130>)
 8002898:	f7fe fff4 	bl	8001884 <HAL_TIM_PWM_Init>
 800289c:	4603      	mov	r3, r0
 800289e:	2b00      	cmp	r3, #0
 80028a0:	d001      	beq.n	80028a6 <MX_TIM1_Init+0x6e>
  {
    Error_Handler();
 80028a2:	f000 fc6b 	bl	800317c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80028a6:	2300      	movs	r3, #0
 80028a8:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80028aa:	2300      	movs	r3, #0
 80028ac:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80028ae:	2300      	movs	r3, #0
 80028b0:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80028b2:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80028b6:	4619      	mov	r1, r3
 80028b8:	482b      	ldr	r0, [pc, #172]	; (8002968 <MX_TIM1_Init+0x130>)
 80028ba:	f7ff fd0d 	bl	80022d8 <HAL_TIMEx_MasterConfigSynchronization>
 80028be:	4603      	mov	r3, r0
 80028c0:	2b00      	cmp	r3, #0
 80028c2:	d001      	beq.n	80028c8 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 80028c4:	f000 fc5a 	bl	800317c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80028c8:	2360      	movs	r3, #96	; 0x60
 80028ca:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 0;
 80028cc:	2300      	movs	r3, #0
 80028ce:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80028d0:	2300      	movs	r3, #0
 80028d2:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80028d4:	2300      	movs	r3, #0
 80028d6:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80028d8:	2300      	movs	r3, #0
 80028da:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80028dc:	2300      	movs	r3, #0
 80028de:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80028e0:	2300      	movs	r3, #0
 80028e2:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80028e4:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80028e8:	2200      	movs	r2, #0
 80028ea:	4619      	mov	r1, r3
 80028ec:	481e      	ldr	r0, [pc, #120]	; (8002968 <MX_TIM1_Init+0x130>)
 80028ee:	f7ff f84d 	bl	800198c <HAL_TIM_PWM_ConfigChannel>
 80028f2:	4603      	mov	r3, r0
 80028f4:	2b00      	cmp	r3, #0
 80028f6:	d001      	beq.n	80028fc <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 80028f8:	f000 fc40 	bl	800317c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80028fc:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8002900:	2208      	movs	r2, #8
 8002902:	4619      	mov	r1, r3
 8002904:	4818      	ldr	r0, [pc, #96]	; (8002968 <MX_TIM1_Init+0x130>)
 8002906:	f7ff f841 	bl	800198c <HAL_TIM_PWM_ConfigChannel>
 800290a:	4603      	mov	r3, r0
 800290c:	2b00      	cmp	r3, #0
 800290e:	d001      	beq.n	8002914 <MX_TIM1_Init+0xdc>
  {
    Error_Handler();
 8002910:	f000 fc34 	bl	800317c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8002914:	2300      	movs	r3, #0
 8002916:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8002918:	2300      	movs	r3, #0
 800291a:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800291c:	2300      	movs	r3, #0
 800291e:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8002920:	2300      	movs	r3, #0
 8002922:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8002924:	2300      	movs	r3, #0
 8002926:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8002928:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800292c:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 800292e:	2300      	movs	r3, #0
 8002930:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8002932:	2300      	movs	r3, #0
 8002934:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8002936:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800293a:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 800293c:	2300      	movs	r3, #0
 800293e:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8002940:	2300      	movs	r3, #0
 8002942:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8002944:	1d3b      	adds	r3, r7, #4
 8002946:	4619      	mov	r1, r3
 8002948:	4807      	ldr	r0, [pc, #28]	; (8002968 <MX_TIM1_Init+0x130>)
 800294a:	f7ff fd4d 	bl	80023e8 <HAL_TIMEx_ConfigBreakDeadTime>
 800294e:	4603      	mov	r3, r0
 8002950:	2b00      	cmp	r3, #0
 8002952:	d001      	beq.n	8002958 <MX_TIM1_Init+0x120>
  {
    Error_Handler();
 8002954:	f000 fc12 	bl	800317c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8002958:	4803      	ldr	r0, [pc, #12]	; (8002968 <MX_TIM1_Init+0x130>)
 800295a:	f000 fcdb 	bl	8003314 <HAL_TIM_MspPostInit>

}
 800295e:	bf00      	nop
 8002960:	3758      	adds	r7, #88	; 0x58
 8002962:	46bd      	mov	sp, r7
 8002964:	bd80      	pop	{r7, pc}
 8002966:	bf00      	nop
 8002968:	24000134 	.word	0x24000134
 800296c:	40010000 	.word	0x40010000

08002970 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8002970:	b580      	push	{r7, lr}
 8002972:	b08a      	sub	sp, #40	; 0x28
 8002974:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002976:	f107 031c 	add.w	r3, r7, #28
 800297a:	2200      	movs	r2, #0
 800297c:	601a      	str	r2, [r3, #0]
 800297e:	605a      	str	r2, [r3, #4]
 8002980:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002982:	463b      	mov	r3, r7
 8002984:	2200      	movs	r2, #0
 8002986:	601a      	str	r2, [r3, #0]
 8002988:	605a      	str	r2, [r3, #4]
 800298a:	609a      	str	r2, [r3, #8]
 800298c:	60da      	str	r2, [r3, #12]
 800298e:	611a      	str	r2, [r3, #16]
 8002990:	615a      	str	r2, [r3, #20]
 8002992:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8002994:	4b22      	ldr	r3, [pc, #136]	; (8002a20 <MX_TIM2_Init+0xb0>)
 8002996:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800299a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 5;
 800299c:	4b20      	ldr	r3, [pc, #128]	; (8002a20 <MX_TIM2_Init+0xb0>)
 800299e:	2205      	movs	r2, #5
 80029a0:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80029a2:	4b1f      	ldr	r3, [pc, #124]	; (8002a20 <MX_TIM2_Init+0xb0>)
 80029a4:	2200      	movs	r2, #0
 80029a6:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 699;
 80029a8:	4b1d      	ldr	r3, [pc, #116]	; (8002a20 <MX_TIM2_Init+0xb0>)
 80029aa:	f240 22bb 	movw	r2, #699	; 0x2bb
 80029ae:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80029b0:	4b1b      	ldr	r3, [pc, #108]	; (8002a20 <MX_TIM2_Init+0xb0>)
 80029b2:	2200      	movs	r2, #0
 80029b4:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80029b6:	4b1a      	ldr	r3, [pc, #104]	; (8002a20 <MX_TIM2_Init+0xb0>)
 80029b8:	2280      	movs	r2, #128	; 0x80
 80029ba:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80029bc:	4818      	ldr	r0, [pc, #96]	; (8002a20 <MX_TIM2_Init+0xb0>)
 80029be:	f7fe ff61 	bl	8001884 <HAL_TIM_PWM_Init>
 80029c2:	4603      	mov	r3, r0
 80029c4:	2b00      	cmp	r3, #0
 80029c6:	d001      	beq.n	80029cc <MX_TIM2_Init+0x5c>
  {
    Error_Handler();
 80029c8:	f000 fbd8 	bl	800317c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80029cc:	2300      	movs	r3, #0
 80029ce:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80029d0:	2300      	movs	r3, #0
 80029d2:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80029d4:	f107 031c 	add.w	r3, r7, #28
 80029d8:	4619      	mov	r1, r3
 80029da:	4811      	ldr	r0, [pc, #68]	; (8002a20 <MX_TIM2_Init+0xb0>)
 80029dc:	f7ff fc7c 	bl	80022d8 <HAL_TIMEx_MasterConfigSynchronization>
 80029e0:	4603      	mov	r3, r0
 80029e2:	2b00      	cmp	r3, #0
 80029e4:	d001      	beq.n	80029ea <MX_TIM2_Init+0x7a>
  {
    Error_Handler();
 80029e6:	f000 fbc9 	bl	800317c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80029ea:	2360      	movs	r3, #96	; 0x60
 80029ec:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 80029ee:	2300      	movs	r3, #0
 80029f0:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80029f2:	2300      	movs	r3, #0
 80029f4:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80029f6:	2300      	movs	r3, #0
 80029f8:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80029fa:	463b      	mov	r3, r7
 80029fc:	2200      	movs	r2, #0
 80029fe:	4619      	mov	r1, r3
 8002a00:	4807      	ldr	r0, [pc, #28]	; (8002a20 <MX_TIM2_Init+0xb0>)
 8002a02:	f7fe ffc3 	bl	800198c <HAL_TIM_PWM_ConfigChannel>
 8002a06:	4603      	mov	r3, r0
 8002a08:	2b00      	cmp	r3, #0
 8002a0a:	d001      	beq.n	8002a10 <MX_TIM2_Init+0xa0>
  {
    Error_Handler();
 8002a0c:	f000 fbb6 	bl	800317c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8002a10:	4803      	ldr	r0, [pc, #12]	; (8002a20 <MX_TIM2_Init+0xb0>)
 8002a12:	f000 fc7f 	bl	8003314 <HAL_TIM_MspPostInit>

}
 8002a16:	bf00      	nop
 8002a18:	3728      	adds	r7, #40	; 0x28
 8002a1a:	46bd      	mov	sp, r7
 8002a1c:	bd80      	pop	{r7, pc}
 8002a1e:	bf00      	nop
 8002a20:	24000174 	.word	0x24000174

08002a24 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8002a24:	b580      	push	{r7, lr}
 8002a26:	b08a      	sub	sp, #40	; 0x28
 8002a28:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002a2a:	f107 031c 	add.w	r3, r7, #28
 8002a2e:	2200      	movs	r2, #0
 8002a30:	601a      	str	r2, [r3, #0]
 8002a32:	605a      	str	r2, [r3, #4]
 8002a34:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002a36:	463b      	mov	r3, r7
 8002a38:	2200      	movs	r2, #0
 8002a3a:	601a      	str	r2, [r3, #0]
 8002a3c:	605a      	str	r2, [r3, #4]
 8002a3e:	609a      	str	r2, [r3, #8]
 8002a40:	60da      	str	r2, [r3, #12]
 8002a42:	611a      	str	r2, [r3, #16]
 8002a44:	615a      	str	r2, [r3, #20]
 8002a46:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8002a48:	4b21      	ldr	r3, [pc, #132]	; (8002ad0 <MX_TIM4_Init+0xac>)
 8002a4a:	4a22      	ldr	r2, [pc, #136]	; (8002ad4 <MX_TIM4_Init+0xb0>)
 8002a4c:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 5;
 8002a4e:	4b20      	ldr	r3, [pc, #128]	; (8002ad0 <MX_TIM4_Init+0xac>)
 8002a50:	2205      	movs	r2, #5
 8002a52:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002a54:	4b1e      	ldr	r3, [pc, #120]	; (8002ad0 <MX_TIM4_Init+0xac>)
 8002a56:	2200      	movs	r2, #0
 8002a58:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 699;
 8002a5a:	4b1d      	ldr	r3, [pc, #116]	; (8002ad0 <MX_TIM4_Init+0xac>)
 8002a5c:	f240 22bb 	movw	r2, #699	; 0x2bb
 8002a60:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002a62:	4b1b      	ldr	r3, [pc, #108]	; (8002ad0 <MX_TIM4_Init+0xac>)
 8002a64:	2200      	movs	r2, #0
 8002a66:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8002a68:	4b19      	ldr	r3, [pc, #100]	; (8002ad0 <MX_TIM4_Init+0xac>)
 8002a6a:	2280      	movs	r2, #128	; 0x80
 8002a6c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8002a6e:	4818      	ldr	r0, [pc, #96]	; (8002ad0 <MX_TIM4_Init+0xac>)
 8002a70:	f7fe ff08 	bl	8001884 <HAL_TIM_PWM_Init>
 8002a74:	4603      	mov	r3, r0
 8002a76:	2b00      	cmp	r3, #0
 8002a78:	d001      	beq.n	8002a7e <MX_TIM4_Init+0x5a>
  {
    Error_Handler();
 8002a7a:	f000 fb7f 	bl	800317c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002a7e:	2300      	movs	r3, #0
 8002a80:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002a82:	2300      	movs	r3, #0
 8002a84:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8002a86:	f107 031c 	add.w	r3, r7, #28
 8002a8a:	4619      	mov	r1, r3
 8002a8c:	4810      	ldr	r0, [pc, #64]	; (8002ad0 <MX_TIM4_Init+0xac>)
 8002a8e:	f7ff fc23 	bl	80022d8 <HAL_TIMEx_MasterConfigSynchronization>
 8002a92:	4603      	mov	r3, r0
 8002a94:	2b00      	cmp	r3, #0
 8002a96:	d001      	beq.n	8002a9c <MX_TIM4_Init+0x78>
  {
    Error_Handler();
 8002a98:	f000 fb70 	bl	800317c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002a9c:	2360      	movs	r3, #96	; 0x60
 8002a9e:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8002aa0:	2300      	movs	r3, #0
 8002aa2:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002aa4:	2300      	movs	r3, #0
 8002aa6:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002aa8:	2300      	movs	r3, #0
 8002aaa:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002aac:	463b      	mov	r3, r7
 8002aae:	2200      	movs	r2, #0
 8002ab0:	4619      	mov	r1, r3
 8002ab2:	4807      	ldr	r0, [pc, #28]	; (8002ad0 <MX_TIM4_Init+0xac>)
 8002ab4:	f7fe ff6a 	bl	800198c <HAL_TIM_PWM_ConfigChannel>
 8002ab8:	4603      	mov	r3, r0
 8002aba:	2b00      	cmp	r3, #0
 8002abc:	d001      	beq.n	8002ac2 <MX_TIM4_Init+0x9e>
  {
    Error_Handler();
 8002abe:	f000 fb5d 	bl	800317c <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8002ac2:	4803      	ldr	r0, [pc, #12]	; (8002ad0 <MX_TIM4_Init+0xac>)
 8002ac4:	f000 fc26 	bl	8003314 <HAL_TIM_MspPostInit>

}
 8002ac8:	bf00      	nop
 8002aca:	3728      	adds	r7, #40	; 0x28
 8002acc:	46bd      	mov	sp, r7
 8002ace:	bd80      	pop	{r7, pc}
 8002ad0:	24000074 	.word	0x24000074
 8002ad4:	40000800 	.word	0x40000800

08002ad8 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 8002ad8:	b580      	push	{r7, lr}
 8002ada:	b08a      	sub	sp, #40	; 0x28
 8002adc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002ade:	f107 031c 	add.w	r3, r7, #28
 8002ae2:	2200      	movs	r2, #0
 8002ae4:	601a      	str	r2, [r3, #0]
 8002ae6:	605a      	str	r2, [r3, #4]
 8002ae8:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002aea:	463b      	mov	r3, r7
 8002aec:	2200      	movs	r2, #0
 8002aee:	601a      	str	r2, [r3, #0]
 8002af0:	605a      	str	r2, [r3, #4]
 8002af2:	609a      	str	r2, [r3, #8]
 8002af4:	60da      	str	r2, [r3, #12]
 8002af6:	611a      	str	r2, [r3, #16]
 8002af8:	615a      	str	r2, [r3, #20]
 8002afa:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8002afc:	4b21      	ldr	r3, [pc, #132]	; (8002b84 <MX_TIM5_Init+0xac>)
 8002afe:	4a22      	ldr	r2, [pc, #136]	; (8002b88 <MX_TIM5_Init+0xb0>)
 8002b00:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 5;
 8002b02:	4b20      	ldr	r3, [pc, #128]	; (8002b84 <MX_TIM5_Init+0xac>)
 8002b04:	2205      	movs	r2, #5
 8002b06:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002b08:	4b1e      	ldr	r3, [pc, #120]	; (8002b84 <MX_TIM5_Init+0xac>)
 8002b0a:	2200      	movs	r2, #0
 8002b0c:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 699;
 8002b0e:	4b1d      	ldr	r3, [pc, #116]	; (8002b84 <MX_TIM5_Init+0xac>)
 8002b10:	f240 22bb 	movw	r2, #699	; 0x2bb
 8002b14:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002b16:	4b1b      	ldr	r3, [pc, #108]	; (8002b84 <MX_TIM5_Init+0xac>)
 8002b18:	2200      	movs	r2, #0
 8002b1a:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8002b1c:	4b19      	ldr	r3, [pc, #100]	; (8002b84 <MX_TIM5_Init+0xac>)
 8002b1e:	2280      	movs	r2, #128	; 0x80
 8002b20:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim5) != HAL_OK)
 8002b22:	4818      	ldr	r0, [pc, #96]	; (8002b84 <MX_TIM5_Init+0xac>)
 8002b24:	f7fe feae 	bl	8001884 <HAL_TIM_PWM_Init>
 8002b28:	4603      	mov	r3, r0
 8002b2a:	2b00      	cmp	r3, #0
 8002b2c:	d001      	beq.n	8002b32 <MX_TIM5_Init+0x5a>
  {
    Error_Handler();
 8002b2e:	f000 fb25 	bl	800317c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002b32:	2300      	movs	r3, #0
 8002b34:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002b36:	2300      	movs	r3, #0
 8002b38:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8002b3a:	f107 031c 	add.w	r3, r7, #28
 8002b3e:	4619      	mov	r1, r3
 8002b40:	4810      	ldr	r0, [pc, #64]	; (8002b84 <MX_TIM5_Init+0xac>)
 8002b42:	f7ff fbc9 	bl	80022d8 <HAL_TIMEx_MasterConfigSynchronization>
 8002b46:	4603      	mov	r3, r0
 8002b48:	2b00      	cmp	r3, #0
 8002b4a:	d001      	beq.n	8002b50 <MX_TIM5_Init+0x78>
  {
    Error_Handler();
 8002b4c:	f000 fb16 	bl	800317c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002b50:	2360      	movs	r3, #96	; 0x60
 8002b52:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8002b54:	2300      	movs	r3, #0
 8002b56:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002b58:	2300      	movs	r3, #0
 8002b5a:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002b5c:	2300      	movs	r3, #0
 8002b5e:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8002b60:	463b      	mov	r3, r7
 8002b62:	2204      	movs	r2, #4
 8002b64:	4619      	mov	r1, r3
 8002b66:	4807      	ldr	r0, [pc, #28]	; (8002b84 <MX_TIM5_Init+0xac>)
 8002b68:	f7fe ff10 	bl	800198c <HAL_TIM_PWM_ConfigChannel>
 8002b6c:	4603      	mov	r3, r0
 8002b6e:	2b00      	cmp	r3, #0
 8002b70:	d001      	beq.n	8002b76 <MX_TIM5_Init+0x9e>
  {
    Error_Handler();
 8002b72:	f000 fb03 	bl	800317c <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */
  HAL_TIM_MspPostInit(&htim5);
 8002b76:	4803      	ldr	r0, [pc, #12]	; (8002b84 <MX_TIM5_Init+0xac>)
 8002b78:	f000 fbcc 	bl	8003314 <HAL_TIM_MspPostInit>

}
 8002b7c:	bf00      	nop
 8002b7e:	3728      	adds	r7, #40	; 0x28
 8002b80:	46bd      	mov	sp, r7
 8002b82:	bd80      	pop	{r7, pc}
 8002b84:	240000f4 	.word	0x240000f4
 8002b88:	40000c00 	.word	0x40000c00

08002b8c <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 8002b8c:	b580      	push	{r7, lr}
 8002b8e:	b096      	sub	sp, #88	; 0x58
 8002b90:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002b92:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8002b96:	2200      	movs	r2, #0
 8002b98:	601a      	str	r2, [r3, #0]
 8002b9a:	605a      	str	r2, [r3, #4]
 8002b9c:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002b9e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8002ba2:	2200      	movs	r2, #0
 8002ba4:	601a      	str	r2, [r3, #0]
 8002ba6:	605a      	str	r2, [r3, #4]
 8002ba8:	609a      	str	r2, [r3, #8]
 8002baa:	60da      	str	r2, [r3, #12]
 8002bac:	611a      	str	r2, [r3, #16]
 8002bae:	615a      	str	r2, [r3, #20]
 8002bb0:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8002bb2:	1d3b      	adds	r3, r7, #4
 8002bb4:	222c      	movs	r2, #44	; 0x2c
 8002bb6:	2100      	movs	r1, #0
 8002bb8:	4618      	mov	r0, r3
 8002bba:	f000 fe03 	bl	80037c4 <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8002bbe:	4b38      	ldr	r3, [pc, #224]	; (8002ca0 <MX_TIM8_Init+0x114>)
 8002bc0:	4a38      	ldr	r2, [pc, #224]	; (8002ca4 <MX_TIM8_Init+0x118>)
 8002bc2:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 8002bc4:	4b36      	ldr	r3, [pc, #216]	; (8002ca0 <MX_TIM8_Init+0x114>)
 8002bc6:	2200      	movs	r2, #0
 8002bc8:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002bca:	4b35      	ldr	r3, [pc, #212]	; (8002ca0 <MX_TIM8_Init+0x114>)
 8002bcc:	2200      	movs	r2, #0
 8002bce:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 0;
 8002bd0:	4b33      	ldr	r3, [pc, #204]	; (8002ca0 <MX_TIM8_Init+0x114>)
 8002bd2:	2200      	movs	r2, #0
 8002bd4:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002bd6:	4b32      	ldr	r3, [pc, #200]	; (8002ca0 <MX_TIM8_Init+0x114>)
 8002bd8:	2200      	movs	r2, #0
 8002bda:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8002bdc:	4b30      	ldr	r3, [pc, #192]	; (8002ca0 <MX_TIM8_Init+0x114>)
 8002bde:	2200      	movs	r2, #0
 8002be0:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002be2:	4b2f      	ldr	r3, [pc, #188]	; (8002ca0 <MX_TIM8_Init+0x114>)
 8002be4:	2200      	movs	r2, #0
 8002be6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 8002be8:	482d      	ldr	r0, [pc, #180]	; (8002ca0 <MX_TIM8_Init+0x114>)
 8002bea:	f7fe fe4b 	bl	8001884 <HAL_TIM_PWM_Init>
 8002bee:	4603      	mov	r3, r0
 8002bf0:	2b00      	cmp	r3, #0
 8002bf2:	d001      	beq.n	8002bf8 <MX_TIM8_Init+0x6c>
  {
    Error_Handler();
 8002bf4:	f000 fac2 	bl	800317c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002bf8:	2300      	movs	r3, #0
 8002bfa:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8002bfc:	2300      	movs	r3, #0
 8002bfe:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002c00:	2300      	movs	r3, #0
 8002c02:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8002c04:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8002c08:	4619      	mov	r1, r3
 8002c0a:	4825      	ldr	r0, [pc, #148]	; (8002ca0 <MX_TIM8_Init+0x114>)
 8002c0c:	f7ff fb64 	bl	80022d8 <HAL_TIMEx_MasterConfigSynchronization>
 8002c10:	4603      	mov	r3, r0
 8002c12:	2b00      	cmp	r3, #0
 8002c14:	d001      	beq.n	8002c1a <MX_TIM8_Init+0x8e>
  {
    Error_Handler();
 8002c16:	f000 fab1 	bl	800317c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002c1a:	2360      	movs	r3, #96	; 0x60
 8002c1c:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 0;
 8002c1e:	2300      	movs	r3, #0
 8002c20:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002c22:	2300      	movs	r3, #0
 8002c24:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8002c26:	2300      	movs	r3, #0
 8002c28:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002c2a:	2300      	movs	r3, #0
 8002c2c:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8002c2e:	2300      	movs	r3, #0
 8002c30:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8002c32:	2300      	movs	r3, #0
 8002c34:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002c36:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8002c3a:	2200      	movs	r2, #0
 8002c3c:	4619      	mov	r1, r3
 8002c3e:	4818      	ldr	r0, [pc, #96]	; (8002ca0 <MX_TIM8_Init+0x114>)
 8002c40:	f7fe fea4 	bl	800198c <HAL_TIM_PWM_ConfigChannel>
 8002c44:	4603      	mov	r3, r0
 8002c46:	2b00      	cmp	r3, #0
 8002c48:	d001      	beq.n	8002c4e <MX_TIM8_Init+0xc2>
  {
    Error_Handler();
 8002c4a:	f000 fa97 	bl	800317c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8002c4e:	2300      	movs	r3, #0
 8002c50:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8002c52:	2300      	movs	r3, #0
 8002c54:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8002c56:	2300      	movs	r3, #0
 8002c58:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8002c5a:	2300      	movs	r3, #0
 8002c5c:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8002c5e:	2300      	movs	r3, #0
 8002c60:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8002c62:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002c66:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8002c68:	2300      	movs	r3, #0
 8002c6a:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8002c6c:	2300      	movs	r3, #0
 8002c6e:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8002c70:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002c74:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 8002c76:	2300      	movs	r3, #0
 8002c78:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8002c7a:	2300      	movs	r3, #0
 8002c7c:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 8002c7e:	1d3b      	adds	r3, r7, #4
 8002c80:	4619      	mov	r1, r3
 8002c82:	4807      	ldr	r0, [pc, #28]	; (8002ca0 <MX_TIM8_Init+0x114>)
 8002c84:	f7ff fbb0 	bl	80023e8 <HAL_TIMEx_ConfigBreakDeadTime>
 8002c88:	4603      	mov	r3, r0
 8002c8a:	2b00      	cmp	r3, #0
 8002c8c:	d001      	beq.n	8002c92 <MX_TIM8_Init+0x106>
  {
    Error_Handler();
 8002c8e:	f000 fa75 	bl	800317c <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */
  HAL_TIM_MspPostInit(&htim8);
 8002c92:	4803      	ldr	r0, [pc, #12]	; (8002ca0 <MX_TIM8_Init+0x114>)
 8002c94:	f000 fb3e 	bl	8003314 <HAL_TIM_MspPostInit>

}
 8002c98:	bf00      	nop
 8002c9a:	3758      	adds	r7, #88	; 0x58
 8002c9c:	46bd      	mov	sp, r7
 8002c9e:	bd80      	pop	{r7, pc}
 8002ca0:	24000034 	.word	0x24000034
 8002ca4:	40010400 	.word	0x40010400

08002ca8 <MX_TIM12_Init>:
  * @brief TIM12 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM12_Init(void)
{
 8002ca8:	b580      	push	{r7, lr}
 8002caa:	b088      	sub	sp, #32
 8002cac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM12_Init 0 */

  /* USER CODE END TIM12_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8002cae:	1d3b      	adds	r3, r7, #4
 8002cb0:	2200      	movs	r2, #0
 8002cb2:	601a      	str	r2, [r3, #0]
 8002cb4:	605a      	str	r2, [r3, #4]
 8002cb6:	609a      	str	r2, [r3, #8]
 8002cb8:	60da      	str	r2, [r3, #12]
 8002cba:	611a      	str	r2, [r3, #16]
 8002cbc:	615a      	str	r2, [r3, #20]
 8002cbe:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM12_Init 1 */

  /* USER CODE END TIM12_Init 1 */
  htim12.Instance = TIM12;
 8002cc0:	4b1a      	ldr	r3, [pc, #104]	; (8002d2c <MX_TIM12_Init+0x84>)
 8002cc2:	4a1b      	ldr	r2, [pc, #108]	; (8002d30 <MX_TIM12_Init+0x88>)
 8002cc4:	601a      	str	r2, [r3, #0]
  htim12.Init.Prescaler = 5;
 8002cc6:	4b19      	ldr	r3, [pc, #100]	; (8002d2c <MX_TIM12_Init+0x84>)
 8002cc8:	2205      	movs	r2, #5
 8002cca:	605a      	str	r2, [r3, #4]
  htim12.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002ccc:	4b17      	ldr	r3, [pc, #92]	; (8002d2c <MX_TIM12_Init+0x84>)
 8002cce:	2200      	movs	r2, #0
 8002cd0:	609a      	str	r2, [r3, #8]
  htim12.Init.Period = 3999;
 8002cd2:	4b16      	ldr	r3, [pc, #88]	; (8002d2c <MX_TIM12_Init+0x84>)
 8002cd4:	f640 729f 	movw	r2, #3999	; 0xf9f
 8002cd8:	60da      	str	r2, [r3, #12]
  htim12.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002cda:	4b14      	ldr	r3, [pc, #80]	; (8002d2c <MX_TIM12_Init+0x84>)
 8002cdc:	2200      	movs	r2, #0
 8002cde:	611a      	str	r2, [r3, #16]
  htim12.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8002ce0:	4b12      	ldr	r3, [pc, #72]	; (8002d2c <MX_TIM12_Init+0x84>)
 8002ce2:	2280      	movs	r2, #128	; 0x80
 8002ce4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim12) != HAL_OK)
 8002ce6:	4811      	ldr	r0, [pc, #68]	; (8002d2c <MX_TIM12_Init+0x84>)
 8002ce8:	f7fe fdcc 	bl	8001884 <HAL_TIM_PWM_Init>
 8002cec:	4603      	mov	r3, r0
 8002cee:	2b00      	cmp	r3, #0
 8002cf0:	d001      	beq.n	8002cf6 <MX_TIM12_Init+0x4e>
  {
    Error_Handler();
 8002cf2:	f000 fa43 	bl	800317c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002cf6:	2360      	movs	r3, #96	; 0x60
 8002cf8:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8002cfa:	2300      	movs	r3, #0
 8002cfc:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002cfe:	2300      	movs	r3, #0
 8002d00:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002d02:	2300      	movs	r3, #0
 8002d04:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim12, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002d06:	1d3b      	adds	r3, r7, #4
 8002d08:	2200      	movs	r2, #0
 8002d0a:	4619      	mov	r1, r3
 8002d0c:	4807      	ldr	r0, [pc, #28]	; (8002d2c <MX_TIM12_Init+0x84>)
 8002d0e:	f7fe fe3d 	bl	800198c <HAL_TIM_PWM_ConfigChannel>
 8002d12:	4603      	mov	r3, r0
 8002d14:	2b00      	cmp	r3, #0
 8002d16:	d001      	beq.n	8002d1c <MX_TIM12_Init+0x74>
  {
    Error_Handler();
 8002d18:	f000 fa30 	bl	800317c <Error_Handler>
  }
  /* USER CODE BEGIN TIM12_Init 2 */

  /* USER CODE END TIM12_Init 2 */
  HAL_TIM_MspPostInit(&htim12);
 8002d1c:	4803      	ldr	r0, [pc, #12]	; (8002d2c <MX_TIM12_Init+0x84>)
 8002d1e:	f000 faf9 	bl	8003314 <HAL_TIM_MspPostInit>

}
 8002d22:	bf00      	nop
 8002d24:	3720      	adds	r7, #32
 8002d26:	46bd      	mov	sp, r7
 8002d28:	bd80      	pop	{r7, pc}
 8002d2a:	bf00      	nop
 8002d2c:	240001b4 	.word	0x240001b4
 8002d30:	40001800 	.word	0x40001800

08002d34 <MX_TIM15_Init>:
  * @brief TIM15 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM15_Init(void)
{
 8002d34:	b580      	push	{r7, lr}
 8002d36:	b096      	sub	sp, #88	; 0x58
 8002d38:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM15_Init 0 */

  /* USER CODE END TIM15_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002d3a:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8002d3e:	2200      	movs	r2, #0
 8002d40:	601a      	str	r2, [r3, #0]
 8002d42:	605a      	str	r2, [r3, #4]
 8002d44:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002d46:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8002d4a:	2200      	movs	r2, #0
 8002d4c:	601a      	str	r2, [r3, #0]
 8002d4e:	605a      	str	r2, [r3, #4]
 8002d50:	609a      	str	r2, [r3, #8]
 8002d52:	60da      	str	r2, [r3, #12]
 8002d54:	611a      	str	r2, [r3, #16]
 8002d56:	615a      	str	r2, [r3, #20]
 8002d58:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8002d5a:	1d3b      	adds	r3, r7, #4
 8002d5c:	222c      	movs	r2, #44	; 0x2c
 8002d5e:	2100      	movs	r1, #0
 8002d60:	4618      	mov	r0, r3
 8002d62:	f000 fd2f 	bl	80037c4 <memset>

  /* USER CODE BEGIN TIM15_Init 1 */

  /* USER CODE END TIM15_Init 1 */
  htim15.Instance = TIM15;
 8002d66:	4b34      	ldr	r3, [pc, #208]	; (8002e38 <MX_TIM15_Init+0x104>)
 8002d68:	4a34      	ldr	r2, [pc, #208]	; (8002e3c <MX_TIM15_Init+0x108>)
 8002d6a:	601a      	str	r2, [r3, #0]
  htim15.Init.Prescaler = 5;
 8002d6c:	4b32      	ldr	r3, [pc, #200]	; (8002e38 <MX_TIM15_Init+0x104>)
 8002d6e:	2205      	movs	r2, #5
 8002d70:	605a      	str	r2, [r3, #4]
  htim15.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002d72:	4b31      	ldr	r3, [pc, #196]	; (8002e38 <MX_TIM15_Init+0x104>)
 8002d74:	2200      	movs	r2, #0
 8002d76:	609a      	str	r2, [r3, #8]
  htim15.Init.Period = 699;
 8002d78:	4b2f      	ldr	r3, [pc, #188]	; (8002e38 <MX_TIM15_Init+0x104>)
 8002d7a:	f240 22bb 	movw	r2, #699	; 0x2bb
 8002d7e:	60da      	str	r2, [r3, #12]
  htim15.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002d80:	4b2d      	ldr	r3, [pc, #180]	; (8002e38 <MX_TIM15_Init+0x104>)
 8002d82:	2200      	movs	r2, #0
 8002d84:	611a      	str	r2, [r3, #16]
  htim15.Init.RepetitionCounter = 0;
 8002d86:	4b2c      	ldr	r3, [pc, #176]	; (8002e38 <MX_TIM15_Init+0x104>)
 8002d88:	2200      	movs	r2, #0
 8002d8a:	615a      	str	r2, [r3, #20]
  htim15.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8002d8c:	4b2a      	ldr	r3, [pc, #168]	; (8002e38 <MX_TIM15_Init+0x104>)
 8002d8e:	2280      	movs	r2, #128	; 0x80
 8002d90:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim15) != HAL_OK)
 8002d92:	4829      	ldr	r0, [pc, #164]	; (8002e38 <MX_TIM15_Init+0x104>)
 8002d94:	f7fe fd76 	bl	8001884 <HAL_TIM_PWM_Init>
 8002d98:	4603      	mov	r3, r0
 8002d9a:	2b00      	cmp	r3, #0
 8002d9c:	d001      	beq.n	8002da2 <MX_TIM15_Init+0x6e>
  {
    Error_Handler();
 8002d9e:	f000 f9ed 	bl	800317c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002da2:	2300      	movs	r3, #0
 8002da4:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002da6:	2300      	movs	r3, #0
 8002da8:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim15, &sMasterConfig) != HAL_OK)
 8002daa:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8002dae:	4619      	mov	r1, r3
 8002db0:	4821      	ldr	r0, [pc, #132]	; (8002e38 <MX_TIM15_Init+0x104>)
 8002db2:	f7ff fa91 	bl	80022d8 <HAL_TIMEx_MasterConfigSynchronization>
 8002db6:	4603      	mov	r3, r0
 8002db8:	2b00      	cmp	r3, #0
 8002dba:	d001      	beq.n	8002dc0 <MX_TIM15_Init+0x8c>
  {
    Error_Handler();
 8002dbc:	f000 f9de 	bl	800317c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002dc0:	2360      	movs	r3, #96	; 0x60
 8002dc2:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 0;
 8002dc4:	2300      	movs	r3, #0
 8002dc6:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002dc8:	2300      	movs	r3, #0
 8002dca:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8002dcc:	2300      	movs	r3, #0
 8002dce:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002dd0:	2300      	movs	r3, #0
 8002dd2:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8002dd4:	2300      	movs	r3, #0
 8002dd6:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8002dd8:	2300      	movs	r3, #0
 8002dda:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim15, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002ddc:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8002de0:	2200      	movs	r2, #0
 8002de2:	4619      	mov	r1, r3
 8002de4:	4814      	ldr	r0, [pc, #80]	; (8002e38 <MX_TIM15_Init+0x104>)
 8002de6:	f7fe fdd1 	bl	800198c <HAL_TIM_PWM_ConfigChannel>
 8002dea:	4603      	mov	r3, r0
 8002dec:	2b00      	cmp	r3, #0
 8002dee:	d001      	beq.n	8002df4 <MX_TIM15_Init+0xc0>
  {
    Error_Handler();
 8002df0:	f000 f9c4 	bl	800317c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8002df4:	2300      	movs	r3, #0
 8002df6:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8002df8:	2300      	movs	r3, #0
 8002dfa:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8002dfc:	2300      	movs	r3, #0
 8002dfe:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8002e00:	2300      	movs	r3, #0
 8002e02:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8002e04:	2300      	movs	r3, #0
 8002e06:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8002e08:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002e0c:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8002e0e:	2300      	movs	r3, #0
 8002e10:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8002e12:	2300      	movs	r3, #0
 8002e14:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim15, &sBreakDeadTimeConfig) != HAL_OK)
 8002e16:	1d3b      	adds	r3, r7, #4
 8002e18:	4619      	mov	r1, r3
 8002e1a:	4807      	ldr	r0, [pc, #28]	; (8002e38 <MX_TIM15_Init+0x104>)
 8002e1c:	f7ff fae4 	bl	80023e8 <HAL_TIMEx_ConfigBreakDeadTime>
 8002e20:	4603      	mov	r3, r0
 8002e22:	2b00      	cmp	r3, #0
 8002e24:	d001      	beq.n	8002e2a <MX_TIM15_Init+0xf6>
  {
    Error_Handler();
 8002e26:	f000 f9a9 	bl	800317c <Error_Handler>
  }
  /* USER CODE BEGIN TIM15_Init 2 */

  /* USER CODE END TIM15_Init 2 */
  HAL_TIM_MspPostInit(&htim15);
 8002e2a:	4803      	ldr	r0, [pc, #12]	; (8002e38 <MX_TIM15_Init+0x104>)
 8002e2c:	f000 fa72 	bl	8003314 <HAL_TIM_MspPostInit>

}
 8002e30:	bf00      	nop
 8002e32:	3758      	adds	r7, #88	; 0x58
 8002e34:	46bd      	mov	sp, r7
 8002e36:	bd80      	pop	{r7, pc}
 8002e38:	240000b4 	.word	0x240000b4
 8002e3c:	40014000 	.word	0x40014000

08002e40 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002e40:	b580      	push	{r7, lr}
 8002e42:	b08e      	sub	sp, #56	; 0x38
 8002e44:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002e46:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002e4a:	2200      	movs	r2, #0
 8002e4c:	601a      	str	r2, [r3, #0]
 8002e4e:	605a      	str	r2, [r3, #4]
 8002e50:	609a      	str	r2, [r3, #8]
 8002e52:	60da      	str	r2, [r3, #12]
 8002e54:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8002e56:	4bbf      	ldr	r3, [pc, #764]	; (8003154 <MX_GPIO_Init+0x314>)
 8002e58:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002e5c:	4abd      	ldr	r2, [pc, #756]	; (8003154 <MX_GPIO_Init+0x314>)
 8002e5e:	f043 0310 	orr.w	r3, r3, #16
 8002e62:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002e66:	4bbb      	ldr	r3, [pc, #748]	; (8003154 <MX_GPIO_Init+0x314>)
 8002e68:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002e6c:	f003 0310 	and.w	r3, r3, #16
 8002e70:	623b      	str	r3, [r7, #32]
 8002e72:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002e74:	4bb7      	ldr	r3, [pc, #732]	; (8003154 <MX_GPIO_Init+0x314>)
 8002e76:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002e7a:	4ab6      	ldr	r2, [pc, #728]	; (8003154 <MX_GPIO_Init+0x314>)
 8002e7c:	f043 0304 	orr.w	r3, r3, #4
 8002e80:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002e84:	4bb3      	ldr	r3, [pc, #716]	; (8003154 <MX_GPIO_Init+0x314>)
 8002e86:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002e8a:	f003 0304 	and.w	r3, r3, #4
 8002e8e:	61fb      	str	r3, [r7, #28]
 8002e90:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8002e92:	4bb0      	ldr	r3, [pc, #704]	; (8003154 <MX_GPIO_Init+0x314>)
 8002e94:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002e98:	4aae      	ldr	r2, [pc, #696]	; (8003154 <MX_GPIO_Init+0x314>)
 8002e9a:	f043 0320 	orr.w	r3, r3, #32
 8002e9e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002ea2:	4bac      	ldr	r3, [pc, #688]	; (8003154 <MX_GPIO_Init+0x314>)
 8002ea4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002ea8:	f003 0320 	and.w	r3, r3, #32
 8002eac:	61bb      	str	r3, [r7, #24]
 8002eae:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8002eb0:	4ba8      	ldr	r3, [pc, #672]	; (8003154 <MX_GPIO_Init+0x314>)
 8002eb2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002eb6:	4aa7      	ldr	r2, [pc, #668]	; (8003154 <MX_GPIO_Init+0x314>)
 8002eb8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002ebc:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002ec0:	4ba4      	ldr	r3, [pc, #656]	; (8003154 <MX_GPIO_Init+0x314>)
 8002ec2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002ec6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002eca:	617b      	str	r3, [r7, #20]
 8002ecc:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002ece:	4ba1      	ldr	r3, [pc, #644]	; (8003154 <MX_GPIO_Init+0x314>)
 8002ed0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002ed4:	4a9f      	ldr	r2, [pc, #636]	; (8003154 <MX_GPIO_Init+0x314>)
 8002ed6:	f043 0301 	orr.w	r3, r3, #1
 8002eda:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002ede:	4b9d      	ldr	r3, [pc, #628]	; (8003154 <MX_GPIO_Init+0x314>)
 8002ee0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002ee4:	f003 0301 	and.w	r3, r3, #1
 8002ee8:	613b      	str	r3, [r7, #16]
 8002eea:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002eec:	4b99      	ldr	r3, [pc, #612]	; (8003154 <MX_GPIO_Init+0x314>)
 8002eee:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002ef2:	4a98      	ldr	r2, [pc, #608]	; (8003154 <MX_GPIO_Init+0x314>)
 8002ef4:	f043 0302 	orr.w	r3, r3, #2
 8002ef8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002efc:	4b95      	ldr	r3, [pc, #596]	; (8003154 <MX_GPIO_Init+0x314>)
 8002efe:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002f02:	f003 0302 	and.w	r3, r3, #2
 8002f06:	60fb      	str	r3, [r7, #12]
 8002f08:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8002f0a:	4b92      	ldr	r3, [pc, #584]	; (8003154 <MX_GPIO_Init+0x314>)
 8002f0c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002f10:	4a90      	ldr	r2, [pc, #576]	; (8003154 <MX_GPIO_Init+0x314>)
 8002f12:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002f16:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002f1a:	4b8e      	ldr	r3, [pc, #568]	; (8003154 <MX_GPIO_Init+0x314>)
 8002f1c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002f20:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002f24:	60bb      	str	r3, [r7, #8]
 8002f26:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002f28:	4b8a      	ldr	r3, [pc, #552]	; (8003154 <MX_GPIO_Init+0x314>)
 8002f2a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002f2e:	4a89      	ldr	r2, [pc, #548]	; (8003154 <MX_GPIO_Init+0x314>)
 8002f30:	f043 0308 	orr.w	r3, r3, #8
 8002f34:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002f38:	4b86      	ldr	r3, [pc, #536]	; (8003154 <MX_GPIO_Init+0x314>)
 8002f3a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002f3e:	f003 0308 	and.w	r3, r3, #8
 8002f42:	607b      	str	r3, [r7, #4]
 8002f44:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, M4_INB_Pin|Stepper5_EN_Pin|Stepper2_EN_Pin|Stepper1_EN_Pin, GPIO_PIN_RESET);
 8002f46:	2200      	movs	r2, #0
 8002f48:	f248 4109 	movw	r1, #33801	; 0x8409
 8002f4c:	4882      	ldr	r0, [pc, #520]	; (8003158 <MX_GPIO_Init+0x318>)
 8002f4e:	f7fd fd21 	bl	8000994 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, M2_INB_Pin|INA_Pin|GPIO_PIN_7, GPIO_PIN_RESET);
 8002f52:	2200      	movs	r2, #0
 8002f54:	21c1      	movs	r1, #193	; 0xc1
 8002f56:	4881      	ldr	r0, [pc, #516]	; (800315c <MX_GPIO_Init+0x31c>)
 8002f58:	f7fd fd1c 	bl	8000994 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, M4_EN_Pin|Stepper3_EN_Pin|GPIO_PIN_7|Stepper3_DIR_Pin, GPIO_PIN_RESET);
 8002f5c:	2200      	movs	r2, #0
 8002f5e:	f44f 71d4 	mov.w	r1, #424	; 0x1a8
 8002f62:	487f      	ldr	r0, [pc, #508]	; (8003160 <MX_GPIO_Init+0x320>)
 8002f64:	f7fd fd16 	bl	8000994 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, Stepper4_EN_Pin|Stepper6_DIR_Pin|Stepper4_DIR_Pin, GPIO_PIN_RESET);
 8002f68:	2200      	movs	r2, #0
 8002f6a:	f240 4114 	movw	r1, #1044	; 0x414
 8002f6e:	487d      	ldr	r0, [pc, #500]	; (8003164 <MX_GPIO_Init+0x324>)
 8002f70:	f7fd fd10 	bl	8000994 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, Stepper6_EN_Pin|GPIO_PIN_4|INB_Pin, GPIO_PIN_RESET);
 8002f74:	2200      	movs	r2, #0
 8002f76:	2191      	movs	r1, #145	; 0x91
 8002f78:	487b      	ldr	r0, [pc, #492]	; (8003168 <MX_GPIO_Init+0x328>)
 8002f7a:	f7fd fd0b 	bl	8000994 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, M1_EN_Pin|M1_INB_Pin|M1_INA_Pin|GPIO_PIN_14, GPIO_PIN_RESET);
 8002f7e:	2200      	movs	r2, #0
 8002f80:	f245 2101 	movw	r1, #20993	; 0x5201
 8002f84:	4879      	ldr	r0, [pc, #484]	; (800316c <MX_GPIO_Init+0x32c>)
 8002f86:	f7fd fd05 	bl	8000994 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, Stepper5_DIR_Pin|M2_EN_Pin|M2_INA_Pin|M3_EN_Pin 
 8002f8a:	2200      	movs	r2, #0
 8002f8c:	f640 01f3 	movw	r1, #2291	; 0x8f3
 8002f90:	4877      	ldr	r0, [pc, #476]	; (8003170 <MX_GPIO_Init+0x330>)
 8002f92:	f7fd fcff 	bl	8000994 <HAL_GPIO_WritePin>
                          |M4_INA_Pin|M3_INB_Pin|M3_INA_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : M4_INB_Pin Stepper5_EN_Pin Stepper2_EN_Pin Stepper1_EN_Pin */
  GPIO_InitStruct.Pin = M4_INB_Pin|Stepper5_EN_Pin|Stepper2_EN_Pin|Stepper1_EN_Pin;
 8002f96:	f248 4309 	movw	r3, #33801	; 0x8409
 8002f9a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002f9c:	2301      	movs	r3, #1
 8002f9e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002fa0:	2300      	movs	r3, #0
 8002fa2:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002fa4:	2300      	movs	r3, #0
 8002fa6:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002fa8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002fac:	4619      	mov	r1, r3
 8002fae:	486a      	ldr	r0, [pc, #424]	; (8003158 <MX_GPIO_Init+0x318>)
 8002fb0:	f7fd fb40 	bl	8000634 <HAL_GPIO_Init>

  /*Configure GPIO pin : Button_Pin */
  GPIO_InitStruct.Pin = Button_Pin;
 8002fb4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002fb8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002fba:	2300      	movs	r3, #0
 8002fbc:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002fbe:	2300      	movs	r3, #0
 8002fc0:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(Button_GPIO_Port, &GPIO_InitStruct);
 8002fc2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002fc6:	4619      	mov	r1, r3
 8002fc8:	4865      	ldr	r0, [pc, #404]	; (8003160 <MX_GPIO_Init+0x320>)
 8002fca:	f7fd fb33 	bl	8000634 <HAL_GPIO_Init>

  /*Configure GPIO pins : M2_INB_Pin INA_Pin PF7 */
  GPIO_InitStruct.Pin = M2_INB_Pin|INA_Pin|GPIO_PIN_7;
 8002fce:	23c1      	movs	r3, #193	; 0xc1
 8002fd0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002fd2:	2301      	movs	r3, #1
 8002fd4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002fd6:	2300      	movs	r3, #0
 8002fd8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002fda:	2300      	movs	r3, #0
 8002fdc:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8002fde:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002fe2:	4619      	mov	r1, r3
 8002fe4:	485d      	ldr	r0, [pc, #372]	; (800315c <MX_GPIO_Init+0x31c>)
 8002fe6:	f7fd fb25 	bl	8000634 <HAL_GPIO_Init>

  /*Configure GPIO pins : M4_EN_Pin Stepper3_EN_Pin Stepper3_DIR_Pin */
  GPIO_InitStruct.Pin = M4_EN_Pin|Stepper3_EN_Pin|Stepper3_DIR_Pin;
 8002fea:	f44f 7394 	mov.w	r3, #296	; 0x128
 8002fee:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002ff0:	2301      	movs	r3, #1
 8002ff2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ff4:	2300      	movs	r3, #0
 8002ff6:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002ff8:	2300      	movs	r3, #0
 8002ffa:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002ffc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003000:	4619      	mov	r1, r3
 8003002:	4857      	ldr	r0, [pc, #348]	; (8003160 <MX_GPIO_Init+0x320>)
 8003004:	f7fd fb16 	bl	8000634 <HAL_GPIO_Init>

  /*Configure GPIO pins : Stepper4_EN_Pin Stepper6_DIR_Pin Stepper4_DIR_Pin */
  GPIO_InitStruct.Pin = Stepper4_EN_Pin|Stepper6_DIR_Pin|Stepper4_DIR_Pin;
 8003008:	f240 4314 	movw	r3, #1044	; 0x414
 800300c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800300e:	2301      	movs	r3, #1
 8003010:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003012:	2300      	movs	r3, #0
 8003014:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003016:	2300      	movs	r3, #0
 8003018:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800301a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800301e:	4619      	mov	r1, r3
 8003020:	4850      	ldr	r0, [pc, #320]	; (8003164 <MX_GPIO_Init+0x324>)
 8003022:	f7fd fb07 	bl	8000634 <HAL_GPIO_Init>

  /*Configure GPIO pins : Stepper6_EN_Pin INB_Pin */
  GPIO_InitStruct.Pin = Stepper6_EN_Pin|INB_Pin;
 8003026:	2381      	movs	r3, #129	; 0x81
 8003028:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800302a:	2301      	movs	r3, #1
 800302c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800302e:	2300      	movs	r3, #0
 8003030:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003032:	2300      	movs	r3, #0
 8003034:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003036:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800303a:	4619      	mov	r1, r3
 800303c:	484a      	ldr	r0, [pc, #296]	; (8003168 <MX_GPIO_Init+0x328>)
 800303e:	f7fd faf9 	bl	8000634 <HAL_GPIO_Init>

  /*Configure GPIO pins : M1_EN_Pin M1_INB_Pin M1_INA_Pin PG14 */
  GPIO_InitStruct.Pin = M1_EN_Pin|M1_INB_Pin|M1_INA_Pin|GPIO_PIN_14;
 8003042:	f245 2301 	movw	r3, #20993	; 0x5201
 8003046:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003048:	2301      	movs	r3, #1
 800304a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800304c:	2300      	movs	r3, #0
 800304e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003050:	2300      	movs	r3, #0
 8003052:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8003054:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003058:	4619      	mov	r1, r3
 800305a:	4844      	ldr	r0, [pc, #272]	; (800316c <MX_GPIO_Init+0x32c>)
 800305c:	f7fd faea 	bl	8000634 <HAL_GPIO_Init>

  /*Configure GPIO pins : Stepper1_HALL_1_Pin Stepper1_HALL_3_Pin */
  GPIO_InitStruct.Pin = Stepper1_HALL_1_Pin|Stepper1_HALL_3_Pin;
 8003060:	f44f 4310 	mov.w	r3, #36864	; 0x9000
 8003064:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8003066:	4b43      	ldr	r3, [pc, #268]	; (8003174 <MX_GPIO_Init+0x334>)
 8003068:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800306a:	2301      	movs	r3, #1
 800306c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800306e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003072:	4619      	mov	r1, r3
 8003074:	483c      	ldr	r0, [pc, #240]	; (8003168 <MX_GPIO_Init+0x328>)
 8003076:	f7fd fadd 	bl	8000634 <HAL_GPIO_Init>

  /*Configure GPIO pin : Stepper1_HALL_2_Pin */
  GPIO_InitStruct.Pin = Stepper1_HALL_2_Pin;
 800307a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800307e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8003080:	4b3d      	ldr	r3, [pc, #244]	; (8003178 <MX_GPIO_Init+0x338>)
 8003082:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003084:	2300      	movs	r3, #0
 8003086:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(Stepper1_HALL_2_GPIO_Port, &GPIO_InitStruct);
 8003088:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800308c:	4619      	mov	r1, r3
 800308e:	4836      	ldr	r0, [pc, #216]	; (8003168 <MX_GPIO_Init+0x328>)
 8003090:	f7fd fad0 	bl	8000634 <HAL_GPIO_Init>

  /*Configure GPIO pins : Stepper5_DIR_Pin M2_EN_Pin M2_INA_Pin M3_EN_Pin 
                           M4_INA_Pin M3_INB_Pin M3_INA_Pin */
  GPIO_InitStruct.Pin = Stepper5_DIR_Pin|M2_EN_Pin|M2_INA_Pin|M3_EN_Pin 
 8003094:	f640 03f3 	movw	r3, #2291	; 0x8f3
 8003098:	627b      	str	r3, [r7, #36]	; 0x24
                          |M4_INA_Pin|M3_INB_Pin|M3_INA_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800309a:	2301      	movs	r3, #1
 800309c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800309e:	2300      	movs	r3, #0
 80030a0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80030a2:	2300      	movs	r3, #0
 80030a4:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80030a6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80030aa:	4619      	mov	r1, r3
 80030ac:	4830      	ldr	r0, [pc, #192]	; (8003170 <MX_GPIO_Init+0x330>)
 80030ae:	f7fd fac1 	bl	8000634 <HAL_GPIO_Init>

  /*Configure GPIO pin : HALL_4_Pin */
  GPIO_InitStruct.Pin = HALL_4_Pin;
 80030b2:	2310      	movs	r3, #16
 80030b4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80030b6:	4b2f      	ldr	r3, [pc, #188]	; (8003174 <MX_GPIO_Init+0x334>)
 80030b8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80030ba:	2301      	movs	r3, #1
 80030bc:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(HALL_4_GPIO_Port, &GPIO_InitStruct);
 80030be:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80030c2:	4619      	mov	r1, r3
 80030c4:	4829      	ldr	r0, [pc, #164]	; (800316c <MX_GPIO_Init+0x32c>)
 80030c6:	f7fd fab5 	bl	8000634 <HAL_GPIO_Init>

  /*Configure GPIO pins : HALL_5_Pin HALL_6_Pin HALL_7_Pin */
  GPIO_InitStruct.Pin = HALL_5_Pin|HALL_6_Pin|HALL_7_Pin;
 80030ca:	23e0      	movs	r3, #224	; 0xe0
 80030cc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80030ce:	4b2a      	ldr	r3, [pc, #168]	; (8003178 <MX_GPIO_Init+0x338>)
 80030d0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80030d2:	2301      	movs	r3, #1
 80030d4:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80030d6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80030da:	4619      	mov	r1, r3
 80030dc:	4823      	ldr	r0, [pc, #140]	; (800316c <MX_GPIO_Init+0x32c>)
 80030de:	f7fd faa9 	bl	8000634 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 80030e2:	2380      	movs	r3, #128	; 0x80
 80030e4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80030e6:	2301      	movs	r3, #1
 80030e8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80030ea:	2300      	movs	r3, #0
 80030ec:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80030ee:	2303      	movs	r3, #3
 80030f0:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80030f2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80030f6:	4619      	mov	r1, r3
 80030f8:	4819      	ldr	r0, [pc, #100]	; (8003160 <MX_GPIO_Init+0x320>)
 80030fa:	f7fd fa9b 	bl	8000634 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 80030fe:	2310      	movs	r3, #16
 8003100:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003102:	2301      	movs	r3, #1
 8003104:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003106:	2300      	movs	r3, #0
 8003108:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800310a:	2303      	movs	r3, #3
 800310c:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800310e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003112:	4619      	mov	r1, r3
 8003114:	4814      	ldr	r0, [pc, #80]	; (8003168 <MX_GPIO_Init+0x328>)
 8003116:	f7fd fa8d 	bl	8000634 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI4_IRQn, 0, 0);
 800311a:	2200      	movs	r2, #0
 800311c:	2100      	movs	r1, #0
 800311e:	200a      	movs	r0, #10
 8003120:	f7fd fa53 	bl	80005ca <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 8003124:	200a      	movs	r0, #10
 8003126:	f7fd fa6a 	bl	80005fe <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 800312a:	2200      	movs	r2, #0
 800312c:	2100      	movs	r1, #0
 800312e:	2017      	movs	r0, #23
 8003130:	f7fd fa4b 	bl	80005ca <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8003134:	2017      	movs	r0, #23
 8003136:	f7fd fa62 	bl	80005fe <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 800313a:	2200      	movs	r2, #0
 800313c:	2100      	movs	r1, #0
 800313e:	2028      	movs	r0, #40	; 0x28
 8003140:	f7fd fa43 	bl	80005ca <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8003144:	2028      	movs	r0, #40	; 0x28
 8003146:	f7fd fa5a 	bl	80005fe <HAL_NVIC_EnableIRQ>

}
 800314a:	bf00      	nop
 800314c:	3738      	adds	r7, #56	; 0x38
 800314e:	46bd      	mov	sp, r7
 8003150:	bd80      	pop	{r7, pc}
 8003152:	bf00      	nop
 8003154:	58024400 	.word	0x58024400
 8003158:	58021000 	.word	0x58021000
 800315c:	58021400 	.word	0x58021400
 8003160:	58020800 	.word	0x58020800
 8003164:	58020000 	.word	0x58020000
 8003168:	58020400 	.word	0x58020400
 800316c:	58021800 	.word	0x58021800
 8003170:	58020c00 	.word	0x58020c00
 8003174:	11210000 	.word	0x11210000
 8003178:	11110000 	.word	0x11110000

0800317c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800317c:	b480      	push	{r7}
 800317e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8003180:	bf00      	nop
 8003182:	46bd      	mov	sp, r7
 8003184:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003188:	4770      	bx	lr
	...

0800318c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                                                                                                            /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800318c:	b480      	push	{r7}
 800318e:	b083      	sub	sp, #12
 8003190:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003192:	4b0a      	ldr	r3, [pc, #40]	; (80031bc <HAL_MspInit+0x30>)
 8003194:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8003198:	4a08      	ldr	r2, [pc, #32]	; (80031bc <HAL_MspInit+0x30>)
 800319a:	f043 0302 	orr.w	r3, r3, #2
 800319e:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 80031a2:	4b06      	ldr	r3, [pc, #24]	; (80031bc <HAL_MspInit+0x30>)
 80031a4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80031a8:	f003 0302 	and.w	r3, r3, #2
 80031ac:	607b      	str	r3, [r7, #4]
 80031ae:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80031b0:	bf00      	nop
 80031b2:	370c      	adds	r7, #12
 80031b4:	46bd      	mov	sp, r7
 80031b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031ba:	4770      	bx	lr
 80031bc:	58024400 	.word	0x58024400

080031c0 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 80031c0:	b480      	push	{r7}
 80031c2:	b08b      	sub	sp, #44	; 0x2c
 80031c4:	af00      	add	r7, sp, #0
 80031c6:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	4a4a      	ldr	r2, [pc, #296]	; (80032f8 <HAL_TIM_PWM_MspInit+0x138>)
 80031ce:	4293      	cmp	r3, r2
 80031d0:	d10f      	bne.n	80031f2 <HAL_TIM_PWM_MspInit+0x32>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80031d2:	4b4a      	ldr	r3, [pc, #296]	; (80032fc <HAL_TIM_PWM_MspInit+0x13c>)
 80031d4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80031d8:	4a48      	ldr	r2, [pc, #288]	; (80032fc <HAL_TIM_PWM_MspInit+0x13c>)
 80031da:	f043 0301 	orr.w	r3, r3, #1
 80031de:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 80031e2:	4b46      	ldr	r3, [pc, #280]	; (80032fc <HAL_TIM_PWM_MspInit+0x13c>)
 80031e4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80031e8:	f003 0301 	and.w	r3, r3, #1
 80031ec:	627b      	str	r3, [r7, #36]	; 0x24
 80031ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  /* USER CODE BEGIN TIM15_MspInit 1 */

  /* USER CODE END TIM15_MspInit 1 */
  }

}
 80031f0:	e07c      	b.n	80032ec <HAL_TIM_PWM_MspInit+0x12c>
  else if(htim_pwm->Instance==TIM2)
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80031fa:	d10f      	bne.n	800321c <HAL_TIM_PWM_MspInit+0x5c>
    __HAL_RCC_TIM2_CLK_ENABLE();
 80031fc:	4b3f      	ldr	r3, [pc, #252]	; (80032fc <HAL_TIM_PWM_MspInit+0x13c>)
 80031fe:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003202:	4a3e      	ldr	r2, [pc, #248]	; (80032fc <HAL_TIM_PWM_MspInit+0x13c>)
 8003204:	f043 0301 	orr.w	r3, r3, #1
 8003208:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800320c:	4b3b      	ldr	r3, [pc, #236]	; (80032fc <HAL_TIM_PWM_MspInit+0x13c>)
 800320e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003212:	f003 0301 	and.w	r3, r3, #1
 8003216:	623b      	str	r3, [r7, #32]
 8003218:	6a3b      	ldr	r3, [r7, #32]
}
 800321a:	e067      	b.n	80032ec <HAL_TIM_PWM_MspInit+0x12c>
  else if(htim_pwm->Instance==TIM4)
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	4a37      	ldr	r2, [pc, #220]	; (8003300 <HAL_TIM_PWM_MspInit+0x140>)
 8003222:	4293      	cmp	r3, r2
 8003224:	d10f      	bne.n	8003246 <HAL_TIM_PWM_MspInit+0x86>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8003226:	4b35      	ldr	r3, [pc, #212]	; (80032fc <HAL_TIM_PWM_MspInit+0x13c>)
 8003228:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800322c:	4a33      	ldr	r2, [pc, #204]	; (80032fc <HAL_TIM_PWM_MspInit+0x13c>)
 800322e:	f043 0304 	orr.w	r3, r3, #4
 8003232:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8003236:	4b31      	ldr	r3, [pc, #196]	; (80032fc <HAL_TIM_PWM_MspInit+0x13c>)
 8003238:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800323c:	f003 0304 	and.w	r3, r3, #4
 8003240:	61fb      	str	r3, [r7, #28]
 8003242:	69fb      	ldr	r3, [r7, #28]
}
 8003244:	e052      	b.n	80032ec <HAL_TIM_PWM_MspInit+0x12c>
  else if(htim_pwm->Instance==TIM5)
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	4a2e      	ldr	r2, [pc, #184]	; (8003304 <HAL_TIM_PWM_MspInit+0x144>)
 800324c:	4293      	cmp	r3, r2
 800324e:	d10f      	bne.n	8003270 <HAL_TIM_PWM_MspInit+0xb0>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8003250:	4b2a      	ldr	r3, [pc, #168]	; (80032fc <HAL_TIM_PWM_MspInit+0x13c>)
 8003252:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003256:	4a29      	ldr	r2, [pc, #164]	; (80032fc <HAL_TIM_PWM_MspInit+0x13c>)
 8003258:	f043 0308 	orr.w	r3, r3, #8
 800325c:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8003260:	4b26      	ldr	r3, [pc, #152]	; (80032fc <HAL_TIM_PWM_MspInit+0x13c>)
 8003262:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003266:	f003 0308 	and.w	r3, r3, #8
 800326a:	61bb      	str	r3, [r7, #24]
 800326c:	69bb      	ldr	r3, [r7, #24]
}
 800326e:	e03d      	b.n	80032ec <HAL_TIM_PWM_MspInit+0x12c>
  else if(htim_pwm->Instance==TIM8)
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	4a24      	ldr	r2, [pc, #144]	; (8003308 <HAL_TIM_PWM_MspInit+0x148>)
 8003276:	4293      	cmp	r3, r2
 8003278:	d10f      	bne.n	800329a <HAL_TIM_PWM_MspInit+0xda>
    __HAL_RCC_TIM8_CLK_ENABLE();
 800327a:	4b20      	ldr	r3, [pc, #128]	; (80032fc <HAL_TIM_PWM_MspInit+0x13c>)
 800327c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8003280:	4a1e      	ldr	r2, [pc, #120]	; (80032fc <HAL_TIM_PWM_MspInit+0x13c>)
 8003282:	f043 0302 	orr.w	r3, r3, #2
 8003286:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 800328a:	4b1c      	ldr	r3, [pc, #112]	; (80032fc <HAL_TIM_PWM_MspInit+0x13c>)
 800328c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8003290:	f003 0302 	and.w	r3, r3, #2
 8003294:	617b      	str	r3, [r7, #20]
 8003296:	697b      	ldr	r3, [r7, #20]
}
 8003298:	e028      	b.n	80032ec <HAL_TIM_PWM_MspInit+0x12c>
  else if(htim_pwm->Instance==TIM12)
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	4a1b      	ldr	r2, [pc, #108]	; (800330c <HAL_TIM_PWM_MspInit+0x14c>)
 80032a0:	4293      	cmp	r3, r2
 80032a2:	d10f      	bne.n	80032c4 <HAL_TIM_PWM_MspInit+0x104>
    __HAL_RCC_TIM12_CLK_ENABLE();
 80032a4:	4b15      	ldr	r3, [pc, #84]	; (80032fc <HAL_TIM_PWM_MspInit+0x13c>)
 80032a6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80032aa:	4a14      	ldr	r2, [pc, #80]	; (80032fc <HAL_TIM_PWM_MspInit+0x13c>)
 80032ac:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80032b0:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80032b4:	4b11      	ldr	r3, [pc, #68]	; (80032fc <HAL_TIM_PWM_MspInit+0x13c>)
 80032b6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80032ba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80032be:	613b      	str	r3, [r7, #16]
 80032c0:	693b      	ldr	r3, [r7, #16]
}
 80032c2:	e013      	b.n	80032ec <HAL_TIM_PWM_MspInit+0x12c>
  else if(htim_pwm->Instance==TIM15)
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	4a11      	ldr	r2, [pc, #68]	; (8003310 <HAL_TIM_PWM_MspInit+0x150>)
 80032ca:	4293      	cmp	r3, r2
 80032cc:	d10e      	bne.n	80032ec <HAL_TIM_PWM_MspInit+0x12c>
    __HAL_RCC_TIM15_CLK_ENABLE();
 80032ce:	4b0b      	ldr	r3, [pc, #44]	; (80032fc <HAL_TIM_PWM_MspInit+0x13c>)
 80032d0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80032d4:	4a09      	ldr	r2, [pc, #36]	; (80032fc <HAL_TIM_PWM_MspInit+0x13c>)
 80032d6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80032da:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 80032de:	4b07      	ldr	r3, [pc, #28]	; (80032fc <HAL_TIM_PWM_MspInit+0x13c>)
 80032e0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80032e4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80032e8:	60fb      	str	r3, [r7, #12]
 80032ea:	68fb      	ldr	r3, [r7, #12]
}
 80032ec:	bf00      	nop
 80032ee:	372c      	adds	r7, #44	; 0x2c
 80032f0:	46bd      	mov	sp, r7
 80032f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032f6:	4770      	bx	lr
 80032f8:	40010000 	.word	0x40010000
 80032fc:	58024400 	.word	0x58024400
 8003300:	40000800 	.word	0x40000800
 8003304:	40000c00 	.word	0x40000c00
 8003308:	40010400 	.word	0x40010400
 800330c:	40001800 	.word	0x40001800
 8003310:	40014000 	.word	0x40014000

08003314 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8003314:	b580      	push	{r7, lr}
 8003316:	b08e      	sub	sp, #56	; 0x38
 8003318:	af00      	add	r7, sp, #0
 800331a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800331c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003320:	2200      	movs	r2, #0
 8003322:	601a      	str	r2, [r3, #0]
 8003324:	605a      	str	r2, [r3, #4]
 8003326:	609a      	str	r2, [r3, #8]
 8003328:	60da      	str	r2, [r3, #12]
 800332a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	4a83      	ldr	r2, [pc, #524]	; (8003540 <HAL_TIM_MspPostInit+0x22c>)
 8003332:	4293      	cmp	r3, r2
 8003334:	d120      	bne.n	8003378 <HAL_TIM_MspPostInit+0x64>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8003336:	4b83      	ldr	r3, [pc, #524]	; (8003544 <HAL_TIM_MspPostInit+0x230>)
 8003338:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800333c:	4a81      	ldr	r2, [pc, #516]	; (8003544 <HAL_TIM_MspPostInit+0x230>)
 800333e:	f043 0310 	orr.w	r3, r3, #16
 8003342:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8003346:	4b7f      	ldr	r3, [pc, #508]	; (8003544 <HAL_TIM_MspPostInit+0x230>)
 8003348:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800334c:	f003 0310 	and.w	r3, r3, #16
 8003350:	623b      	str	r3, [r7, #32]
 8003352:	6a3b      	ldr	r3, [r7, #32]
    /**TIM1 GPIO Configuration    
    PE9     ------> TIM1_CH1
    PE13     ------> TIM1_CH3 
    */
    GPIO_InitStruct.Pin = Stepper1_PWM_Pin|Stepper2_DIR_Pin;
 8003354:	f44f 5308 	mov.w	r3, #8704	; 0x2200
 8003358:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800335a:	2302      	movs	r3, #2
 800335c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800335e:	2300      	movs	r3, #0
 8003360:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003362:	2300      	movs	r3, #0
 8003364:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8003366:	2301      	movs	r3, #1
 8003368:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800336a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800336e:	4619      	mov	r1, r3
 8003370:	4875      	ldr	r0, [pc, #468]	; (8003548 <HAL_TIM_MspPostInit+0x234>)
 8003372:	f7fd f95f 	bl	8000634 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM15_MspPostInit 1 */

  /* USER CODE END TIM15_MspPostInit 1 */
  }

}
 8003376:	e0de      	b.n	8003536 <HAL_TIM_MspPostInit+0x222>
  else if(htim->Instance==TIM2)
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003380:	d11f      	bne.n	80033c2 <HAL_TIM_MspPostInit+0xae>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003382:	4b70      	ldr	r3, [pc, #448]	; (8003544 <HAL_TIM_MspPostInit+0x230>)
 8003384:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003388:	4a6e      	ldr	r2, [pc, #440]	; (8003544 <HAL_TIM_MspPostInit+0x230>)
 800338a:	f043 0301 	orr.w	r3, r3, #1
 800338e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8003392:	4b6c      	ldr	r3, [pc, #432]	; (8003544 <HAL_TIM_MspPostInit+0x230>)
 8003394:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003398:	f003 0301 	and.w	r3, r3, #1
 800339c:	61fb      	str	r3, [r7, #28]
 800339e:	69fb      	ldr	r3, [r7, #28]
    GPIO_InitStruct.Pin = Stepper2_PWM_Pin;
 80033a0:	2301      	movs	r3, #1
 80033a2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80033a4:	2302      	movs	r3, #2
 80033a6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80033a8:	2300      	movs	r3, #0
 80033aa:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80033ac:	2300      	movs	r3, #0
 80033ae:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80033b0:	2301      	movs	r3, #1
 80033b2:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(Stepper2_PWM_GPIO_Port, &GPIO_InitStruct);
 80033b4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80033b8:	4619      	mov	r1, r3
 80033ba:	4864      	ldr	r0, [pc, #400]	; (800354c <HAL_TIM_MspPostInit+0x238>)
 80033bc:	f7fd f93a 	bl	8000634 <HAL_GPIO_Init>
}
 80033c0:	e0b9      	b.n	8003536 <HAL_TIM_MspPostInit+0x222>
  else if(htim->Instance==TIM4)
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	4a62      	ldr	r2, [pc, #392]	; (8003550 <HAL_TIM_MspPostInit+0x23c>)
 80033c8:	4293      	cmp	r3, r2
 80033ca:	d120      	bne.n	800340e <HAL_TIM_MspPostInit+0xfa>
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80033cc:	4b5d      	ldr	r3, [pc, #372]	; (8003544 <HAL_TIM_MspPostInit+0x230>)
 80033ce:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80033d2:	4a5c      	ldr	r2, [pc, #368]	; (8003544 <HAL_TIM_MspPostInit+0x230>)
 80033d4:	f043 0308 	orr.w	r3, r3, #8
 80033d8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80033dc:	4b59      	ldr	r3, [pc, #356]	; (8003544 <HAL_TIM_MspPostInit+0x230>)
 80033de:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80033e2:	f003 0308 	and.w	r3, r3, #8
 80033e6:	61bb      	str	r3, [r7, #24]
 80033e8:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = Stepper5_PWM_Pin;
 80033ea:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80033ee:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80033f0:	2302      	movs	r3, #2
 80033f2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80033f4:	2300      	movs	r3, #0
 80033f6:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80033f8:	2300      	movs	r3, #0
 80033fa:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 80033fc:	2302      	movs	r3, #2
 80033fe:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(Stepper5_PWM_GPIO_Port, &GPIO_InitStruct);
 8003400:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003404:	4619      	mov	r1, r3
 8003406:	4853      	ldr	r0, [pc, #332]	; (8003554 <HAL_TIM_MspPostInit+0x240>)
 8003408:	f7fd f914 	bl	8000634 <HAL_GPIO_Init>
}
 800340c:	e093      	b.n	8003536 <HAL_TIM_MspPostInit+0x222>
  else if(htim->Instance==TIM5)
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	4a51      	ldr	r2, [pc, #324]	; (8003558 <HAL_TIM_MspPostInit+0x244>)
 8003414:	4293      	cmp	r3, r2
 8003416:	d11f      	bne.n	8003458 <HAL_TIM_MspPostInit+0x144>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003418:	4b4a      	ldr	r3, [pc, #296]	; (8003544 <HAL_TIM_MspPostInit+0x230>)
 800341a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800341e:	4a49      	ldr	r2, [pc, #292]	; (8003544 <HAL_TIM_MspPostInit+0x230>)
 8003420:	f043 0301 	orr.w	r3, r3, #1
 8003424:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8003428:	4b46      	ldr	r3, [pc, #280]	; (8003544 <HAL_TIM_MspPostInit+0x230>)
 800342a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800342e:	f003 0301 	and.w	r3, r3, #1
 8003432:	617b      	str	r3, [r7, #20]
 8003434:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = Stepper6_PWM_Pin;
 8003436:	2302      	movs	r3, #2
 8003438:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800343a:	2302      	movs	r3, #2
 800343c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800343e:	2300      	movs	r3, #0
 8003440:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003442:	2300      	movs	r3, #0
 8003444:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 8003446:	2302      	movs	r3, #2
 8003448:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(Stepper6_PWM_GPIO_Port, &GPIO_InitStruct);
 800344a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800344e:	4619      	mov	r1, r3
 8003450:	483e      	ldr	r0, [pc, #248]	; (800354c <HAL_TIM_MspPostInit+0x238>)
 8003452:	f7fd f8ef 	bl	8000634 <HAL_GPIO_Init>
}
 8003456:	e06e      	b.n	8003536 <HAL_TIM_MspPostInit+0x222>
  else if(htim->Instance==TIM8)
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	4a3f      	ldr	r2, [pc, #252]	; (800355c <HAL_TIM_MspPostInit+0x248>)
 800345e:	4293      	cmp	r3, r2
 8003460:	d11f      	bne.n	80034a2 <HAL_TIM_MspPostInit+0x18e>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003462:	4b38      	ldr	r3, [pc, #224]	; (8003544 <HAL_TIM_MspPostInit+0x230>)
 8003464:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003468:	4a36      	ldr	r2, [pc, #216]	; (8003544 <HAL_TIM_MspPostInit+0x230>)
 800346a:	f043 0304 	orr.w	r3, r3, #4
 800346e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8003472:	4b34      	ldr	r3, [pc, #208]	; (8003544 <HAL_TIM_MspPostInit+0x230>)
 8003474:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003478:	f003 0304 	and.w	r3, r3, #4
 800347c:	613b      	str	r3, [r7, #16]
 800347e:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = Stepper3_PWM_Pin;
 8003480:	2340      	movs	r3, #64	; 0x40
 8003482:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003484:	2302      	movs	r3, #2
 8003486:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003488:	2300      	movs	r3, #0
 800348a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800348c:	2300      	movs	r3, #0
 800348e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 8003490:	2303      	movs	r3, #3
 8003492:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(Stepper3_PWM_GPIO_Port, &GPIO_InitStruct);
 8003494:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003498:	4619      	mov	r1, r3
 800349a:	4831      	ldr	r0, [pc, #196]	; (8003560 <HAL_TIM_MspPostInit+0x24c>)
 800349c:	f7fd f8ca 	bl	8000634 <HAL_GPIO_Init>
}
 80034a0:	e049      	b.n	8003536 <HAL_TIM_MspPostInit+0x222>
  else if(htim->Instance==TIM12)
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	4a2f      	ldr	r2, [pc, #188]	; (8003564 <HAL_TIM_MspPostInit+0x250>)
 80034a8:	4293      	cmp	r3, r2
 80034aa:	d120      	bne.n	80034ee <HAL_TIM_MspPostInit+0x1da>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80034ac:	4b25      	ldr	r3, [pc, #148]	; (8003544 <HAL_TIM_MspPostInit+0x230>)
 80034ae:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80034b2:	4a24      	ldr	r2, [pc, #144]	; (8003544 <HAL_TIM_MspPostInit+0x230>)
 80034b4:	f043 0302 	orr.w	r3, r3, #2
 80034b8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80034bc:	4b21      	ldr	r3, [pc, #132]	; (8003544 <HAL_TIM_MspPostInit+0x230>)
 80034be:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80034c2:	f003 0302 	and.w	r3, r3, #2
 80034c6:	60fb      	str	r3, [r7, #12]
 80034c8:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_14;
 80034ca:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80034ce:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80034d0:	2302      	movs	r3, #2
 80034d2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80034d4:	2300      	movs	r3, #0
 80034d6:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80034d8:	2300      	movs	r3, #0
 80034da:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM12;
 80034dc:	2302      	movs	r3, #2
 80034de:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80034e0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80034e4:	4619      	mov	r1, r3
 80034e6:	4820      	ldr	r0, [pc, #128]	; (8003568 <HAL_TIM_MspPostInit+0x254>)
 80034e8:	f7fd f8a4 	bl	8000634 <HAL_GPIO_Init>
}
 80034ec:	e023      	b.n	8003536 <HAL_TIM_MspPostInit+0x222>
  else if(htim->Instance==TIM15)
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	4a1e      	ldr	r2, [pc, #120]	; (800356c <HAL_TIM_MspPostInit+0x258>)
 80034f4:	4293      	cmp	r3, r2
 80034f6:	d11e      	bne.n	8003536 <HAL_TIM_MspPostInit+0x222>
    __HAL_RCC_GPIOE_CLK_ENABLE();
 80034f8:	4b12      	ldr	r3, [pc, #72]	; (8003544 <HAL_TIM_MspPostInit+0x230>)
 80034fa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80034fe:	4a11      	ldr	r2, [pc, #68]	; (8003544 <HAL_TIM_MspPostInit+0x230>)
 8003500:	f043 0310 	orr.w	r3, r3, #16
 8003504:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8003508:	4b0e      	ldr	r3, [pc, #56]	; (8003544 <HAL_TIM_MspPostInit+0x230>)
 800350a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800350e:	f003 0310 	and.w	r3, r3, #16
 8003512:	60bb      	str	r3, [r7, #8]
 8003514:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8003516:	2320      	movs	r3, #32
 8003518:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800351a:	2302      	movs	r3, #2
 800351c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800351e:	2300      	movs	r3, #0
 8003520:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003522:	2300      	movs	r3, #0
 8003524:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF4_TIM15;
 8003526:	2304      	movs	r3, #4
 8003528:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800352a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800352e:	4619      	mov	r1, r3
 8003530:	4805      	ldr	r0, [pc, #20]	; (8003548 <HAL_TIM_MspPostInit+0x234>)
 8003532:	f7fd f87f 	bl	8000634 <HAL_GPIO_Init>
}
 8003536:	bf00      	nop
 8003538:	3738      	adds	r7, #56	; 0x38
 800353a:	46bd      	mov	sp, r7
 800353c:	bd80      	pop	{r7, pc}
 800353e:	bf00      	nop
 8003540:	40010000 	.word	0x40010000
 8003544:	58024400 	.word	0x58024400
 8003548:	58021000 	.word	0x58021000
 800354c:	58020000 	.word	0x58020000
 8003550:	40000800 	.word	0x40000800
 8003554:	58020c00 	.word	0x58020c00
 8003558:	40000c00 	.word	0x40000c00
 800355c:	40010400 	.word	0x40010400
 8003560:	58020800 	.word	0x58020800
 8003564:	40001800 	.word	0x40001800
 8003568:	58020400 	.word	0x58020400
 800356c:	40014000 	.word	0x40014000

08003570 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003570:	b480      	push	{r7}
 8003572:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8003574:	bf00      	nop
 8003576:	46bd      	mov	sp, r7
 8003578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800357c:	4770      	bx	lr

0800357e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800357e:	b480      	push	{r7}
 8003580:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003582:	e7fe      	b.n	8003582 <HardFault_Handler+0x4>

08003584 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003584:	b480      	push	{r7}
 8003586:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003588:	e7fe      	b.n	8003588 <MemManage_Handler+0x4>

0800358a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800358a:	b480      	push	{r7}
 800358c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800358e:	e7fe      	b.n	800358e <BusFault_Handler+0x4>

08003590 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003590:	b480      	push	{r7}
 8003592:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003594:	e7fe      	b.n	8003594 <UsageFault_Handler+0x4>

08003596 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003596:	b480      	push	{r7}
 8003598:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800359a:	bf00      	nop
 800359c:	46bd      	mov	sp, r7
 800359e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035a2:	4770      	bx	lr

080035a4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80035a4:	b480      	push	{r7}
 80035a6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80035a8:	bf00      	nop
 80035aa:	46bd      	mov	sp, r7
 80035ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035b0:	4770      	bx	lr

080035b2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80035b2:	b480      	push	{r7}
 80035b4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80035b6:	bf00      	nop
 80035b8:	46bd      	mov	sp, r7
 80035ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035be:	4770      	bx	lr

080035c0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80035c0:	b580      	push	{r7, lr}
 80035c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80035c4:	f7fc fefa 	bl	80003bc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80035c8:	bf00      	nop
 80035ca:	bd80      	pop	{r7, pc}

080035cc <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 80035cc:	b580      	push	{r7, lr}
 80035ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_4);
 80035d0:	2010      	movs	r0, #16
 80035d2:	f7fd f9f8 	bl	80009c6 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 80035d6:	bf00      	nop
 80035d8:	bd80      	pop	{r7, pc}

080035da <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 80035da:	b580      	push	{r7, lr}
 80035dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_5);
 80035de:	2020      	movs	r0, #32
 80035e0:	f7fd f9f1 	bl	80009c6 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_6);
 80035e4:	2040      	movs	r0, #64	; 0x40
 80035e6:	f7fd f9ee 	bl	80009c6 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_7);
 80035ea:	2080      	movs	r0, #128	; 0x80
 80035ec:	f7fd f9eb 	bl	80009c6 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */
  /* USER CODE END EXTI9_5_IRQn 1 */
}
 80035f0:	bf00      	nop
 80035f2:	bd80      	pop	{r7, pc}

080035f4 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80035f4:	b580      	push	{r7, lr}
 80035f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */
  //PIN_12 - HALL_3
  //PIN_13 - HALL 2
  //PIN_15 - HALL 1
  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_12);
 80035f8:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 80035fc:	f7fd f9e3 	bl	80009c6 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8003600:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8003604:	f7fd f9df 	bl	80009c6 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_15);
 8003608:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 800360c:	f7fd f9db 	bl	80009c6 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */
  if(!READ_BIT(GPIOB->IDR, GPIO_IDR_ID12) && !secondStep)
 8003610:	4b11      	ldr	r3, [pc, #68]	; (8003658 <EXTI15_10_IRQHandler+0x64>)
 8003612:	691b      	ldr	r3, [r3, #16]
 8003614:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003618:	2b00      	cmp	r3, #0
 800361a:	d109      	bne.n	8003630 <EXTI15_10_IRQHandler+0x3c>
 800361c:	4b0f      	ldr	r3, [pc, #60]	; (800365c <EXTI15_10_IRQHandler+0x68>)
 800361e:	781b      	ldrb	r3, [r3, #0]
 8003620:	f083 0301 	eor.w	r3, r3, #1
 8003624:	b2db      	uxtb	r3, r3
 8003626:	2b00      	cmp	r3, #0
 8003628:	d002      	beq.n	8003630 <EXTI15_10_IRQHandler+0x3c>
   {
 	  //SET_BIT(GPIOD->ODR, GPIO_ODR_OD8); //Clockwise
 	  secondStep = true;
 800362a:	4b0c      	ldr	r3, [pc, #48]	; (800365c <EXTI15_10_IRQHandler+0x68>)
 800362c:	2201      	movs	r2, #1
 800362e:	701a      	strb	r2, [r3, #0]
 	  //delay_ms(200);
   }

  if(!READ_BIT(GPIOB->IDR, GPIO_IDR_ID15) && !thirdStep)
 8003630:	4b09      	ldr	r3, [pc, #36]	; (8003658 <EXTI15_10_IRQHandler+0x64>)
 8003632:	691b      	ldr	r3, [r3, #16]
 8003634:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003638:	2b00      	cmp	r3, #0
 800363a:	d109      	bne.n	8003650 <EXTI15_10_IRQHandler+0x5c>
 800363c:	4b08      	ldr	r3, [pc, #32]	; (8003660 <EXTI15_10_IRQHandler+0x6c>)
 800363e:	781b      	ldrb	r3, [r3, #0]
 8003640:	f083 0301 	eor.w	r3, r3, #1
 8003644:	b2db      	uxtb	r3, r3
 8003646:	2b00      	cmp	r3, #0
 8003648:	d002      	beq.n	8003650 <EXTI15_10_IRQHandler+0x5c>
   {
 	  //SET_BIT(GPIOD->ODR, GPIO_ODR_OD8); //Clockwise
	  thirdStep = true;
 800364a:	4b05      	ldr	r3, [pc, #20]	; (8003660 <EXTI15_10_IRQHandler+0x6c>)
 800364c:	2201      	movs	r2, #1
 800364e:	701a      	strb	r2, [r3, #0]
 	  //delay_ms(200);
   }
   if(!READ_BIT(GPIOB->IDR, GPIO_IDR_ID13))
 8003650:	4b01      	ldr	r3, [pc, #4]	; (8003658 <EXTI15_10_IRQHandler+0x64>)
 8003652:	691b      	ldr	r3, [r3, #16]
   {
 	  //delay_ms(200);
 	  //delay_ms(500);
   }
  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8003654:	bf00      	nop
 8003656:	bd80      	pop	{r7, pc}
 8003658:	58020400 	.word	0x58020400
 800365c:	2400002c 	.word	0x2400002c
 8003660:	2400002d 	.word	0x2400002d

08003664 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8003664:	b480      	push	{r7}
 8003666:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8003668:	4b29      	ldr	r3, [pc, #164]	; (8003710 <SystemInit+0xac>)
 800366a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800366e:	4a28      	ldr	r2, [pc, #160]	; (8003710 <SystemInit+0xac>)
 8003670:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003674:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8003678:	4b26      	ldr	r3, [pc, #152]	; (8003714 <SystemInit+0xb0>)
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	4a25      	ldr	r2, [pc, #148]	; (8003714 <SystemInit+0xb0>)
 800367e:	f043 0301 	orr.w	r3, r3, #1
 8003682:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8003684:	4b23      	ldr	r3, [pc, #140]	; (8003714 <SystemInit+0xb0>)
 8003686:	2200      	movs	r2, #0
 8003688:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, CSSON , CSION,RC48ON, CSIKERON PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 800368a:	4b22      	ldr	r3, [pc, #136]	; (8003714 <SystemInit+0xb0>)
 800368c:	681a      	ldr	r2, [r3, #0]
 800368e:	4921      	ldr	r1, [pc, #132]	; (8003714 <SystemInit+0xb0>)
 8003690:	4b21      	ldr	r3, [pc, #132]	; (8003718 <SystemInit+0xb4>)
 8003692:	4013      	ands	r3, r2
 8003694:	600b      	str	r3, [r1, #0]

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8003696:	4b1f      	ldr	r3, [pc, #124]	; (8003714 <SystemInit+0xb0>)
 8003698:	2200      	movs	r2, #0
 800369a:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 800369c:	4b1d      	ldr	r3, [pc, #116]	; (8003714 <SystemInit+0xb0>)
 800369e:	2200      	movs	r2, #0
 80036a0:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 80036a2:	4b1c      	ldr	r3, [pc, #112]	; (8003714 <SystemInit+0xb0>)
 80036a4:	2200      	movs	r2, #0
 80036a6:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x00000000;
 80036a8:	4b1a      	ldr	r3, [pc, #104]	; (8003714 <SystemInit+0xb0>)
 80036aa:	2200      	movs	r2, #0
 80036ac:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00000000;
 80036ae:	4b19      	ldr	r3, [pc, #100]	; (8003714 <SystemInit+0xb0>)
 80036b0:	2200      	movs	r2, #0
 80036b2:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x00000000;
 80036b4:	4b17      	ldr	r3, [pc, #92]	; (8003714 <SystemInit+0xb0>)
 80036b6:	2200      	movs	r2, #0
 80036b8:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 80036ba:	4b16      	ldr	r3, [pc, #88]	; (8003714 <SystemInit+0xb0>)
 80036bc:	2200      	movs	r2, #0
 80036be:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x00000000;
 80036c0:	4b14      	ldr	r3, [pc, #80]	; (8003714 <SystemInit+0xb0>)
 80036c2:	2200      	movs	r2, #0
 80036c4:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 80036c6:	4b13      	ldr	r3, [pc, #76]	; (8003714 <SystemInit+0xb0>)
 80036c8:	2200      	movs	r2, #0
 80036ca:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x00000000;
 80036cc:	4b11      	ldr	r3, [pc, #68]	; (8003714 <SystemInit+0xb0>)
 80036ce:	2200      	movs	r2, #0
 80036d0:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 80036d2:	4b10      	ldr	r3, [pc, #64]	; (8003714 <SystemInit+0xb0>)
 80036d4:	2200      	movs	r2, #0
 80036d6:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80036d8:	4b0e      	ldr	r3, [pc, #56]	; (8003714 <SystemInit+0xb0>)
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	4a0d      	ldr	r2, [pc, #52]	; (8003714 <SystemInit+0xb0>)
 80036de:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80036e2:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 80036e4:	4b0b      	ldr	r3, [pc, #44]	; (8003714 <SystemInit+0xb0>)
 80036e6:	2200      	movs	r2, #0
 80036e8:	661a      	str	r2, [r3, #96]	; 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 80036ea:	4b0c      	ldr	r3, [pc, #48]	; (800371c <SystemInit+0xb8>)
 80036ec:	681a      	ldr	r2, [r3, #0]
 80036ee:	4b0c      	ldr	r3, [pc, #48]	; (8003720 <SystemInit+0xbc>)
 80036f0:	4013      	ands	r3, r2
 80036f2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80036f6:	d202      	bcs.n	80036fe <SystemInit+0x9a>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 80036f8:	4b0a      	ldr	r3, [pc, #40]	; (8003724 <SystemInit+0xc0>)
 80036fa:	2201      	movs	r2, #1
 80036fc:	601a      	str	r2, [r3, #0]

  /* Configure the Vector Table location add offset address for cortex-M7 ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = D1_AXISRAM_BASE  | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal AXI-RAM */
#else
  SCB->VTOR = FLASH_BANK1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80036fe:	4b04      	ldr	r3, [pc, #16]	; (8003710 <SystemInit+0xac>)
 8003700:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8003704:	609a      	str	r2, [r3, #8]
#endif

#endif /*DUAL_CORE && CORE_CM4*/

}
 8003706:	bf00      	nop
 8003708:	46bd      	mov	sp, r7
 800370a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800370e:	4770      	bx	lr
 8003710:	e000ed00 	.word	0xe000ed00
 8003714:	58024400 	.word	0x58024400
 8003718:	eaf6ed7f 	.word	0xeaf6ed7f
 800371c:	5c001000 	.word	0x5c001000
 8003720:	ffff0000 	.word	0xffff0000
 8003724:	51008108 	.word	0x51008108

08003728 <Reset_Handler>:
 8003728:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003760 <LoopFillZerobss+0x14>
 800372c:	2100      	movs	r1, #0
 800372e:	e003      	b.n	8003738 <LoopCopyDataInit>

08003730 <CopyDataInit>:
 8003730:	4b0c      	ldr	r3, [pc, #48]	; (8003764 <LoopFillZerobss+0x18>)
 8003732:	585b      	ldr	r3, [r3, r1]
 8003734:	5043      	str	r3, [r0, r1]
 8003736:	3104      	adds	r1, #4

08003738 <LoopCopyDataInit>:
 8003738:	480b      	ldr	r0, [pc, #44]	; (8003768 <LoopFillZerobss+0x1c>)
 800373a:	4b0c      	ldr	r3, [pc, #48]	; (800376c <LoopFillZerobss+0x20>)
 800373c:	1842      	adds	r2, r0, r1
 800373e:	429a      	cmp	r2, r3
 8003740:	d3f6      	bcc.n	8003730 <CopyDataInit>
 8003742:	4a0b      	ldr	r2, [pc, #44]	; (8003770 <LoopFillZerobss+0x24>)
 8003744:	e002      	b.n	800374c <LoopFillZerobss>

08003746 <FillZerobss>:
 8003746:	2300      	movs	r3, #0
 8003748:	f842 3b04 	str.w	r3, [r2], #4

0800374c <LoopFillZerobss>:
 800374c:	4b09      	ldr	r3, [pc, #36]	; (8003774 <LoopFillZerobss+0x28>)
 800374e:	429a      	cmp	r2, r3
 8003750:	d3f9      	bcc.n	8003746 <FillZerobss>
 8003752:	f7ff ff87 	bl	8003664 <SystemInit>
 8003756:	f000 f811 	bl	800377c <__libc_init_array>
 800375a:	f7fe ff57 	bl	800260c <main>
 800375e:	4770      	bx	lr
 8003760:	24080000 	.word	0x24080000
 8003764:	08003804 	.word	0x08003804
 8003768:	24000000 	.word	0x24000000
 800376c:	24000010 	.word	0x24000010
 8003770:	24000010 	.word	0x24000010
 8003774:	240001f4 	.word	0x240001f4

08003778 <ADC3_IRQHandler>:
 8003778:	e7fe      	b.n	8003778 <ADC3_IRQHandler>
	...

0800377c <__libc_init_array>:
 800377c:	b570      	push	{r4, r5, r6, lr}
 800377e:	4e0d      	ldr	r6, [pc, #52]	; (80037b4 <__libc_init_array+0x38>)
 8003780:	4c0d      	ldr	r4, [pc, #52]	; (80037b8 <__libc_init_array+0x3c>)
 8003782:	1ba4      	subs	r4, r4, r6
 8003784:	10a4      	asrs	r4, r4, #2
 8003786:	2500      	movs	r5, #0
 8003788:	42a5      	cmp	r5, r4
 800378a:	d109      	bne.n	80037a0 <__libc_init_array+0x24>
 800378c:	4e0b      	ldr	r6, [pc, #44]	; (80037bc <__libc_init_array+0x40>)
 800378e:	4c0c      	ldr	r4, [pc, #48]	; (80037c0 <__libc_init_array+0x44>)
 8003790:	f000 f820 	bl	80037d4 <_init>
 8003794:	1ba4      	subs	r4, r4, r6
 8003796:	10a4      	asrs	r4, r4, #2
 8003798:	2500      	movs	r5, #0
 800379a:	42a5      	cmp	r5, r4
 800379c:	d105      	bne.n	80037aa <__libc_init_array+0x2e>
 800379e:	bd70      	pop	{r4, r5, r6, pc}
 80037a0:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80037a4:	4798      	blx	r3
 80037a6:	3501      	adds	r5, #1
 80037a8:	e7ee      	b.n	8003788 <__libc_init_array+0xc>
 80037aa:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80037ae:	4798      	blx	r3
 80037b0:	3501      	adds	r5, #1
 80037b2:	e7f2      	b.n	800379a <__libc_init_array+0x1e>
 80037b4:	080037fc 	.word	0x080037fc
 80037b8:	080037fc 	.word	0x080037fc
 80037bc:	080037fc 	.word	0x080037fc
 80037c0:	08003800 	.word	0x08003800

080037c4 <memset>:
 80037c4:	4402      	add	r2, r0
 80037c6:	4603      	mov	r3, r0
 80037c8:	4293      	cmp	r3, r2
 80037ca:	d100      	bne.n	80037ce <memset+0xa>
 80037cc:	4770      	bx	lr
 80037ce:	f803 1b01 	strb.w	r1, [r3], #1
 80037d2:	e7f9      	b.n	80037c8 <memset+0x4>

080037d4 <_init>:
 80037d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80037d6:	bf00      	nop
 80037d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80037da:	bc08      	pop	{r3}
 80037dc:	469e      	mov	lr, r3
 80037de:	4770      	bx	lr

080037e0 <_fini>:
 80037e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80037e2:	bf00      	nop
 80037e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80037e6:	bc08      	pop	{r3}
 80037e8:	469e      	mov	lr, r3
 80037ea:	4770      	bx	lr
